
sketch_jul20a.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000206  00800100  00004d92  00004e26  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004d92  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000477  00800306  00800306  0000502c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000502c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000505c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000a50  00000000  00000000  000050a0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00017ce8  00000000  00000000  00005af0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004c9a  00000000  00000000  0001d7d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00007878  00000000  00000000  00022472  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000207c  00000000  00000000  00029cec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000549d  00000000  00000000  0002bd68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000093ea  00000000  00000000  00031205  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000008d8  00000000  00000000  0003a5ef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 15 02 	jmp	0x42a	; 0x42a <__ctors_end>
       4:	0c 94 07 22 	jmp	0x440e	; 0x440e <__vector_1>
       8:	0c 94 2e 22 	jmp	0x445c	; 0x445c <__vector_2>
       c:	0c 94 3d 02 	jmp	0x47a	; 0x47a <__bad_interrupt>
      10:	0c 94 3d 02 	jmp	0x47a	; 0x47a <__bad_interrupt>
      14:	0c 94 3d 02 	jmp	0x47a	; 0x47a <__bad_interrupt>
      18:	0c 94 3d 02 	jmp	0x47a	; 0x47a <__bad_interrupt>
      1c:	0c 94 d6 07 	jmp	0xfac	; 0xfac <__vector_7>
      20:	0c 94 3d 02 	jmp	0x47a	; 0x47a <__bad_interrupt>
      24:	0c 94 3d 02 	jmp	0x47a	; 0x47a <__bad_interrupt>
      28:	0c 94 3d 02 	jmp	0x47a	; 0x47a <__bad_interrupt>
      2c:	0c 94 3d 02 	jmp	0x47a	; 0x47a <__bad_interrupt>
      30:	0c 94 3d 02 	jmp	0x47a	; 0x47a <__bad_interrupt>
      34:	0c 94 3d 02 	jmp	0x47a	; 0x47a <__bad_interrupt>
      38:	0c 94 3d 02 	jmp	0x47a	; 0x47a <__bad_interrupt>
      3c:	0c 94 3d 02 	jmp	0x47a	; 0x47a <__bad_interrupt>
      40:	0c 94 56 18 	jmp	0x30ac	; 0x30ac <__vector_16>
      44:	0c 94 3d 02 	jmp	0x47a	; 0x47a <__bad_interrupt>
      48:	0c 94 4e 15 	jmp	0x2a9c	; 0x2a9c <__vector_18>
      4c:	0c 94 80 15 	jmp	0x2b00	; 0x2b00 <__vector_19>
      50:	0c 94 3d 02 	jmp	0x47a	; 0x47a <__bad_interrupt>
      54:	0c 94 3d 02 	jmp	0x47a	; 0x47a <__bad_interrupt>
      58:	0c 94 3d 02 	jmp	0x47a	; 0x47a <__bad_interrupt>
      5c:	0c 94 3f 02 	jmp	0x47e	; 0x47e <__vector_23>
      60:	0c 94 3d 02 	jmp	0x47a	; 0x47a <__bad_interrupt>
      64:	0c 94 3d 02 	jmp	0x47a	; 0x47a <__bad_interrupt>
      68:	07 63       	ori	r16, 0x37	; 55
      6a:	42 36       	cpi	r20, 0x62	; 98
      6c:	b7 9b       	sbis	0x16, 7	; 22
      6e:	d8 a7       	std	Y+40, r29	; 0x28
      70:	1a 39       	cpi	r17, 0x9A	; 154
      72:	68 56       	subi	r22, 0x68	; 104
      74:	18 ae       	std	Y+56, r1	; 0x38
      76:	ba ab       	std	Y+50, r27	; 0x32
      78:	55 8c       	ldd	r5, Z+29	; 0x1d
      7a:	1d 3c       	cpi	r17, 0xCD	; 205
      7c:	b7 cc       	rjmp	.-1682   	; 0xfffff9ec <__eeprom_end+0xff7ef9ec>
      7e:	57 63       	ori	r21, 0x37	; 55
      80:	bd 6d       	ori	r27, 0xDD	; 221
      82:	ed fd       	.word	0xfded	; ????
      84:	75 3e       	cpi	r23, 0xE5	; 229
      86:	f6 17       	cp	r31, r22
      88:	72 31       	cpi	r23, 0x12	; 18
      8a:	bf 00       	.word	0x00bf	; ????
      8c:	00 00       	nop
      8e:	80 3f       	cpi	r24, 0xF0	; 240
      90:	08 00       	.word	0x0008	; ????
      92:	00 00       	nop
      94:	be 92       	st	-X, r11
      96:	24 49       	sbci	r18, 0x94	; 148
      98:	12 3e       	cpi	r17, 0xE2	; 226
      9a:	ab aa       	std	Y+51, r10	; 0x33
      9c:	aa 2a       	or	r10, r26
      9e:	be cd       	rjmp	.-1156   	; 0xfffffc1c <__eeprom_end+0xff7efc1c>
      a0:	cc cc       	rjmp	.-1640   	; 0xfffffa3a <__eeprom_end+0xff7efa3a>
      a2:	4c 3e       	cpi	r20, 0xEC	; 236
      a4:	00 00       	nop
      a6:	00 80       	ld	r0, Z
      a8:	be ab       	std	Y+54, r27	; 0x36
      aa:	aa aa       	std	Y+50, r10	; 0x32
      ac:	aa 3e       	cpi	r26, 0xEA	; 234
      ae:	00 00       	nop
      b0:	00 00       	nop
      b2:	bf 00       	.word	0x00bf	; ????
      b4:	00 00       	nop
      b6:	80 3f       	cpi	r24, 0xF0	; 240
      b8:	00 00       	nop
      ba:	00 00       	nop
      bc:	00 08       	sbc	r0, r0
      be:	41 78       	andi	r20, 0x81	; 129
      c0:	d3 bb       	out	0x13, r29	; 19
      c2:	43 87       	std	Z+11, r20	; 0x0b
      c4:	d1 13       	cpse	r29, r17
      c6:	3d 19       	sub	r19, r13
      c8:	0e 3c       	cpi	r16, 0xCE	; 206
      ca:	c3 bd       	out	0x23, r28	; 35
      cc:	42 82       	std	Z+2, r4	; 0x02
      ce:	ad 2b       	or	r26, r29
      d0:	3e 68       	ori	r19, 0x8E	; 142
      d2:	ec 82       	std	Y+4, r14	; 0x04
      d4:	76 be       	out	0x36, r7	; 54
      d6:	d9 8f       	std	Y+25, r29	; 0x19
      d8:	e1 a9       	ldd	r30, Z+49	; 0x31
      da:	3e 4c       	sbci	r19, 0xCE	; 206
      dc:	80 ef       	ldi	r24, 0xF0	; 240
      de:	ff be       	out	0x3f, r15	; 63
      e0:	01 c4       	rjmp	.+2050   	; 0x8e4 <__DATA_REGION_LENGTH__+0xe4>
      e2:	ff 7f       	andi	r31, 0xFF	; 255
      e4:	3f 00       	.word	0x003f	; ????
      e6:	00 00       	nop
	...

000000ea <__trampolines_end>:
      ea:	50 75       	andi	r21, 0x50	; 80
      ec:	6d 70       	andi	r22, 0x0D	; 13
      ee:	20 43       	sbci	r18, 0x30	; 48
      f0:	61 6c       	ori	r22, 0xC1	; 193
      f2:	69 62       	ori	r22, 0x29	; 41
      f4:	72 61       	ori	r23, 0x12	; 18
      f6:	74 69       	ori	r23, 0x94	; 148
      f8:	6f 6e       	ori	r22, 0xEF	; 239
      fa:	20 69       	ori	r18, 0x90	; 144
      fc:	73 20       	and	r7, r3
      fe:	66 61       	ori	r22, 0x16	; 22
     100:	69 6c       	ori	r22, 0xC9	; 201
	...

00000103 <_ZZ19Calibration_Of_PumpvE3__c>:
     103:	50 75 6d 70 20 43 61 6c 69 62 72 61 74 69 6f 6e     Pump Calibration
     113:	20 69 73 20 64 6f 6e 65 00                           is done.

0000011c <_ZZ21Check_To_Turn_On_PumpvE3__c_0>:
     11c:	31 2e 32 00                                         1.2.

00000120 <_ZZ21Check_To_Turn_On_PumpvE3__c>:
     120:	31 2e 31 00                                         1.1.

00000124 <_ZZ14Faults_HandlervE3__c_13>:
     124:	46 61 75 6c 74 20 70 61 63 6b 65 74 20 69 73 20     Fault packet is 
     134:	61 76 61 69 6c 61 62 6c 65 00                       available.

0000013e <_ZZ14Faults_HandlervE3__c_12>:
     13e:	50 75 6d 70 20 69 73 20 6f 6e 00                    Pump is on.

00000149 <_ZZ14Faults_HandlervE3__c_11>:
     149:	50 75 6d 70 20 69 73 20 6f 66 66 00                 Pump is off.

00000155 <_ZZ14Faults_HandlervE3__c_10>:
     155:	50 75 6d 70 20 6c 69 6e 65 20 66 61 75 6c 74 20     Pump line fault 
	...

00000166 <_ZZ14Faults_HandlervE3__c_9>:
     166:	50 75 6d 70 20 6c 69 6e 65 20 66 61 75 6c 74 20     Pump line fault 
	...

00000177 <_ZZ14Faults_HandlervE3__c_8>:
     177:	50 75 6d 70 20 49 73 20 4e 6f 74 20 57 6f 72 6b     Pump Is Not Work
     187:	69 6e 67 20 31 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e     ing 1...........
	...

00000198 <_ZZ14Faults_HandlervE3__c_7>:
     198:	50 75 6d 70 20 49 73 20 4e 6f 74 20 57 6f 72 6b     Pump Is Not Work
     1a8:	69 6e 67 20 00                                      ing .

000001ad <_ZZ14Faults_HandlervE3__c_6>:
     1ad:	50 75 6d 70 20 44 72 79 20 52 75 6e 20 00           Pump Dry Run .

000001bb <_ZZ14Faults_HandlervE3__c_5>:
     1bb:	50 75 6d 70 20 44 72 79 20 52 75 6e 20 00           Pump Dry Run .

000001c9 <_ZZ14Faults_HandlervE3__c_4>:
     1c9:	50 75 6d 70 20 4f 76 65 72 6c 61 6f 64 65 64 00     Pump Overlaoded.

000001d9 <_ZZ14Faults_HandlervE3__c_3>:
     1d9:	50 75 6d 70 20 4f 76 65 72 6c 61 6f 64 65 64 20     Pump Overlaoded 
	...

000001ea <_ZZ14Faults_HandlervE3__c_2>:
     1ea:	20 43 61 6c 69 62 61 72 74 69 6f 6e 20 73 74 61      Calibartion sta
     1fa:	74 75 73 20 00                                      tus .

000001ff <_ZZ14Faults_HandlervE3__c_1>:
     1ff:	20 46 61 75 6c 74 20 43 6f 75 6e 74 65 72 20 00      Fault Counter .

0000020f <_ZZ14Faults_HandlervE3__c_0>:
     20f:	20 50 75 6d 70 20 4e 6f 6d 69 6e 61 6c 20 43 75      Pump Nominal Cu
     21f:	72 72 65 6e 74 20 00                                rrent .

00000226 <_ZZ14Faults_HandlervE3__c>:
     226:	50 75 6d 70 20 52 75 6e 20 43 75 72 72 65 6e 74     Pump Run Current
     236:	20 00                                                .

00000238 <_ZZ19Initialise_HardwarevE3__c_1>:
     238:	73 65 74 20 75 70 20 66 69 6e 69 73 68 65 64 00     set up finished.

00000248 <_ZZ19Initialise_HardwarevE3__c_0>:
     248:	49 64 3a 20 00                                      Id: .

0000024d <_ZZ19Initialise_HardwarevE3__c>:
     24d:	53 54 41 52 54 00                                   START.

00000253 <_ZZ8Int_LoravE3__c_3>:
     253:	53 70 72 65 61 64 69 6e 67 20 66 61 63 74 6f 72     Spreading factor
     263:	20 69 73 20 3a 20 00                                 is : .

0000026a <_ZZ8Int_LoravE3__c_2>:
     26a:	4c 6f 72 61 20 54 78 20 70 6f 77 65 72 20 69 73     Lora Tx power is
     27a:	20 3a 20 00                                          : .

0000027e <_ZZ8Int_LoravE3__c_1>:
     27e:	63 6f 6e 66 69 67 20 66 61 69 6c 65 64 00           config failed.

0000028c <_ZZ8Int_LoravE3__c_0>:
     28c:	73 65 74 20 66 72 65 71 75 65 6e 63 79 20 66 61     set frequency fa
     29c:	69 6c 65 64 21 00                                   iled!.

000002a2 <_ZZ8Int_LoravE3__c>:
     2a2:	69 6e 69 74 20 66 61 69 6c 65 64 21 00              init failed!.

000002af <_ZZ21Transmit_Fault_PacketcE3__c_4>:
     2af:	61 63 6b 20 69 73 3a 20 00                          ack is: .

000002b8 <_ZZ21Transmit_Fault_PacketcE3__c_3>:
     2b8:	72 66 39 35 2e 77 61 69 74 50 61 63 6b 65 74 53     rf95.waitPacketS
     2c8:	65 6e 74 28 29 20 31 00                             ent() 1.

000002d0 <_ZZ21Transmit_Fault_PacketcE3__c_2>:
     2d0:	72 66 39 35 2e 61 76 61 69 6c 61 62 6c 65 28 29     rf95.available()
     2e0:	20 31 00                                             1.

000002e3 <_ZZ21Transmit_Fault_PacketcE3__c_1>:
     2e3:	61 63 6b 20 69 73 3a 20 00                          ack is: .

000002ec <_ZZ21Transmit_Fault_PacketcE3__c_0>:
     2ec:	72 66 39 35 2e 77 61 69 74 50 61 63 6b 65 74 53     rf95.waitPacketS
     2fc:	65 6e 74 28 29 20 32 00                             ent() 2.

00000304 <_ZZ21Transmit_Fault_PacketcE3__c>:
     304:	72 66 39 35 2e 61 76 61 69 6c 61 62 6c 65 28 29     rf95.available()
     314:	20 32 00                                             2.

00000317 <_ZZ20Read_Recieved_PacketvE3__c_6>:
     317:	73 65 6e 64 20 62 61 63 6b 20 32 00                 send back 2.

00000323 <_ZZ20Read_Recieved_PacketvE3__c_5>:
     323:	73 65 6e 64 20 62 61 63 6b 20 31 00                 send back 1.

0000032f <_ZZ20Read_Recieved_PacketvE3__c_4>:
     32f:	70 75 6d 70 20 69 73 20 6f 66 66 00                 pump is off.

0000033b <_ZZ20Read_Recieved_PacketvE3__c_3>:
     33b:	52 65 71 75 65 73 74 20 74 6f 20 74 75 72 6e 20     Request to turn 
     34b:	4f 46 46 20 50 55 4d 50 3a 20 00                    OFF PUMP: .

00000356 <_ZZ20Read_Recieved_PacketvE3__c_2>:
     356:	70 75 6d 70 20 69 73 20 4f 4e 00                    pump is ON.

00000361 <_ZZ20Read_Recieved_PacketvE3__c_1>:
     361:	52 65 71 75 65 73 74 20 74 6f 20 74 75 72 6e 20     Request to turn 
     371:	4f 4e 20 50 55 4d 50 3a 20 00                       ON PUMP: .

0000037b <_ZZ20Read_Recieved_PacketvE3__c_0>:
     37b:	43 61 6c 69 62 72 61 74 69 6f 6e 20 6f 66 20 50     Calibration of P
     38b:	55 4d 50 3a 20 00                                   UMP: .

00000391 <_ZZ20Read_Recieved_PacketvE3__c>:
     391:	50 61 63 6b 65 74 20 61 76 61 69 6c 61 62 6c 65     Packet available
     3a1:	2e 2e 2e 00                                         ....

000003a5 <_ZZ19Pump_Off_For_FaultshE3__c>:
     3a5:	20 50 75 6d 70 20 46 61 75 6c 74 20 4f 63 63 75      Pump Fault Occu
     3b5:	72 65 20 00                                         re .

000003b9 <digital_pin_to_timer_PGM>:
     3b9:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     3c9:	00 00 00 00                                         ....

000003cd <digital_pin_to_bit_mask_PGM>:
     3cd:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     3dd:	04 08 10 20                                         ... 

000003e1 <digital_pin_to_port_PGM>:
     3e1:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     3f1:	03 03 03 03                                         ....

000003f5 <port_to_input_PGM>:
     3f5:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000003ff <port_to_output_PGM>:
     3ff:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000409 <port_to_mode_PGM>:
     409:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000413 <_ZL18MODEM_CONFIG_TABLE>:
     413:	72 74 04 92 74 04 48 94 04 78 c4 0c 72 b4 04        rt..t.H..x..r..

00000422 <__ctors_start>:
     422:	67 0b       	sbc	r22, r23
     424:	7c 0f       	add	r23, r28
     426:	b0 15       	cp	r27, r0
     428:	02 1d       	adc	r16, r2

0000042a <__ctors_end>:
     42a:	11 24       	eor	r1, r1
     42c:	1f be       	out	0x3f, r1	; 63
     42e:	cf ef       	ldi	r28, 0xFF	; 255
     430:	d8 e0       	ldi	r29, 0x08	; 8
     432:	de bf       	out	0x3e, r29	; 62
     434:	cd bf       	out	0x3d, r28	; 61

00000436 <__do_copy_data>:
     436:	13 e0       	ldi	r17, 0x03	; 3
     438:	a0 e0       	ldi	r26, 0x00	; 0
     43a:	b1 e0       	ldi	r27, 0x01	; 1
     43c:	e2 e9       	ldi	r30, 0x92	; 146
     43e:	fd e4       	ldi	r31, 0x4D	; 77
     440:	02 c0       	rjmp	.+4      	; 0x446 <__do_copy_data+0x10>
     442:	05 90       	lpm	r0, Z+
     444:	0d 92       	st	X+, r0
     446:	a6 30       	cpi	r26, 0x06	; 6
     448:	b1 07       	cpc	r27, r17
     44a:	d9 f7       	brne	.-10     	; 0x442 <__do_copy_data+0xc>

0000044c <__do_clear_bss>:
     44c:	27 e0       	ldi	r18, 0x07	; 7
     44e:	a6 e0       	ldi	r26, 0x06	; 6
     450:	b3 e0       	ldi	r27, 0x03	; 3
     452:	01 c0       	rjmp	.+2      	; 0x456 <.do_clear_bss_start>

00000454 <.do_clear_bss_loop>:
     454:	1d 92       	st	X+, r1

00000456 <.do_clear_bss_start>:
     456:	ad 37       	cpi	r26, 0x7D	; 125
     458:	b2 07       	cpc	r27, r18
     45a:	e1 f7       	brne	.-8      	; 0x454 <.do_clear_bss_loop>

0000045c <__do_global_ctors>:
     45c:	12 e0       	ldi	r17, 0x02	; 2
     45e:	c5 e1       	ldi	r28, 0x15	; 21
     460:	d2 e0       	ldi	r29, 0x02	; 2
     462:	04 c0       	rjmp	.+8      	; 0x46c <__do_global_ctors+0x10>
     464:	21 97       	sbiw	r28, 0x01	; 1
     466:	fe 01       	movw	r30, r28
     468:	0e 94 b3 24 	call	0x4966	; 0x4966 <__tablejump2__>
     46c:	c1 31       	cpi	r28, 0x11	; 17
     46e:	d1 07       	cpc	r29, r17
     470:	c9 f7       	brne	.-14     	; 0x464 <__do_global_ctors+0x8>
     472:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <main>
     476:	0c 94 c7 26 	jmp	0x4d8e	; 0x4d8e <_exit>

0000047a <__bad_interrupt>:
     47a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000047e <__vector_23>:
     47e:	1f 92       	push	r1
     480:	0f 92       	push	r0
     482:	0f b6       	in	r0, 0x3f	; 63
     484:	0f 92       	push	r0
     486:	11 24       	eor	r1, r1
     488:	2f 93       	push	r18
     48a:	3f 93       	push	r19
     48c:	4f 93       	push	r20
     48e:	5f 93       	push	r21
     490:	6f 93       	push	r22
     492:	7f 93       	push	r23
     494:	8f 93       	push	r24
     496:	9f 93       	push	r25
     498:	af 93       	push	r26
     49a:	bf 93       	push	r27
     49c:	ef 93       	push	r30
     49e:	ff 93       	push	r31
     4a0:	e0 91 06 03 	lds	r30, 0x0306	; 0x800306 <__data_end>
     4a4:	f0 91 07 03 	lds	r31, 0x0307	; 0x800307 <__data_end+0x1>
     4a8:	09 95       	icall
     4aa:	ff 91       	pop	r31
     4ac:	ef 91       	pop	r30
     4ae:	bf 91       	pop	r27
     4b0:	af 91       	pop	r26
     4b2:	9f 91       	pop	r25
     4b4:	8f 91       	pop	r24
     4b6:	7f 91       	pop	r23
     4b8:	6f 91       	pop	r22
     4ba:	5f 91       	pop	r21
     4bc:	4f 91       	pop	r20
     4be:	3f 91       	pop	r19
     4c0:	2f 91       	pop	r18
     4c2:	0f 90       	pop	r0
     4c4:	0f be       	out	0x3f, r0	; 63
     4c6:	0f 90       	pop	r0
     4c8:	1f 90       	pop	r1
     4ca:	18 95       	reti

000004cc <_ZN5EERef6updateEh>:
     4cc:	ff 92       	push	r15
     4ce:	0f 93       	push	r16
     4d0:	1f 93       	push	r17
     4d2:	cf 93       	push	r28
     4d4:	df 93       	push	r29
     4d6:	ec 01       	movw	r28, r24
     4d8:	f6 2e       	mov	r15, r22
     4da:	08 81       	ld	r16, Y
     4dc:	19 81       	ldd	r17, Y+1	; 0x01
     4de:	c8 01       	movw	r24, r16
     4e0:	0e 94 a9 26 	call	0x4d52	; 0x4d52 <eeprom_read_byte>
     4e4:	f8 16       	cp	r15, r24
     4e6:	21 f0       	breq	.+8      	; 0x4f0 <_ZN5EERef6updateEh+0x24>
     4e8:	6f 2d       	mov	r22, r15
     4ea:	c8 01       	movw	r24, r16
     4ec:	0e 94 b1 26 	call	0x4d62	; 0x4d62 <eeprom_write_byte>
     4f0:	ce 01       	movw	r24, r28
     4f2:	df 91       	pop	r29
     4f4:	cf 91       	pop	r28
     4f6:	1f 91       	pop	r17
     4f8:	0f 91       	pop	r16
     4fa:	ff 90       	pop	r15
     4fc:	08 95       	ret

000004fe <_Z19Calibration_Of_Pumpv>:
     4fe:	2f 92       	push	r2
     500:	3f 92       	push	r3
     502:	4f 92       	push	r4
     504:	5f 92       	push	r5
     506:	6f 92       	push	r6
     508:	7f 92       	push	r7
     50a:	8f 92       	push	r8
     50c:	9f 92       	push	r9
     50e:	af 92       	push	r10
     510:	bf 92       	push	r11
     512:	cf 92       	push	r12
     514:	df 92       	push	r13
     516:	ef 92       	push	r14
     518:	ff 92       	push	r15
     51a:	0f 93       	push	r16
     51c:	1f 93       	push	r17
     51e:	cf 93       	push	r28
     520:	df 93       	push	r29
     522:	cd b7       	in	r28, 0x3d	; 61
     524:	de b7       	in	r29, 0x3e	; 62
     526:	6a 97       	sbiw	r28, 0x1a	; 26
     528:	0f b6       	in	r0, 0x3f	; 63
     52a:	f8 94       	cli
     52c:	de bf       	out	0x3e, r29	; 62
     52e:	0f be       	out	0x3f, r0	; 63
     530:	cd bf       	out	0x3d, r28	; 61
     532:	80 91 4f 05 	lds	r24, 0x054F	; 0x80054f <_sWireless_Pump_Data+0x14>
     536:	80 ff       	sbrs	r24, 0
     538:	cc c0       	rjmp	.+408    	; 0x6d2 <_Z19Calibration_Of_Pumpv+0x1d4>
     53a:	91 e0       	ldi	r25, 0x01	; 1
     53c:	90 93 70 05 	sts	0x0570, r25	; 0x800570 <Reading_Ct_Flag>
     540:	8e 7f       	andi	r24, 0xFE	; 254
     542:	80 93 4f 05 	sts	0x054F, r24	; 0x80054f <_sWireless_Pump_Data+0x14>
     546:	0e 94 a0 18 	call	0x3140	; 0x3140 <millis>
     54a:	6f 8b       	std	Y+23, r22	; 0x17
     54c:	78 8f       	std	Y+24, r23	; 0x18
     54e:	89 8f       	std	Y+25, r24	; 0x19
     550:	9a 8f       	std	Y+26, r25	; 0x1a
     552:	1e 01       	movw	r2, r28
     554:	25 e1       	ldi	r18, 0x15	; 21
     556:	22 0e       	add	r2, r18
     558:	31 1c       	adc	r3, r1
     55a:	ae 01       	movw	r20, r28
     55c:	4f 5f       	subi	r20, 0xFF	; 255
     55e:	5f 4f       	sbci	r21, 0xFF	; 255
     560:	6a 01       	movw	r12, r20
     562:	8a 01       	movw	r16, r20
     564:	68 ec       	ldi	r22, 0xC8	; 200
     566:	75 e0       	ldi	r23, 0x05	; 5
     568:	85 ed       	ldi	r24, 0xD5	; 213
     56a:	94 e0       	ldi	r25, 0x04	; 4
     56c:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <_ZN13EnergyMonitor8calcIrmsEj>
     570:	f8 01       	movw	r30, r16
     572:	61 93       	st	Z+, r22
     574:	71 93       	st	Z+, r23
     576:	81 93       	st	Z+, r24
     578:	91 93       	st	Z+, r25
     57a:	8f 01       	movw	r16, r30
     57c:	2e 16       	cp	r2, r30
     57e:	3f 06       	cpc	r3, r31
     580:	89 f7       	brne	.-30     	; 0x564 <_Z19Calibration_Of_Pumpv+0x66>
     582:	00 e0       	ldi	r16, 0x00	; 0
     584:	0f 5f       	subi	r16, 0xFF	; 255
     586:	10 2f       	mov	r17, r16
     588:	15 30       	cpi	r17, 0x05	; 5
     58a:	31 f4       	brne	.+12     	; 0x598 <_Z19Calibration_Of_Pumpv+0x9a>
     58c:	f4 e0       	ldi	r31, 0x04	; 4
     58e:	cf 0e       	add	r12, r31
     590:	d1 1c       	adc	r13, r1
     592:	05 30       	cpi	r16, 0x05	; 5
     594:	b9 f7       	brne	.-18     	; 0x584 <_Z19Calibration_Of_Pumpv+0x86>
     596:	28 c0       	rjmp	.+80     	; 0x5e8 <_Z19Calibration_Of_Pumpv+0xea>
     598:	f6 01       	movw	r30, r12
     59a:	80 80       	ld	r8, Z
     59c:	91 80       	ldd	r9, Z+1	; 0x01
     59e:	a2 80       	ldd	r10, Z+2	; 0x02
     5a0:	b3 80       	ldd	r11, Z+3	; 0x03
     5a2:	ee 24       	eor	r14, r14
     5a4:	e3 94       	inc	r14
     5a6:	f1 2c       	mov	r15, r1
     5a8:	ec 0e       	add	r14, r28
     5aa:	fd 1e       	adc	r15, r29
     5ac:	f4 e0       	ldi	r31, 0x04	; 4
     5ae:	1f 9f       	mul	r17, r31
     5b0:	e0 0c       	add	r14, r0
     5b2:	f1 1c       	adc	r15, r1
     5b4:	11 24       	eor	r1, r1
     5b6:	f7 01       	movw	r30, r14
     5b8:	40 80       	ld	r4, Z
     5ba:	51 80       	ldd	r5, Z+1	; 0x01
     5bc:	62 80       	ldd	r6, Z+2	; 0x02
     5be:	73 80       	ldd	r7, Z+3	; 0x03
     5c0:	a3 01       	movw	r20, r6
     5c2:	92 01       	movw	r18, r4
     5c4:	c5 01       	movw	r24, r10
     5c6:	b4 01       	movw	r22, r8
     5c8:	0e 94 ce 11 	call	0x239c	; 0x239c <__gesf2>
     5cc:	18 16       	cp	r1, r24
     5ce:	54 f4       	brge	.+20     	; 0x5e4 <_Z19Calibration_Of_Pumpv+0xe6>
     5d0:	f6 01       	movw	r30, r12
     5d2:	40 82       	st	Z, r4
     5d4:	51 82       	std	Z+1, r5	; 0x01
     5d6:	62 82       	std	Z+2, r6	; 0x02
     5d8:	73 82       	std	Z+3, r7	; 0x03
     5da:	f7 01       	movw	r30, r14
     5dc:	80 82       	st	Z, r8
     5de:	91 82       	std	Z+1, r9	; 0x01
     5e0:	a2 82       	std	Z+2, r10	; 0x02
     5e2:	b3 82       	std	Z+3, r11	; 0x03
     5e4:	1f 5f       	subi	r17, 0xFF	; 255
     5e6:	d0 cf       	rjmp	.-96     	; 0x588 <_Z19Calibration_Of_Pumpv+0x8a>
     5e8:	69 85       	ldd	r22, Y+9	; 0x09
     5ea:	7a 85       	ldd	r23, Y+10	; 0x0a
     5ec:	8b 85       	ldd	r24, Y+11	; 0x0b
     5ee:	9c 85       	ldd	r25, Y+12	; 0x0c
     5f0:	60 93 35 05 	sts	0x0535, r22	; 0x800535 <_sPump_Parameter+0x4>
     5f4:	70 93 36 05 	sts	0x0536, r23	; 0x800536 <_sPump_Parameter+0x5>
     5f8:	80 93 37 05 	sts	0x0537, r24	; 0x800537 <_sPump_Parameter+0x6>
     5fc:	90 93 38 05 	sts	0x0538, r25	; 0x800538 <_sPump_Parameter+0x7>
     600:	20 e0       	ldi	r18, 0x00	; 0
     602:	30 e0       	ldi	r19, 0x00	; 0
     604:	40 e0       	ldi	r20, 0x00	; 0
     606:	50 e4       	ldi	r21, 0x40	; 64
     608:	0e 94 ce 11 	call	0x239c	; 0x239c <__gesf2>
     60c:	18 16       	cp	r1, r24
     60e:	64 f5       	brge	.+88     	; 0x668 <_Z19Calibration_Of_Pumpv+0x16a>
     610:	95 e3       	ldi	r25, 0x35	; 53
     612:	e9 2e       	mov	r14, r25
     614:	95 e0       	ldi	r25, 0x05	; 5
     616:	f9 2e       	mov	r15, r25
     618:	01 e0       	ldi	r16, 0x01	; 1
     61a:	10 e0       	ldi	r17, 0x00	; 0
     61c:	f7 01       	movw	r30, r14
     61e:	61 91       	ld	r22, Z+
     620:	7f 01       	movw	r14, r30
     622:	1e 8b       	std	Y+22, r17	; 0x16
     624:	0d 8b       	std	Y+21, r16	; 0x15
     626:	c1 01       	movw	r24, r2
     628:	0e 94 66 02 	call	0x4cc	; 0x4cc <_ZN5EERef6updateEh>
     62c:	0f 5f       	subi	r16, 0xFF	; 255
     62e:	1f 4f       	sbci	r17, 0xFF	; 255
     630:	05 30       	cpi	r16, 0x05	; 5
     632:	11 05       	cpc	r17, r1
     634:	99 f7       	brne	.-26     	; 0x61c <_Z19Calibration_Of_Pumpv+0x11e>
     636:	81 e3       	ldi	r24, 0x31	; 49
     638:	e8 2e       	mov	r14, r24
     63a:	85 e0       	ldi	r24, 0x05	; 5
     63c:	f8 2e       	mov	r15, r24
     63e:	01 e0       	ldi	r16, 0x01	; 1
     640:	10 e0       	ldi	r17, 0x00	; 0
     642:	c8 01       	movw	r24, r16
     644:	0e 94 a9 26 	call	0x4d52	; 0x4d52 <eeprom_read_byte>
     648:	f7 01       	movw	r30, r14
     64a:	81 93       	st	Z+, r24
     64c:	7f 01       	movw	r14, r30
     64e:	0f 5f       	subi	r16, 0xFF	; 255
     650:	1f 4f       	sbci	r17, 0xFF	; 255
     652:	05 30       	cpi	r16, 0x05	; 5
     654:	11 05       	cpc	r17, r1
     656:	a9 f7       	brne	.-22     	; 0x642 <_Z19Calibration_Of_Pumpv+0x144>
     658:	63 e0       	ldi	r22, 0x03	; 3
     65a:	71 e0       	ldi	r23, 0x01	; 1
     65c:	81 ec       	ldi	r24, 0xC1	; 193
     65e:	96 e0       	ldi	r25, 0x06	; 6
     660:	0e 94 5d 16 	call	0x2cba	; 0x2cba <_ZN5Print7printlnEPK19__FlashStringHelper>
     664:	81 e0       	ldi	r24, 0x01	; 1
     666:	13 c0       	rjmp	.+38     	; 0x68e <_Z19Calibration_Of_Pumpv+0x190>
     668:	0e 94 a0 18 	call	0x3140	; 0x3140 <millis>
     66c:	dc 01       	movw	r26, r24
     66e:	cb 01       	movw	r24, r22
     670:	2f 89       	ldd	r18, Y+23	; 0x17
     672:	38 8d       	ldd	r19, Y+24	; 0x18
     674:	49 8d       	ldd	r20, Y+25	; 0x19
     676:	5a 8d       	ldd	r21, Y+26	; 0x1a
     678:	82 1b       	sub	r24, r18
     67a:	93 0b       	sbc	r25, r19
     67c:	a4 0b       	sbc	r26, r20
     67e:	b5 0b       	sbc	r27, r21
     680:	88 35       	cpi	r24, 0x58	; 88
     682:	9b 41       	sbci	r25, 0x1B	; 27
     684:	a1 05       	cpc	r26, r1
     686:	b1 05       	cpc	r27, r1
     688:	08 f4       	brcc	.+2      	; 0x68c <_Z19Calibration_Of_Pumpv+0x18e>
     68a:	67 cf       	rjmp	.-306    	; 0x55a <_Z19Calibration_Of_Pumpv+0x5c>
     68c:	80 e0       	ldi	r24, 0x00	; 0
     68e:	10 92 70 05 	sts	0x0570, r1	; 0x800570 <Reading_Ct_Flag>
     692:	88 23       	and	r24, r24
     694:	91 f0       	breq	.+36     	; 0x6ba <_Z19Calibration_Of_Pumpv+0x1bc>
     696:	81 e0       	ldi	r24, 0x01	; 1
     698:	80 93 5b 05 	sts	0x055B, r24	; 0x80055b <_sWireless_Pump_Data+0x20>
     69c:	82 e0       	ldi	r24, 0x02	; 2
     69e:	90 e0       	ldi	r25, 0x00	; 0
     6a0:	9e 8b       	std	Y+22, r25	; 0x16
     6a2:	8d 8b       	std	Y+21, r24	; 0x15
     6a4:	61 e0       	ldi	r22, 0x01	; 1
     6a6:	c1 01       	movw	r24, r2
     6a8:	0e 94 66 02 	call	0x4cc	; 0x4cc <_ZN5EERef6updateEh>
     6ac:	80 91 50 05 	lds	r24, 0x0550	; 0x800550 <_sWireless_Pump_Data+0x15>
     6b0:	8d 7f       	andi	r24, 0xFD	; 253
     6b2:	81 60       	ori	r24, 0x01	; 1
     6b4:	80 93 50 05 	sts	0x0550, r24	; 0x800550 <_sWireless_Pump_Data+0x15>
     6b8:	0c c0       	rjmp	.+24     	; 0x6d2 <_Z19Calibration_Of_Pumpv+0x1d4>
     6ba:	6a ee       	ldi	r22, 0xEA	; 234
     6bc:	70 e0       	ldi	r23, 0x00	; 0
     6be:	81 ec       	ldi	r24, 0xC1	; 193
     6c0:	96 e0       	ldi	r25, 0x06	; 6
     6c2:	0e 94 5d 16 	call	0x2cba	; 0x2cba <_ZN5Print7printlnEPK19__FlashStringHelper>
     6c6:	80 91 50 05 	lds	r24, 0x0550	; 0x800550 <_sWireless_Pump_Data+0x15>
     6ca:	8e 7f       	andi	r24, 0xFE	; 254
     6cc:	82 60       	ori	r24, 0x02	; 2
     6ce:	80 93 50 05 	sts	0x0550, r24	; 0x800550 <_sWireless_Pump_Data+0x15>
     6d2:	80 e0       	ldi	r24, 0x00	; 0
     6d4:	90 e0       	ldi	r25, 0x00	; 0
     6d6:	6a 96       	adiw	r28, 0x1a	; 26
     6d8:	0f b6       	in	r0, 0x3f	; 63
     6da:	f8 94       	cli
     6dc:	de bf       	out	0x3e, r29	; 62
     6de:	0f be       	out	0x3f, r0	; 63
     6e0:	cd bf       	out	0x3d, r28	; 61
     6e2:	df 91       	pop	r29
     6e4:	cf 91       	pop	r28
     6e6:	1f 91       	pop	r17
     6e8:	0f 91       	pop	r16
     6ea:	ff 90       	pop	r15
     6ec:	ef 90       	pop	r14
     6ee:	df 90       	pop	r13
     6f0:	cf 90       	pop	r12
     6f2:	bf 90       	pop	r11
     6f4:	af 90       	pop	r10
     6f6:	9f 90       	pop	r9
     6f8:	8f 90       	pop	r8
     6fa:	7f 90       	pop	r7
     6fc:	6f 90       	pop	r6
     6fe:	5f 90       	pop	r5
     700:	4f 90       	pop	r4
     702:	3f 90       	pop	r3
     704:	2f 90       	pop	r2
     706:	08 95       	ret

00000708 <_Z17Update_Indicationv>:
     708:	80 91 4b 05 	lds	r24, 0x054B	; 0x80054b <_sWireless_Pump_Data+0x10>
     70c:	80 ff       	sbrs	r24, 0
     70e:	05 c0       	rjmp	.+10     	; 0x71a <_Z17Update_Indicationv+0x12>
     710:	60 e0       	ldi	r22, 0x00	; 0
     712:	81 e1       	ldi	r24, 0x11	; 17
     714:	0e 94 cd 19 	call	0x339a	; 0x339a <digitalWrite>
     718:	04 c0       	rjmp	.+8      	; 0x722 <_Z17Update_Indicationv+0x1a>
     71a:	61 e0       	ldi	r22, 0x01	; 1
     71c:	81 e1       	ldi	r24, 0x11	; 17
     71e:	0e 94 cd 19 	call	0x339a	; 0x339a <digitalWrite>
     722:	80 91 4b 05 	lds	r24, 0x054B	; 0x80054b <_sWireless_Pump_Data+0x10>
     726:	81 ff       	sbrs	r24, 1
     728:	05 c0       	rjmp	.+10     	; 0x734 <_Z17Update_Indicationv+0x2c>
     72a:	60 e0       	ldi	r22, 0x00	; 0
     72c:	82 e1       	ldi	r24, 0x12	; 18
     72e:	0e 94 cd 19 	call	0x339a	; 0x339a <digitalWrite>
     732:	04 c0       	rjmp	.+8      	; 0x73c <_Z17Update_Indicationv+0x34>
     734:	61 e0       	ldi	r22, 0x01	; 1
     736:	82 e1       	ldi	r24, 0x12	; 18
     738:	0e 94 cd 19 	call	0x339a	; 0x339a <digitalWrite>
     73c:	80 91 4b 05 	lds	r24, 0x054B	; 0x80054b <_sWireless_Pump_Data+0x10>
     740:	82 ff       	sbrs	r24, 2
     742:	05 c0       	rjmp	.+10     	; 0x74e <_Z17Update_Indicationv+0x46>
     744:	60 e0       	ldi	r22, 0x00	; 0
     746:	83 e1       	ldi	r24, 0x13	; 19
     748:	0e 94 cd 19 	call	0x339a	; 0x339a <digitalWrite>
     74c:	04 c0       	rjmp	.+8      	; 0x756 <_Z17Update_Indicationv+0x4e>
     74e:	61 e0       	ldi	r22, 0x01	; 1
     750:	83 e1       	ldi	r24, 0x13	; 19
     752:	0e 94 cd 19 	call	0x339a	; 0x339a <digitalWrite>
     756:	80 91 4b 05 	lds	r24, 0x054B	; 0x80054b <_sWireless_Pump_Data+0x10>
     75a:	90 91 4c 05 	lds	r25, 0x054C	; 0x80054c <_sWireless_Pump_Data+0x11>
     75e:	9c 01       	movw	r18, r24
     760:	28 73       	andi	r18, 0x38	; 56
     762:	32 70       	andi	r19, 0x02	; 2
     764:	23 2b       	or	r18, r19
     766:	41 f4       	brne	.+16     	; 0x778 <_Z17Update_Indicationv+0x70>
     768:	9c 01       	movw	r18, r24
     76a:	23 70       	andi	r18, 0x03	; 3
     76c:	33 27       	eor	r19, r19
     76e:	23 30       	cpi	r18, 0x03	; 3
     770:	31 05       	cpc	r19, r1
     772:	11 f4       	brne	.+4      	; 0x778 <_Z17Update_Indicationv+0x70>
     774:	82 fd       	sbrc	r24, 2
     776:	05 c0       	rjmp	.+10     	; 0x782 <_Z17Update_Indicationv+0x7a>
     778:	60 e0       	ldi	r22, 0x00	; 0
     77a:	83 e0       	ldi	r24, 0x03	; 3
     77c:	0e 94 cd 19 	call	0x339a	; 0x339a <digitalWrite>
     780:	04 c0       	rjmp	.+8      	; 0x78a <_Z17Update_Indicationv+0x82>
     782:	61 e0       	ldi	r22, 0x01	; 1
     784:	83 e0       	ldi	r24, 0x03	; 3
     786:	0e 94 cd 19 	call	0x339a	; 0x339a <digitalWrite>
     78a:	80 91 4b 05 	lds	r24, 0x054B	; 0x80054b <_sWireless_Pump_Data+0x10>
     78e:	90 91 4c 05 	lds	r25, 0x054C	; 0x80054c <_sWireless_Pump_Data+0x11>
     792:	9c 01       	movw	r18, r24
     794:	23 70       	andi	r18, 0x03	; 3
     796:	33 27       	eor	r19, r19
     798:	23 30       	cpi	r18, 0x03	; 3
     79a:	31 05       	cpc	r19, r1
     79c:	31 f4       	brne	.+12     	; 0x7aa <_Z17Update_Indicationv+0xa2>
     79e:	82 ff       	sbrs	r24, 2
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <_Z17Update_Indicationv+0xa2>
     7a2:	60 e0       	ldi	r22, 0x00	; 0
     7a4:	87 e0       	ldi	r24, 0x07	; 7
     7a6:	0c 94 cd 19 	jmp	0x339a	; 0x339a <digitalWrite>
     7aa:	61 e0       	ldi	r22, 0x01	; 1
     7ac:	87 e0       	ldi	r24, 0x07	; 7
     7ae:	0c 94 cd 19 	jmp	0x339a	; 0x339a <digitalWrite>

000007b2 <_Z17Auto_Manual_Checkv>:
     7b2:	84 e0       	ldi	r24, 0x04	; 4
     7b4:	0e 94 fc 19 	call	0x33f8	; 0x33f8 <digitalRead>
     7b8:	21 e0       	ldi	r18, 0x01	; 1
     7ba:	89 2b       	or	r24, r25
     7bc:	09 f4       	brne	.+2      	; 0x7c0 <_Z17Auto_Manual_Checkv+0xe>
     7be:	20 e0       	ldi	r18, 0x00	; 0
     7c0:	82 2f       	mov	r24, r18
     7c2:	08 95       	ret

000007c4 <_Z14Faults_Handlerv>:
     7c4:	8f 92       	push	r8
     7c6:	9f 92       	push	r9
     7c8:	af 92       	push	r10
     7ca:	bf 92       	push	r11
     7cc:	cf 92       	push	r12
     7ce:	df 92       	push	r13
     7d0:	ef 92       	push	r14
     7d2:	ff 92       	push	r15
     7d4:	cf 93       	push	r28
     7d6:	df 93       	push	r29
     7d8:	80 91 71 05 	lds	r24, 0x0571	; 0x800571 <_gMonitor_Controller_Response>
     7dc:	90 91 72 05 	lds	r25, 0x0572	; 0x800572 <_gMonitor_Controller_Response+0x1>
     7e0:	8d 32       	cpi	r24, 0x2D	; 45
     7e2:	91 40       	sbci	r25, 0x01	; 1
     7e4:	38 f0       	brcs	.+14     	; 0x7f4 <_Z14Faults_Handlerv+0x30>
     7e6:	10 92 72 05 	sts	0x0572, r1	; 0x800572 <_gMonitor_Controller_Response+0x1>
     7ea:	10 92 71 05 	sts	0x0571, r1	; 0x800571 <_gMonitor_Controller_Response>
     7ee:	81 e0       	ldi	r24, 0x01	; 1
     7f0:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <_Z8Pump_Offh>
     7f4:	80 91 4d 05 	lds	r24, 0x054D	; 0x80054d <_sWireless_Pump_Data+0x12>
     7f8:	90 91 4e 05 	lds	r25, 0x054E	; 0x80054e <_sWireless_Pump_Data+0x13>
     7fc:	89 2b       	or	r24, r25
     7fe:	09 f4       	brne	.+2      	; 0x802 <__DATA_REGION_LENGTH__+0x2>
     800:	79 c0       	rjmp	.+242    	; 0x8f4 <__DATA_REGION_LENGTH__+0xf4>
     802:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <_ZZ14Faults_HandlervE12fault_occure>
     806:	90 91 0e 03 	lds	r25, 0x030E	; 0x80030e <_ZZ14Faults_HandlervE12fault_occure+0x1>
     80a:	a0 91 0f 03 	lds	r26, 0x030F	; 0x80030f <_ZZ14Faults_HandlervE12fault_occure+0x2>
     80e:	b0 91 10 03 	lds	r27, 0x0310	; 0x800310 <_ZZ14Faults_HandlervE12fault_occure+0x3>
     812:	89 2b       	or	r24, r25
     814:	8a 2b       	or	r24, r26
     816:	8b 2b       	or	r24, r27
     818:	71 f0       	breq	.+28     	; 0x836 <__DATA_REGION_LENGTH__+0x36>
     81a:	10 92 0d 03 	sts	0x030D, r1	; 0x80030d <_ZZ14Faults_HandlervE12fault_occure>
     81e:	10 92 0e 03 	sts	0x030E, r1	; 0x80030e <_ZZ14Faults_HandlervE12fault_occure+0x1>
     822:	10 92 0f 03 	sts	0x030F, r1	; 0x80030f <_ZZ14Faults_HandlervE12fault_occure+0x2>
     826:	10 92 10 03 	sts	0x0310, r1	; 0x800310 <_ZZ14Faults_HandlervE12fault_occure+0x3>
     82a:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <_ZZ14Faults_HandlervE18faults_check_timer>
     82e:	8f 5f       	subi	r24, 0xFF	; 255
     830:	80 93 0c 03 	sts	0x030C, r24	; 0x80030c <_ZZ14Faults_HandlervE18faults_check_timer>
     834:	02 c0       	rjmp	.+4      	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
     836:	10 92 0c 03 	sts	0x030C, r1	; 0x80030c <_ZZ14Faults_HandlervE18faults_check_timer>
     83a:	81 e0       	ldi	r24, 0x01	; 1
     83c:	80 93 70 05 	sts	0x0570, r24	; 0x800570 <Reading_Ct_Flag>
     840:	10 92 4e 05 	sts	0x054E, r1	; 0x80054e <_sWireless_Pump_Data+0x13>
     844:	10 92 4d 05 	sts	0x054D, r1	; 0x80054d <_sWireless_Pump_Data+0x12>
     848:	68 ec       	ldi	r22, 0xC8	; 200
     84a:	75 e0       	ldi	r23, 0x05	; 5
     84c:	85 ed       	ldi	r24, 0xD5	; 213
     84e:	94 e0       	ldi	r25, 0x04	; 4
     850:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <_ZN13EnergyMonitor8calcIrmsEj>
     854:	60 93 35 05 	sts	0x0535, r22	; 0x800535 <_sPump_Parameter+0x4>
     858:	70 93 36 05 	sts	0x0536, r23	; 0x800536 <_sPump_Parameter+0x5>
     85c:	80 93 37 05 	sts	0x0537, r24	; 0x800537 <_sPump_Parameter+0x6>
     860:	90 93 38 05 	sts	0x0538, r25	; 0x800538 <_sPump_Parameter+0x7>
     864:	10 92 70 05 	sts	0x0570, r1	; 0x800570 <Reading_Ct_Flag>
     868:	66 e2       	ldi	r22, 0x26	; 38
     86a:	72 e0       	ldi	r23, 0x02	; 2
     86c:	81 ec       	ldi	r24, 0xC1	; 193
     86e:	96 e0       	ldi	r25, 0x06	; 6
     870:	0e 94 5d 16 	call	0x2cba	; 0x2cba <_ZN5Print7printlnEPK19__FlashStringHelper>
     874:	40 91 35 05 	lds	r20, 0x0535	; 0x800535 <_sPump_Parameter+0x4>
     878:	50 91 36 05 	lds	r21, 0x0536	; 0x800536 <_sPump_Parameter+0x5>
     87c:	60 91 37 05 	lds	r22, 0x0537	; 0x800537 <_sPump_Parameter+0x6>
     880:	70 91 38 05 	lds	r23, 0x0538	; 0x800538 <_sPump_Parameter+0x7>
     884:	22 e0       	ldi	r18, 0x02	; 2
     886:	30 e0       	ldi	r19, 0x00	; 0
     888:	81 ec       	ldi	r24, 0xC1	; 193
     88a:	96 e0       	ldi	r25, 0x06	; 6
     88c:	0e 94 44 18 	call	0x3088	; 0x3088 <_ZN5Print7printlnEdi>
     890:	6f e0       	ldi	r22, 0x0F	; 15
     892:	72 e0       	ldi	r23, 0x02	; 2
     894:	81 ec       	ldi	r24, 0xC1	; 193
     896:	96 e0       	ldi	r25, 0x06	; 6
     898:	0e 94 5d 16 	call	0x2cba	; 0x2cba <_ZN5Print7printlnEPK19__FlashStringHelper>
     89c:	40 91 31 05 	lds	r20, 0x0531	; 0x800531 <_sPump_Parameter>
     8a0:	50 91 32 05 	lds	r21, 0x0532	; 0x800532 <_sPump_Parameter+0x1>
     8a4:	60 91 33 05 	lds	r22, 0x0533	; 0x800533 <_sPump_Parameter+0x2>
     8a8:	70 91 34 05 	lds	r23, 0x0534	; 0x800534 <_sPump_Parameter+0x3>
     8ac:	22 e0       	ldi	r18, 0x02	; 2
     8ae:	30 e0       	ldi	r19, 0x00	; 0
     8b0:	81 ec       	ldi	r24, 0xC1	; 193
     8b2:	96 e0       	ldi	r25, 0x06	; 6
     8b4:	0e 94 44 18 	call	0x3088	; 0x3088 <_ZN5Print7printlnEdi>
     8b8:	6f ef       	ldi	r22, 0xFF	; 255
     8ba:	71 e0       	ldi	r23, 0x01	; 1
     8bc:	81 ec       	ldi	r24, 0xC1	; 193
     8be:	96 e0       	ldi	r25, 0x06	; 6
     8c0:	0e 94 5d 16 	call	0x2cba	; 0x2cba <_ZN5Print7printlnEPK19__FlashStringHelper>
     8c4:	60 91 59 05 	lds	r22, 0x0559	; 0x800559 <_sWireless_Pump_Data+0x1e>
     8c8:	70 91 5a 05 	lds	r23, 0x055A	; 0x80055a <_sWireless_Pump_Data+0x1f>
     8cc:	4a e0       	ldi	r20, 0x0A	; 10
     8ce:	50 e0       	ldi	r21, 0x00	; 0
     8d0:	81 ec       	ldi	r24, 0xC1	; 193
     8d2:	96 e0       	ldi	r25, 0x06	; 6
     8d4:	0e 94 f6 16 	call	0x2dec	; 0x2dec <_ZN5Print7printlnEji>
     8d8:	6a ee       	ldi	r22, 0xEA	; 234
     8da:	71 e0       	ldi	r23, 0x01	; 1
     8dc:	81 ec       	ldi	r24, 0xC1	; 193
     8de:	96 e0       	ldi	r25, 0x06	; 6
     8e0:	0e 94 5d 16 	call	0x2cba	; 0x2cba <_ZN5Print7printlnEPK19__FlashStringHelper>
     8e4:	4a e0       	ldi	r20, 0x0A	; 10
     8e6:	50 e0       	ldi	r21, 0x00	; 0
     8e8:	60 91 5b 05 	lds	r22, 0x055B	; 0x80055b <_sWireless_Pump_Data+0x20>
     8ec:	81 ec       	ldi	r24, 0xC1	; 193
     8ee:	96 e0       	ldi	r25, 0x06	; 6
     8f0:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <_ZN5Print7printlnEhi>
     8f4:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <_Z17Auto_Manual_Checkv>
     8f8:	20 91 4b 05 	lds	r18, 0x054B	; 0x80054b <_sWireless_Pump_Data+0x10>
     8fc:	30 91 4c 05 	lds	r19, 0x054C	; 0x80054c <_sWireless_Pump_Data+0x11>
     900:	88 23       	and	r24, r24
     902:	49 f0       	breq	.+18     	; 0x916 <__stack+0x17>
     904:	81 30       	cpi	r24, 0x01	; 1
     906:	69 f4       	brne	.+26     	; 0x922 <__stack+0x23>
     908:	2f 77       	andi	r18, 0x7F	; 127
     90a:	31 60       	ori	r19, 0x01	; 1
     90c:	30 93 4c 05 	sts	0x054C, r19	; 0x80054c <_sWireless_Pump_Data+0x11>
     910:	20 93 4b 05 	sts	0x054B, r18	; 0x80054b <_sWireless_Pump_Data+0x10>
     914:	06 c0       	rjmp	.+12     	; 0x922 <__stack+0x23>
     916:	3e 7f       	andi	r19, 0xFE	; 254
     918:	20 68       	ori	r18, 0x80	; 128
     91a:	30 93 4c 05 	sts	0x054C, r19	; 0x80054c <_sWireless_Pump_Data+0x11>
     91e:	20 93 4b 05 	sts	0x054B, r18	; 0x80054b <_sWireless_Pump_Data+0x10>
     922:	c0 90 31 05 	lds	r12, 0x0531	; 0x800531 <_sPump_Parameter>
     926:	d0 90 32 05 	lds	r13, 0x0532	; 0x800532 <_sPump_Parameter+0x1>
     92a:	e0 90 33 05 	lds	r14, 0x0533	; 0x800533 <_sPump_Parameter+0x2>
     92e:	f0 90 34 05 	lds	r15, 0x0534	; 0x800534 <_sPump_Parameter+0x3>
     932:	20 e0       	ldi	r18, 0x00	; 0
     934:	30 e0       	ldi	r19, 0x00	; 0
     936:	48 ec       	ldi	r20, 0xC8	; 200
     938:	52 e4       	ldi	r21, 0x42	; 66
     93a:	c7 01       	movw	r24, r14
     93c:	b6 01       	movw	r22, r12
     93e:	0e 94 74 10 	call	0x20e8	; 0x20e8 <__divsf3>
     942:	20 e0       	ldi	r18, 0x00	; 0
     944:	30 e0       	ldi	r19, 0x00	; 0
     946:	40 e0       	ldi	r20, 0x00	; 0
     948:	52 e4       	ldi	r21, 0x42	; 66
     94a:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <__mulsf3>
     94e:	a7 01       	movw	r20, r14
     950:	96 01       	movw	r18, r12
     952:	0e 94 03 10 	call	0x2006	; 0x2006 <__addsf3>
     956:	9b 01       	movw	r18, r22
     958:	ac 01       	movw	r20, r24
     95a:	60 91 35 05 	lds	r22, 0x0535	; 0x800535 <_sPump_Parameter+0x4>
     95e:	70 91 36 05 	lds	r23, 0x0536	; 0x800536 <_sPump_Parameter+0x5>
     962:	80 91 37 05 	lds	r24, 0x0537	; 0x800537 <_sPump_Parameter+0x6>
     966:	90 91 38 05 	lds	r25, 0x0538	; 0x800538 <_sPump_Parameter+0x7>
     96a:	0e 94 ce 11 	call	0x239c	; 0x239c <__gesf2>
     96e:	20 91 4b 05 	lds	r18, 0x054B	; 0x80054b <_sWireless_Pump_Data+0x10>
     972:	30 91 4c 05 	lds	r19, 0x054C	; 0x80054c <_sWireless_Pump_Data+0x11>
     976:	18 16       	cp	r1, r24
     978:	ec f5       	brge	.+122    	; 0x9f4 <__stack+0xf5>
     97a:	80 91 59 05 	lds	r24, 0x0559	; 0x800559 <_sWireless_Pump_Data+0x1e>
     97e:	90 91 5a 05 	lds	r25, 0x055A	; 0x80055a <_sWireless_Pump_Data+0x1f>
     982:	89 37       	cpi	r24, 0x79	; 121
     984:	91 05       	cpc	r25, r1
     986:	b0 f1       	brcs	.+108    	; 0x9f4 <__stack+0xf5>
     988:	80 91 5b 05 	lds	r24, 0x055B	; 0x80055b <_sWireless_Pump_Data+0x20>
     98c:	81 30       	cpi	r24, 0x01	; 1
     98e:	91 f5       	brne	.+100    	; 0x9f4 <__stack+0xf5>
     990:	25 fd       	sbrc	r18, 5
     992:	4b c0       	rjmp	.+150    	; 0xa2a <__stack+0x12b>
     994:	80 e2       	ldi	r24, 0x20	; 32
     996:	90 e0       	ldi	r25, 0x00	; 0
     998:	a0 e0       	ldi	r26, 0x00	; 0
     99a:	b0 e0       	ldi	r27, 0x00	; 0
     99c:	80 93 0d 03 	sts	0x030D, r24	; 0x80030d <_ZZ14Faults_HandlervE12fault_occure>
     9a0:	90 93 0e 03 	sts	0x030E, r25	; 0x80030e <_ZZ14Faults_HandlervE12fault_occure+0x1>
     9a4:	a0 93 0f 03 	sts	0x030F, r26	; 0x80030f <_ZZ14Faults_HandlervE12fault_occure+0x2>
     9a8:	b0 93 10 03 	sts	0x0310, r27	; 0x800310 <_ZZ14Faults_HandlervE12fault_occure+0x3>
     9ac:	69 ed       	ldi	r22, 0xD9	; 217
     9ae:	71 e0       	ldi	r23, 0x01	; 1
     9b0:	81 ec       	ldi	r24, 0xC1	; 193
     9b2:	96 e0       	ldi	r25, 0x06	; 6
     9b4:	0e 94 5d 16 	call	0x2cba	; 0x2cba <_ZN5Print7printlnEPK19__FlashStringHelper>
     9b8:	4a e0       	ldi	r20, 0x0A	; 10
     9ba:	50 e0       	ldi	r21, 0x00	; 0
     9bc:	60 91 0c 03 	lds	r22, 0x030C	; 0x80030c <_ZZ14Faults_HandlervE18faults_check_timer>
     9c0:	81 ec       	ldi	r24, 0xC1	; 193
     9c2:	96 e0       	ldi	r25, 0x06	; 6
     9c4:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <_ZN5Print7printlnEhi>
     9c8:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <_ZZ14Faults_HandlervE18faults_check_timer>
     9cc:	84 30       	cpi	r24, 0x04	; 4
     9ce:	68 f1       	brcs	.+90     	; 0xa2a <__stack+0x12b>
     9d0:	80 91 4b 05 	lds	r24, 0x054B	; 0x80054b <_sWireless_Pump_Data+0x10>
     9d4:	90 91 4c 05 	lds	r25, 0x054C	; 0x80054c <_sWireless_Pump_Data+0x11>
     9d8:	80 62       	ori	r24, 0x20	; 32
     9da:	90 93 4c 05 	sts	0x054C, r25	; 0x80054c <_sWireless_Pump_Data+0x11>
     9de:	80 93 4b 05 	sts	0x054B, r24	; 0x80054b <_sWireless_Pump_Data+0x10>
     9e2:	10 92 0c 03 	sts	0x030C, r1	; 0x80030c <_ZZ14Faults_HandlervE18faults_check_timer>
     9e6:	69 ec       	ldi	r22, 0xC9	; 201
     9e8:	71 e0       	ldi	r23, 0x01	; 1
     9ea:	81 ec       	ldi	r24, 0xC1	; 193
     9ec:	96 e0       	ldi	r25, 0x06	; 6
     9ee:	0e 94 5d 16 	call	0x2cba	; 0x2cba <_ZN5Print7printlnEPK19__FlashStringHelper>
     9f2:	1b c0       	rjmp	.+54     	; 0xa2a <__stack+0x12b>
     9f4:	2f 7d       	andi	r18, 0xDF	; 223
     9f6:	30 93 4c 05 	sts	0x054C, r19	; 0x80054c <_sWireless_Pump_Data+0x11>
     9fa:	20 93 4b 05 	sts	0x054B, r18	; 0x80054b <_sWireless_Pump_Data+0x10>
     9fe:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <_ZZ14Faults_HandlervE12fault_occure>
     a02:	90 91 0e 03 	lds	r25, 0x030E	; 0x80030e <_ZZ14Faults_HandlervE12fault_occure+0x1>
     a06:	a0 91 0f 03 	lds	r26, 0x030F	; 0x80030f <_ZZ14Faults_HandlervE12fault_occure+0x2>
     a0a:	b0 91 10 03 	lds	r27, 0x0310	; 0x800310 <_ZZ14Faults_HandlervE12fault_occure+0x3>
     a0e:	80 97       	sbiw	r24, 0x20	; 32
     a10:	a1 05       	cpc	r26, r1
     a12:	b1 05       	cpc	r27, r1
     a14:	51 f4       	brne	.+20     	; 0xa2a <__stack+0x12b>
     a16:	10 92 0c 03 	sts	0x030C, r1	; 0x80030c <_ZZ14Faults_HandlervE18faults_check_timer>
     a1a:	10 92 0d 03 	sts	0x030D, r1	; 0x80030d <_ZZ14Faults_HandlervE12fault_occure>
     a1e:	10 92 0e 03 	sts	0x030E, r1	; 0x80030e <_ZZ14Faults_HandlervE12fault_occure+0x1>
     a22:	10 92 0f 03 	sts	0x030F, r1	; 0x80030f <_ZZ14Faults_HandlervE12fault_occure+0x2>
     a26:	10 92 10 03 	sts	0x0310, r1	; 0x800310 <_ZZ14Faults_HandlervE12fault_occure+0x3>
     a2a:	c0 90 35 05 	lds	r12, 0x0535	; 0x800535 <_sPump_Parameter+0x4>
     a2e:	d0 90 36 05 	lds	r13, 0x0536	; 0x800536 <_sPump_Parameter+0x5>
     a32:	e0 90 37 05 	lds	r14, 0x0537	; 0x800537 <_sPump_Parameter+0x6>
     a36:	f0 90 38 05 	lds	r15, 0x0538	; 0x800538 <_sPump_Parameter+0x7>
     a3a:	20 e0       	ldi	r18, 0x00	; 0
     a3c:	30 e0       	ldi	r19, 0x00	; 0
     a3e:	48 ec       	ldi	r20, 0xC8	; 200
     a40:	52 e4       	ldi	r21, 0x42	; 66
     a42:	60 91 31 05 	lds	r22, 0x0531	; 0x800531 <_sPump_Parameter>
     a46:	70 91 32 05 	lds	r23, 0x0532	; 0x800532 <_sPump_Parameter+0x1>
     a4a:	80 91 33 05 	lds	r24, 0x0533	; 0x800533 <_sPump_Parameter+0x2>
     a4e:	90 91 34 05 	lds	r25, 0x0534	; 0x800534 <_sPump_Parameter+0x3>
     a52:	0e 94 74 10 	call	0x20e8	; 0x20e8 <__divsf3>
     a56:	4b 01       	movw	r8, r22
     a58:	5c 01       	movw	r10, r24
     a5a:	20 e0       	ldi	r18, 0x00	; 0
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	48 e6       	ldi	r20, 0x68	; 104
     a60:	52 e4       	ldi	r21, 0x42	; 66
     a62:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <__mulsf3>
     a66:	9b 01       	movw	r18, r22
     a68:	ac 01       	movw	r20, r24
     a6a:	c7 01       	movw	r24, r14
     a6c:	b6 01       	movw	r22, r12
     a6e:	0e 94 6f 10 	call	0x20de	; 0x20de <__cmpsf2>
     a72:	c0 91 4b 05 	lds	r28, 0x054B	; 0x80054b <_sWireless_Pump_Data+0x10>
     a76:	d0 91 4c 05 	lds	r29, 0x054C	; 0x80054c <_sWireless_Pump_Data+0x11>
     a7a:	87 ff       	sbrs	r24, 7
     a7c:	61 c0       	rjmp	.+194    	; 0xb40 <__stack+0x241>
     a7e:	80 91 59 05 	lds	r24, 0x0559	; 0x800559 <_sWireless_Pump_Data+0x1e>
     a82:	90 91 5a 05 	lds	r25, 0x055A	; 0x80055a <_sWireless_Pump_Data+0x1f>
     a86:	89 37       	cpi	r24, 0x79	; 121
     a88:	91 05       	cpc	r25, r1
     a8a:	08 f4       	brcc	.+2      	; 0xa8e <__stack+0x18f>
     a8c:	59 c0       	rjmp	.+178    	; 0xb40 <__stack+0x241>
     a8e:	80 91 5b 05 	lds	r24, 0x055B	; 0x80055b <_sWireless_Pump_Data+0x20>
     a92:	81 30       	cpi	r24, 0x01	; 1
     a94:	09 f0       	breq	.+2      	; 0xa98 <__stack+0x199>
     a96:	54 c0       	rjmp	.+168    	; 0xb40 <__stack+0x241>
     a98:	20 e0       	ldi	r18, 0x00	; 0
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	40 e7       	ldi	r20, 0x70	; 112
     a9e:	51 e4       	ldi	r21, 0x41	; 65
     aa0:	c5 01       	movw	r24, r10
     aa2:	b4 01       	movw	r22, r8
     aa4:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <__mulsf3>
     aa8:	9b 01       	movw	r18, r22
     aaa:	ac 01       	movw	r20, r24
     aac:	c7 01       	movw	r24, r14
     aae:	b6 01       	movw	r22, r12
     ab0:	0e 94 ce 11 	call	0x239c	; 0x239c <__gesf2>
     ab4:	18 16       	cp	r1, r24
     ab6:	0c f0       	brlt	.+2      	; 0xaba <__stack+0x1bb>
     ab8:	43 c0       	rjmp	.+134    	; 0xb40 <__stack+0x241>
     aba:	20 e0       	ldi	r18, 0x00	; 0
     abc:	30 e0       	ldi	r19, 0x00	; 0
     abe:	40 ea       	ldi	r20, 0xA0	; 160
     ac0:	51 e4       	ldi	r21, 0x41	; 65
     ac2:	c5 01       	movw	r24, r10
     ac4:	b4 01       	movw	r22, r8
     ac6:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <__mulsf3>
     aca:	9b 01       	movw	r18, r22
     acc:	ac 01       	movw	r20, r24
     ace:	c7 01       	movw	r24, r14
     ad0:	b6 01       	movw	r22, r12
     ad2:	0e 94 ce 11 	call	0x239c	; 0x239c <__gesf2>
     ad6:	18 16       	cp	r1, r24
     ad8:	0c f0       	brlt	.+2      	; 0xadc <__stack+0x1dd>
     ada:	55 c0       	rjmp	.+170    	; 0xb86 <__stack+0x287>
     adc:	c3 fd       	sbrc	r28, 3
     ade:	53 c0       	rjmp	.+166    	; 0xb86 <__stack+0x287>
     ae0:	88 e0       	ldi	r24, 0x08	; 8
     ae2:	90 e0       	ldi	r25, 0x00	; 0
     ae4:	a0 e0       	ldi	r26, 0x00	; 0
     ae6:	b0 e0       	ldi	r27, 0x00	; 0
     ae8:	80 93 0d 03 	sts	0x030D, r24	; 0x80030d <_ZZ14Faults_HandlervE12fault_occure>
     aec:	90 93 0e 03 	sts	0x030E, r25	; 0x80030e <_ZZ14Faults_HandlervE12fault_occure+0x1>
     af0:	a0 93 0f 03 	sts	0x030F, r26	; 0x80030f <_ZZ14Faults_HandlervE12fault_occure+0x2>
     af4:	b0 93 10 03 	sts	0x0310, r27	; 0x800310 <_ZZ14Faults_HandlervE12fault_occure+0x3>
     af8:	6b eb       	ldi	r22, 0xBB	; 187
     afa:	71 e0       	ldi	r23, 0x01	; 1
     afc:	81 ec       	ldi	r24, 0xC1	; 193
     afe:	96 e0       	ldi	r25, 0x06	; 6
     b00:	0e 94 5d 16 	call	0x2cba	; 0x2cba <_ZN5Print7printlnEPK19__FlashStringHelper>
     b04:	4a e0       	ldi	r20, 0x0A	; 10
     b06:	50 e0       	ldi	r21, 0x00	; 0
     b08:	60 91 0c 03 	lds	r22, 0x030C	; 0x80030c <_ZZ14Faults_HandlervE18faults_check_timer>
     b0c:	81 ec       	ldi	r24, 0xC1	; 193
     b0e:	96 e0       	ldi	r25, 0x06	; 6
     b10:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <_ZN5Print7printlnEhi>
     b14:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <_ZZ14Faults_HandlervE18faults_check_timer>
     b18:	84 30       	cpi	r24, 0x04	; 4
     b1a:	68 f1       	brcs	.+90     	; 0xb76 <__stack+0x277>
     b1c:	80 91 4b 05 	lds	r24, 0x054B	; 0x80054b <_sWireless_Pump_Data+0x10>
     b20:	90 91 4c 05 	lds	r25, 0x054C	; 0x80054c <_sWireless_Pump_Data+0x11>
     b24:	88 60       	ori	r24, 0x08	; 8
     b26:	90 93 4c 05 	sts	0x054C, r25	; 0x80054c <_sWireless_Pump_Data+0x11>
     b2a:	80 93 4b 05 	sts	0x054B, r24	; 0x80054b <_sWireless_Pump_Data+0x10>
     b2e:	10 92 0c 03 	sts	0x030C, r1	; 0x80030c <_ZZ14Faults_HandlervE18faults_check_timer>
     b32:	6d ea       	ldi	r22, 0xAD	; 173
     b34:	71 e0       	ldi	r23, 0x01	; 1
     b36:	81 ec       	ldi	r24, 0xC1	; 193
     b38:	96 e0       	ldi	r25, 0x06	; 6
     b3a:	0e 94 5d 16 	call	0x2cba	; 0x2cba <_ZN5Print7printlnEPK19__FlashStringHelper>
     b3e:	1b c0       	rjmp	.+54     	; 0xb76 <__stack+0x277>
     b40:	c7 7f       	andi	r28, 0xF7	; 247
     b42:	d0 93 4c 05 	sts	0x054C, r29	; 0x80054c <_sWireless_Pump_Data+0x11>
     b46:	c0 93 4b 05 	sts	0x054B, r28	; 0x80054b <_sWireless_Pump_Data+0x10>
     b4a:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <_ZZ14Faults_HandlervE12fault_occure>
     b4e:	90 91 0e 03 	lds	r25, 0x030E	; 0x80030e <_ZZ14Faults_HandlervE12fault_occure+0x1>
     b52:	a0 91 0f 03 	lds	r26, 0x030F	; 0x80030f <_ZZ14Faults_HandlervE12fault_occure+0x2>
     b56:	b0 91 10 03 	lds	r27, 0x0310	; 0x800310 <_ZZ14Faults_HandlervE12fault_occure+0x3>
     b5a:	08 97       	sbiw	r24, 0x08	; 8
     b5c:	a1 05       	cpc	r26, r1
     b5e:	b1 05       	cpc	r27, r1
     b60:	51 f4       	brne	.+20     	; 0xb76 <__stack+0x277>
     b62:	10 92 0c 03 	sts	0x030C, r1	; 0x80030c <_ZZ14Faults_HandlervE18faults_check_timer>
     b66:	10 92 0d 03 	sts	0x030D, r1	; 0x80030d <_ZZ14Faults_HandlervE12fault_occure>
     b6a:	10 92 0e 03 	sts	0x030E, r1	; 0x80030e <_ZZ14Faults_HandlervE12fault_occure+0x1>
     b6e:	10 92 0f 03 	sts	0x030F, r1	; 0x80030f <_ZZ14Faults_HandlervE12fault_occure+0x2>
     b72:	10 92 10 03 	sts	0x0310, r1	; 0x800310 <_ZZ14Faults_HandlervE12fault_occure+0x3>
     b76:	80 91 59 05 	lds	r24, 0x0559	; 0x800559 <_sWireless_Pump_Data+0x1e>
     b7a:	90 91 5a 05 	lds	r25, 0x055A	; 0x80055a <_sWireless_Pump_Data+0x1f>
     b7e:	89 37       	cpi	r24, 0x79	; 121
     b80:	91 05       	cpc	r25, r1
     b82:	08 f4       	brcc	.+2      	; 0xb86 <__stack+0x287>
     b84:	62 c0       	rjmp	.+196    	; 0xc4a <__stack+0x34b>
     b86:	80 91 5b 05 	lds	r24, 0x055B	; 0x80055b <_sWireless_Pump_Data+0x20>
     b8a:	81 30       	cpi	r24, 0x01	; 1
     b8c:	09 f0       	breq	.+2      	; 0xb90 <__stack+0x291>
     b8e:	5d c0       	rjmp	.+186    	; 0xc4a <__stack+0x34b>
     b90:	80 91 63 05 	lds	r24, 0x0563	; 0x800563 <_sWireless_Pump_Data+0x28>
     b94:	81 30       	cpi	r24, 0x01	; 1
     b96:	09 f0       	breq	.+2      	; 0xb9a <__stack+0x29b>
     b98:	58 c0       	rjmp	.+176    	; 0xc4a <__stack+0x34b>
     b9a:	20 e0       	ldi	r18, 0x00	; 0
     b9c:	30 e0       	ldi	r19, 0x00	; 0
     b9e:	48 ec       	ldi	r20, 0xC8	; 200
     ba0:	52 e4       	ldi	r21, 0x42	; 66
     ba2:	60 91 31 05 	lds	r22, 0x0531	; 0x800531 <_sPump_Parameter>
     ba6:	70 91 32 05 	lds	r23, 0x0532	; 0x800532 <_sPump_Parameter+0x1>
     baa:	80 91 33 05 	lds	r24, 0x0533	; 0x800533 <_sPump_Parameter+0x2>
     bae:	90 91 34 05 	lds	r25, 0x0534	; 0x800534 <_sPump_Parameter+0x3>
     bb2:	0e 94 74 10 	call	0x20e8	; 0x20e8 <__divsf3>
     bb6:	20 e0       	ldi	r18, 0x00	; 0
     bb8:	30 e0       	ldi	r19, 0x00	; 0
     bba:	40 ea       	ldi	r20, 0xA0	; 160
     bbc:	51 e4       	ldi	r21, 0x41	; 65
     bbe:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <__mulsf3>
     bc2:	9b 01       	movw	r18, r22
     bc4:	ac 01       	movw	r20, r24
     bc6:	60 91 35 05 	lds	r22, 0x0535	; 0x800535 <_sPump_Parameter+0x4>
     bca:	70 91 36 05 	lds	r23, 0x0536	; 0x800536 <_sPump_Parameter+0x5>
     bce:	80 91 37 05 	lds	r24, 0x0537	; 0x800537 <_sPump_Parameter+0x6>
     bd2:	90 91 38 05 	lds	r25, 0x0538	; 0x800538 <_sPump_Parameter+0x7>
     bd6:	0e 94 6f 10 	call	0x20de	; 0x20de <__cmpsf2>
     bda:	87 ff       	sbrs	r24, 7
     bdc:	36 c0       	rjmp	.+108    	; 0xc4a <__stack+0x34b>
     bde:	80 91 4b 05 	lds	r24, 0x054B	; 0x80054b <_sWireless_Pump_Data+0x10>
     be2:	90 91 4c 05 	lds	r25, 0x054C	; 0x80054c <_sWireless_Pump_Data+0x11>
     be6:	91 fd       	sbrc	r25, 1
     be8:	50 c0       	rjmp	.+160    	; 0xc8a <__stack+0x38b>
     bea:	80 e0       	ldi	r24, 0x00	; 0
     bec:	92 e0       	ldi	r25, 0x02	; 2
     bee:	a0 e0       	ldi	r26, 0x00	; 0
     bf0:	b0 e0       	ldi	r27, 0x00	; 0
     bf2:	80 93 0d 03 	sts	0x030D, r24	; 0x80030d <_ZZ14Faults_HandlervE12fault_occure>
     bf6:	90 93 0e 03 	sts	0x030E, r25	; 0x80030e <_ZZ14Faults_HandlervE12fault_occure+0x1>
     bfa:	a0 93 0f 03 	sts	0x030F, r26	; 0x80030f <_ZZ14Faults_HandlervE12fault_occure+0x2>
     bfe:	b0 93 10 03 	sts	0x0310, r27	; 0x800310 <_ZZ14Faults_HandlervE12fault_occure+0x3>
     c02:	68 e9       	ldi	r22, 0x98	; 152
     c04:	71 e0       	ldi	r23, 0x01	; 1
     c06:	81 ec       	ldi	r24, 0xC1	; 193
     c08:	96 e0       	ldi	r25, 0x06	; 6
     c0a:	0e 94 5d 16 	call	0x2cba	; 0x2cba <_ZN5Print7printlnEPK19__FlashStringHelper>
     c0e:	4a e0       	ldi	r20, 0x0A	; 10
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	60 91 0c 03 	lds	r22, 0x030C	; 0x80030c <_ZZ14Faults_HandlervE18faults_check_timer>
     c16:	81 ec       	ldi	r24, 0xC1	; 193
     c18:	96 e0       	ldi	r25, 0x06	; 6
     c1a:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <_ZN5Print7printlnEhi>
     c1e:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <_ZZ14Faults_HandlervE18faults_check_timer>
     c22:	84 30       	cpi	r24, 0x04	; 4
     c24:	90 f1       	brcs	.+100    	; 0xc8a <__stack+0x38b>
     c26:	80 91 4b 05 	lds	r24, 0x054B	; 0x80054b <_sWireless_Pump_Data+0x10>
     c2a:	90 91 4c 05 	lds	r25, 0x054C	; 0x80054c <_sWireless_Pump_Data+0x11>
     c2e:	92 60       	ori	r25, 0x02	; 2
     c30:	90 93 4c 05 	sts	0x054C, r25	; 0x80054c <_sWireless_Pump_Data+0x11>
     c34:	80 93 4b 05 	sts	0x054B, r24	; 0x80054b <_sWireless_Pump_Data+0x10>
     c38:	10 92 0c 03 	sts	0x030C, r1	; 0x80030c <_ZZ14Faults_HandlervE18faults_check_timer>
     c3c:	67 e7       	ldi	r22, 0x77	; 119
     c3e:	71 e0       	ldi	r23, 0x01	; 1
     c40:	81 ec       	ldi	r24, 0xC1	; 193
     c42:	96 e0       	ldi	r25, 0x06	; 6
     c44:	0e 94 5d 16 	call	0x2cba	; 0x2cba <_ZN5Print7printlnEPK19__FlashStringHelper>
     c48:	20 c0       	rjmp	.+64     	; 0xc8a <__stack+0x38b>
     c4a:	80 91 4b 05 	lds	r24, 0x054B	; 0x80054b <_sWireless_Pump_Data+0x10>
     c4e:	90 91 4c 05 	lds	r25, 0x054C	; 0x80054c <_sWireless_Pump_Data+0x11>
     c52:	9d 7f       	andi	r25, 0xFD	; 253
     c54:	90 93 4c 05 	sts	0x054C, r25	; 0x80054c <_sWireless_Pump_Data+0x11>
     c58:	80 93 4b 05 	sts	0x054B, r24	; 0x80054b <_sWireless_Pump_Data+0x10>
     c5c:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <_ZZ14Faults_HandlervE12fault_occure>
     c60:	90 91 0e 03 	lds	r25, 0x030E	; 0x80030e <_ZZ14Faults_HandlervE12fault_occure+0x1>
     c64:	a0 91 0f 03 	lds	r26, 0x030F	; 0x80030f <_ZZ14Faults_HandlervE12fault_occure+0x2>
     c68:	b0 91 10 03 	lds	r27, 0x0310	; 0x800310 <_ZZ14Faults_HandlervE12fault_occure+0x3>
     c6c:	81 15       	cp	r24, r1
     c6e:	92 40       	sbci	r25, 0x02	; 2
     c70:	a1 05       	cpc	r26, r1
     c72:	b1 05       	cpc	r27, r1
     c74:	51 f4       	brne	.+20     	; 0xc8a <__stack+0x38b>
     c76:	10 92 0c 03 	sts	0x030C, r1	; 0x80030c <_ZZ14Faults_HandlervE18faults_check_timer>
     c7a:	10 92 0d 03 	sts	0x030D, r1	; 0x80030d <_ZZ14Faults_HandlervE12fault_occure>
     c7e:	10 92 0e 03 	sts	0x030E, r1	; 0x80030e <_ZZ14Faults_HandlervE12fault_occure+0x1>
     c82:	10 92 0f 03 	sts	0x030F, r1	; 0x80030f <_ZZ14Faults_HandlervE12fault_occure+0x2>
     c86:	10 92 10 03 	sts	0x0310, r1	; 0x800310 <_ZZ14Faults_HandlervE12fault_occure+0x3>
     c8a:	20 91 56 05 	lds	r18, 0x0556	; 0x800556 <_sWireless_Pump_Data+0x1b>
     c8e:	80 91 4b 05 	lds	r24, 0x054B	; 0x80054b <_sWireless_Pump_Data+0x10>
     c92:	90 91 4c 05 	lds	r25, 0x054C	; 0x80054c <_sWireless_Pump_Data+0x11>
     c96:	22 23       	and	r18, r18
     c98:	31 f0       	breq	.+12     	; 0xca6 <__stack+0x3a7>
     c9a:	81 60       	ori	r24, 0x01	; 1
     c9c:	90 93 4c 05 	sts	0x054C, r25	; 0x80054c <_sWireless_Pump_Data+0x11>
     ca0:	80 93 4b 05 	sts	0x054B, r24	; 0x80054b <_sWireless_Pump_Data+0x10>
     ca4:	05 c0       	rjmp	.+10     	; 0xcb0 <__stack+0x3b1>
     ca6:	8e 7f       	andi	r24, 0xFE	; 254
     ca8:	90 93 4c 05 	sts	0x054C, r25	; 0x80054c <_sWireless_Pump_Data+0x11>
     cac:	80 93 4b 05 	sts	0x054B, r24	; 0x80054b <_sWireless_Pump_Data+0x10>
     cb0:	20 91 57 05 	lds	r18, 0x0557	; 0x800557 <_sWireless_Pump_Data+0x1c>
     cb4:	80 91 4b 05 	lds	r24, 0x054B	; 0x80054b <_sWireless_Pump_Data+0x10>
     cb8:	90 91 4c 05 	lds	r25, 0x054C	; 0x80054c <_sWireless_Pump_Data+0x11>
     cbc:	22 23       	and	r18, r18
     cbe:	31 f0       	breq	.+12     	; 0xccc <__stack+0x3cd>
     cc0:	82 60       	ori	r24, 0x02	; 2
     cc2:	90 93 4c 05 	sts	0x054C, r25	; 0x80054c <_sWireless_Pump_Data+0x11>
     cc6:	80 93 4b 05 	sts	0x054B, r24	; 0x80054b <_sWireless_Pump_Data+0x10>
     cca:	05 c0       	rjmp	.+10     	; 0xcd6 <__stack+0x3d7>
     ccc:	8d 7f       	andi	r24, 0xFD	; 253
     cce:	90 93 4c 05 	sts	0x054C, r25	; 0x80054c <_sWireless_Pump_Data+0x11>
     cd2:	80 93 4b 05 	sts	0x054B, r24	; 0x80054b <_sWireless_Pump_Data+0x10>
     cd6:	20 91 58 05 	lds	r18, 0x0558	; 0x800558 <_sWireless_Pump_Data+0x1d>
     cda:	80 91 4b 05 	lds	r24, 0x054B	; 0x80054b <_sWireless_Pump_Data+0x10>
     cde:	90 91 4c 05 	lds	r25, 0x054C	; 0x80054c <_sWireless_Pump_Data+0x11>
     ce2:	22 23       	and	r18, r18
     ce4:	31 f0       	breq	.+12     	; 0xcf2 <__stack+0x3f3>
     ce6:	84 60       	ori	r24, 0x04	; 4
     ce8:	90 93 4c 05 	sts	0x054C, r25	; 0x80054c <_sWireless_Pump_Data+0x11>
     cec:	80 93 4b 05 	sts	0x054B, r24	; 0x80054b <_sWireless_Pump_Data+0x10>
     cf0:	05 c0       	rjmp	.+10     	; 0xcfc <__stack+0x3fd>
     cf2:	8b 7f       	andi	r24, 0xFB	; 251
     cf4:	90 93 4c 05 	sts	0x054C, r25	; 0x80054c <_sWireless_Pump_Data+0x11>
     cf8:	80 93 4b 05 	sts	0x054B, r24	; 0x80054b <_sWireless_Pump_Data+0x10>
     cfc:	80 91 4b 05 	lds	r24, 0x054B	; 0x80054b <_sWireless_Pump_Data+0x10>
     d00:	90 91 4c 05 	lds	r25, 0x054C	; 0x80054c <_sWireless_Pump_Data+0x11>
     d04:	9c 01       	movw	r18, r24
     d06:	23 70       	andi	r18, 0x03	; 3
     d08:	33 27       	eor	r19, r19
     d0a:	23 30       	cpi	r18, 0x03	; 3
     d0c:	31 05       	cpc	r19, r1
     d0e:	11 f4       	brne	.+4      	; 0xd14 <__stack+0x415>
     d10:	82 fd       	sbrc	r24, 2
     d12:	32 c0       	rjmp	.+100    	; 0xd78 <__stack+0x479>
     d14:	84 fd       	sbrc	r24, 4
     d16:	49 c0       	rjmp	.+146    	; 0xdaa <__stack+0x4ab>
     d18:	80 e1       	ldi	r24, 0x10	; 16
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	a0 e0       	ldi	r26, 0x00	; 0
     d1e:	b0 e0       	ldi	r27, 0x00	; 0
     d20:	80 93 0d 03 	sts	0x030D, r24	; 0x80030d <_ZZ14Faults_HandlervE12fault_occure>
     d24:	90 93 0e 03 	sts	0x030E, r25	; 0x80030e <_ZZ14Faults_HandlervE12fault_occure+0x1>
     d28:	a0 93 0f 03 	sts	0x030F, r26	; 0x80030f <_ZZ14Faults_HandlervE12fault_occure+0x2>
     d2c:	b0 93 10 03 	sts	0x0310, r27	; 0x800310 <_ZZ14Faults_HandlervE12fault_occure+0x3>
     d30:	66 e6       	ldi	r22, 0x66	; 102
     d32:	71 e0       	ldi	r23, 0x01	; 1
     d34:	81 ec       	ldi	r24, 0xC1	; 193
     d36:	96 e0       	ldi	r25, 0x06	; 6
     d38:	0e 94 5d 16 	call	0x2cba	; 0x2cba <_ZN5Print7printlnEPK19__FlashStringHelper>
     d3c:	4a e0       	ldi	r20, 0x0A	; 10
     d3e:	50 e0       	ldi	r21, 0x00	; 0
     d40:	60 91 0c 03 	lds	r22, 0x030C	; 0x80030c <_ZZ14Faults_HandlervE18faults_check_timer>
     d44:	81 ec       	ldi	r24, 0xC1	; 193
     d46:	96 e0       	ldi	r25, 0x06	; 6
     d48:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <_ZN5Print7printlnEhi>
     d4c:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <_ZZ14Faults_HandlervE18faults_check_timer>
     d50:	84 30       	cpi	r24, 0x04	; 4
     d52:	58 f1       	brcs	.+86     	; 0xdaa <__stack+0x4ab>
     d54:	80 91 4b 05 	lds	r24, 0x054B	; 0x80054b <_sWireless_Pump_Data+0x10>
     d58:	90 91 4c 05 	lds	r25, 0x054C	; 0x80054c <_sWireless_Pump_Data+0x11>
     d5c:	80 61       	ori	r24, 0x10	; 16
     d5e:	90 93 4c 05 	sts	0x054C, r25	; 0x80054c <_sWireless_Pump_Data+0x11>
     d62:	80 93 4b 05 	sts	0x054B, r24	; 0x80054b <_sWireless_Pump_Data+0x10>
     d66:	10 92 0c 03 	sts	0x030C, r1	; 0x80030c <_ZZ14Faults_HandlervE18faults_check_timer>
     d6a:	65 e5       	ldi	r22, 0x55	; 85
     d6c:	71 e0       	ldi	r23, 0x01	; 1
     d6e:	81 ec       	ldi	r24, 0xC1	; 193
     d70:	96 e0       	ldi	r25, 0x06	; 6
     d72:	0e 94 5d 16 	call	0x2cba	; 0x2cba <_ZN5Print7printlnEPK19__FlashStringHelper>
     d76:	19 c0       	rjmp	.+50     	; 0xdaa <__stack+0x4ab>
     d78:	8f 7e       	andi	r24, 0xEF	; 239
     d7a:	90 93 4c 05 	sts	0x054C, r25	; 0x80054c <_sWireless_Pump_Data+0x11>
     d7e:	80 93 4b 05 	sts	0x054B, r24	; 0x80054b <_sWireless_Pump_Data+0x10>
     d82:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <_ZZ14Faults_HandlervE12fault_occure>
     d86:	90 91 0e 03 	lds	r25, 0x030E	; 0x80030e <_ZZ14Faults_HandlervE12fault_occure+0x1>
     d8a:	a0 91 0f 03 	lds	r26, 0x030F	; 0x80030f <_ZZ14Faults_HandlervE12fault_occure+0x2>
     d8e:	b0 91 10 03 	lds	r27, 0x0310	; 0x800310 <_ZZ14Faults_HandlervE12fault_occure+0x3>
     d92:	40 97       	sbiw	r24, 0x10	; 16
     d94:	a1 05       	cpc	r26, r1
     d96:	b1 05       	cpc	r27, r1
     d98:	41 f4       	brne	.+16     	; 0xdaa <__stack+0x4ab>
     d9a:	10 92 0d 03 	sts	0x030D, r1	; 0x80030d <_ZZ14Faults_HandlervE12fault_occure>
     d9e:	10 92 0e 03 	sts	0x030E, r1	; 0x80030e <_ZZ14Faults_HandlervE12fault_occure+0x1>
     da2:	10 92 0f 03 	sts	0x030F, r1	; 0x80030f <_ZZ14Faults_HandlervE12fault_occure+0x2>
     da6:	10 92 10 03 	sts	0x0310, r1	; 0x800310 <_ZZ14Faults_HandlervE12fault_occure+0x3>
     daa:	80 91 5b 05 	lds	r24, 0x055B	; 0x80055b <_sWireless_Pump_Data+0x20>
     dae:	81 30       	cpi	r24, 0x01	; 1
     db0:	09 f0       	breq	.+2      	; 0xdb4 <__stack+0x4b5>
     db2:	75 c0       	rjmp	.+234    	; 0xe9e <__stack+0x59f>
     db4:	20 e0       	ldi	r18, 0x00	; 0
     db6:	30 e0       	ldi	r19, 0x00	; 0
     db8:	48 ec       	ldi	r20, 0xC8	; 200
     dba:	52 e4       	ldi	r21, 0x42	; 66
     dbc:	60 91 31 05 	lds	r22, 0x0531	; 0x800531 <_sPump_Parameter>
     dc0:	70 91 32 05 	lds	r23, 0x0532	; 0x800532 <_sPump_Parameter+0x1>
     dc4:	80 91 33 05 	lds	r24, 0x0533	; 0x800533 <_sPump_Parameter+0x2>
     dc8:	90 91 34 05 	lds	r25, 0x0534	; 0x800534 <_sPump_Parameter+0x3>
     dcc:	0e 94 74 10 	call	0x20e8	; 0x20e8 <__divsf3>
     dd0:	20 e0       	ldi	r18, 0x00	; 0
     dd2:	30 e0       	ldi	r19, 0x00	; 0
     dd4:	40 e7       	ldi	r20, 0x70	; 112
     dd6:	51 e4       	ldi	r21, 0x41	; 65
     dd8:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <__mulsf3>
     ddc:	9b 01       	movw	r18, r22
     dde:	ac 01       	movw	r20, r24
     de0:	60 91 35 05 	lds	r22, 0x0535	; 0x800535 <_sPump_Parameter+0x4>
     de4:	70 91 36 05 	lds	r23, 0x0536	; 0x800536 <_sPump_Parameter+0x5>
     de8:	80 91 37 05 	lds	r24, 0x0537	; 0x800537 <_sPump_Parameter+0x6>
     dec:	90 91 38 05 	lds	r25, 0x0538	; 0x800538 <_sPump_Parameter+0x7>
     df0:	0e 94 6f 10 	call	0x20de	; 0x20de <__cmpsf2>
     df4:	87 ff       	sbrs	r24, 7
     df6:	1d c0       	rjmp	.+58     	; 0xe32 <__stack+0x533>
     df8:	80 91 4b 05 	lds	r24, 0x054B	; 0x80054b <_sWireless_Pump_Data+0x10>
     dfc:	86 ff       	sbrs	r24, 6
     dfe:	19 c0       	rjmp	.+50     	; 0xe32 <__stack+0x533>
     e00:	69 e4       	ldi	r22, 0x49	; 73
     e02:	71 e0       	ldi	r23, 0x01	; 1
     e04:	81 ec       	ldi	r24, 0xC1	; 193
     e06:	96 e0       	ldi	r25, 0x06	; 6
     e08:	0e 94 5d 16 	call	0x2cba	; 0x2cba <_ZN5Print7printlnEPK19__FlashStringHelper>
     e0c:	80 91 4b 05 	lds	r24, 0x054B	; 0x80054b <_sWireless_Pump_Data+0x10>
     e10:	90 91 4c 05 	lds	r25, 0x054C	; 0x80054c <_sWireless_Pump_Data+0x11>
     e14:	8f 7b       	andi	r24, 0xBF	; 191
     e16:	90 93 4c 05 	sts	0x054C, r25	; 0x80054c <_sWireless_Pump_Data+0x11>
     e1a:	80 93 4b 05 	sts	0x054B, r24	; 0x80054b <_sWireless_Pump_Data+0x10>
     e1e:	10 92 0d 03 	sts	0x030D, r1	; 0x80030d <_ZZ14Faults_HandlervE12fault_occure>
     e22:	10 92 0e 03 	sts	0x030E, r1	; 0x80030e <_ZZ14Faults_HandlervE12fault_occure+0x1>
     e26:	10 92 0f 03 	sts	0x030F, r1	; 0x80030f <_ZZ14Faults_HandlervE12fault_occure+0x2>
     e2a:	10 92 10 03 	sts	0x0310, r1	; 0x800310 <_ZZ14Faults_HandlervE12fault_occure+0x3>
     e2e:	10 92 0c 03 	sts	0x030C, r1	; 0x80030c <_ZZ14Faults_HandlervE18faults_check_timer>
     e32:	20 e0       	ldi	r18, 0x00	; 0
     e34:	30 e0       	ldi	r19, 0x00	; 0
     e36:	48 ec       	ldi	r20, 0xC8	; 200
     e38:	52 e4       	ldi	r21, 0x42	; 66
     e3a:	60 91 31 05 	lds	r22, 0x0531	; 0x800531 <_sPump_Parameter>
     e3e:	70 91 32 05 	lds	r23, 0x0532	; 0x800532 <_sPump_Parameter+0x1>
     e42:	80 91 33 05 	lds	r24, 0x0533	; 0x800533 <_sPump_Parameter+0x2>
     e46:	90 91 34 05 	lds	r25, 0x0534	; 0x800534 <_sPump_Parameter+0x3>
     e4a:	0e 94 74 10 	call	0x20e8	; 0x20e8 <__divsf3>
     e4e:	20 e0       	ldi	r18, 0x00	; 0
     e50:	30 e0       	ldi	r19, 0x00	; 0
     e52:	40 e9       	ldi	r20, 0x90	; 144
     e54:	51 e4       	ldi	r21, 0x41	; 65
     e56:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <__mulsf3>
     e5a:	9b 01       	movw	r18, r22
     e5c:	ac 01       	movw	r20, r24
     e5e:	60 91 35 05 	lds	r22, 0x0535	; 0x800535 <_sPump_Parameter+0x4>
     e62:	70 91 36 05 	lds	r23, 0x0536	; 0x800536 <_sPump_Parameter+0x5>
     e66:	80 91 37 05 	lds	r24, 0x0537	; 0x800537 <_sPump_Parameter+0x6>
     e6a:	90 91 38 05 	lds	r25, 0x0538	; 0x800538 <_sPump_Parameter+0x7>
     e6e:	0e 94 ce 11 	call	0x239c	; 0x239c <__gesf2>
     e72:	18 16       	cp	r1, r24
     e74:	44 f5       	brge	.+80     	; 0xec6 <__stack+0x5c7>
     e76:	80 91 4b 05 	lds	r24, 0x054B	; 0x80054b <_sWireless_Pump_Data+0x10>
     e7a:	86 fd       	sbrc	r24, 6
     e7c:	24 c0       	rjmp	.+72     	; 0xec6 <__stack+0x5c7>
     e7e:	6e e3       	ldi	r22, 0x3E	; 62
     e80:	71 e0       	ldi	r23, 0x01	; 1
     e82:	81 ec       	ldi	r24, 0xC1	; 193
     e84:	96 e0       	ldi	r25, 0x06	; 6
     e86:	0e 94 5d 16 	call	0x2cba	; 0x2cba <_ZN5Print7printlnEPK19__FlashStringHelper>
     e8a:	80 91 4b 05 	lds	r24, 0x054B	; 0x80054b <_sWireless_Pump_Data+0x10>
     e8e:	90 91 4c 05 	lds	r25, 0x054C	; 0x80054c <_sWireless_Pump_Data+0x11>
     e92:	80 64       	ori	r24, 0x40	; 64
     e94:	90 93 4c 05 	sts	0x054C, r25	; 0x80054c <_sWireless_Pump_Data+0x11>
     e98:	80 93 4b 05 	sts	0x054B, r24	; 0x80054b <_sWireless_Pump_Data+0x10>
     e9c:	14 c0       	rjmp	.+40     	; 0xec6 <__stack+0x5c7>
     e9e:	89 e0       	ldi	r24, 0x09	; 9
     ea0:	0e 94 fc 19 	call	0x33f8	; 0x33f8 <digitalRead>
     ea4:	20 91 4b 05 	lds	r18, 0x054B	; 0x80054b <_sWireless_Pump_Data+0x10>
     ea8:	30 91 4c 05 	lds	r19, 0x054C	; 0x80054c <_sWireless_Pump_Data+0x11>
     eac:	89 2b       	or	r24, r25
     eae:	31 f0       	breq	.+12     	; 0xebc <__stack+0x5bd>
     eb0:	2f 7b       	andi	r18, 0xBF	; 191
     eb2:	30 93 4c 05 	sts	0x054C, r19	; 0x80054c <_sWireless_Pump_Data+0x11>
     eb6:	20 93 4b 05 	sts	0x054B, r18	; 0x80054b <_sWireless_Pump_Data+0x10>
     eba:	05 c0       	rjmp	.+10     	; 0xec6 <__stack+0x5c7>
     ebc:	20 64       	ori	r18, 0x40	; 64
     ebe:	30 93 4c 05 	sts	0x054C, r19	; 0x80054c <_sWireless_Pump_Data+0x11>
     ec2:	20 93 4b 05 	sts	0x054B, r18	; 0x80054b <_sWireless_Pump_Data+0x10>
     ec6:	81 e0       	ldi	r24, 0x01	; 1
     ec8:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <_Z19Pump_Off_For_Faultsh>
     ecc:	80 91 4b 05 	lds	r24, 0x054B	; 0x80054b <_sWireless_Pump_Data+0x10>
     ed0:	90 91 4c 05 	lds	r25, 0x054C	; 0x80054c <_sWireless_Pump_Data+0x11>
     ed4:	a0 e0       	ldi	r26, 0x00	; 0
     ed6:	b0 e0       	ldi	r27, 0x00	; 0
     ed8:	40 91 08 03 	lds	r20, 0x0308	; 0x800308 <_ZZ14Faults_HandlervE12fault_status>
     edc:	50 91 09 03 	lds	r21, 0x0309	; 0x800309 <_ZZ14Faults_HandlervE12fault_status+0x1>
     ee0:	60 91 0a 03 	lds	r22, 0x030A	; 0x80030a <_ZZ14Faults_HandlervE12fault_status+0x2>
     ee4:	70 91 0b 03 	lds	r23, 0x030B	; 0x80030b <_ZZ14Faults_HandlervE12fault_status+0x3>
     ee8:	84 17       	cp	r24, r20
     eea:	95 07       	cpc	r25, r21
     eec:	a6 07       	cpc	r26, r22
     eee:	b7 07       	cpc	r27, r23
     ef0:	c9 f0       	breq	.+50     	; 0xf24 <__stack+0x625>
     ef2:	64 e2       	ldi	r22, 0x24	; 36
     ef4:	71 e0       	ldi	r23, 0x01	; 1
     ef6:	81 ec       	ldi	r24, 0xC1	; 193
     ef8:	96 e0       	ldi	r25, 0x06	; 6
     efa:	0e 94 5d 16 	call	0x2cba	; 0x2cba <_ZN5Print7printlnEPK19__FlashStringHelper>
     efe:	80 91 4b 05 	lds	r24, 0x054B	; 0x80054b <_sWireless_Pump_Data+0x10>
     f02:	90 91 4c 05 	lds	r25, 0x054C	; 0x80054c <_sWireless_Pump_Data+0x11>
     f06:	a0 e0       	ldi	r26, 0x00	; 0
     f08:	b0 e0       	ldi	r27, 0x00	; 0
     f0a:	80 93 08 03 	sts	0x0308, r24	; 0x800308 <_ZZ14Faults_HandlervE12fault_status>
     f0e:	90 93 09 03 	sts	0x0309, r25	; 0x800309 <_ZZ14Faults_HandlervE12fault_status+0x1>
     f12:	a0 93 0a 03 	sts	0x030A, r26	; 0x80030a <_ZZ14Faults_HandlervE12fault_status+0x2>
     f16:	b0 93 0b 03 	sts	0x030B, r27	; 0x80030b <_ZZ14Faults_HandlervE12fault_status+0x3>
     f1a:	80 91 50 05 	lds	r24, 0x0550	; 0x800550 <_sWireless_Pump_Data+0x15>
     f1e:	84 60       	ori	r24, 0x04	; 4
     f20:	80 93 50 05 	sts	0x0550, r24	; 0x800550 <_sWireless_Pump_Data+0x15>
     f24:	df 91       	pop	r29
     f26:	cf 91       	pop	r28
     f28:	ff 90       	pop	r15
     f2a:	ef 90       	pop	r14
     f2c:	df 90       	pop	r13
     f2e:	cf 90       	pop	r12
     f30:	bf 90       	pop	r11
     f32:	af 90       	pop	r10
     f34:	9f 90       	pop	r9
     f36:	8f 90       	pop	r8
     f38:	08 95       	ret

00000f3a <_Z21Check_To_Turn_On_Pumpv>:
     f3a:	60 91 4b 05 	lds	r22, 0x054B	; 0x80054b <_sWireless_Pump_Data+0x10>
     f3e:	70 91 4c 05 	lds	r23, 0x054C	; 0x80054c <_sWireless_Pump_Data+0x11>
     f42:	42 e0       	ldi	r20, 0x02	; 2
     f44:	50 e0       	ldi	r21, 0x00	; 0
     f46:	81 ec       	ldi	r24, 0xC1	; 193
     f48:	96 e0       	ldi	r25, 0x06	; 6
     f4a:	0e 94 f6 16 	call	0x2dec	; 0x2dec <_ZN5Print7printlnEji>
     f4e:	4a e0       	ldi	r20, 0x0A	; 10
     f50:	50 e0       	ldi	r21, 0x00	; 0
     f52:	60 e8       	ldi	r22, 0x80	; 128
     f54:	70 e0       	ldi	r23, 0x00	; 0
     f56:	81 ec       	ldi	r24, 0xC1	; 193
     f58:	96 e0       	ldi	r25, 0x06	; 6
     f5a:	0e 94 57 17 	call	0x2eae	; 0x2eae <_ZN5Print7printlnEii>
     f5e:	4a e0       	ldi	r20, 0x0A	; 10
     f60:	50 e0       	ldi	r21, 0x00	; 0
     f62:	60 e1       	ldi	r22, 0x10	; 16
     f64:	70 e0       	ldi	r23, 0x00	; 0
     f66:	81 ec       	ldi	r24, 0xC1	; 193
     f68:	96 e0       	ldi	r25, 0x06	; 6
     f6a:	0e 94 57 17 	call	0x2eae	; 0x2eae <_ZN5Print7printlnEii>
     f6e:	80 91 4b 05 	lds	r24, 0x054B	; 0x80054b <_sWireless_Pump_Data+0x10>
     f72:	87 fd       	sbrc	r24, 7
     f74:	06 c0       	rjmp	.+12     	; 0xf82 <_Z21Check_To_Turn_On_Pumpv+0x48>
     f76:	60 e2       	ldi	r22, 0x20	; 32
     f78:	71 e0       	ldi	r23, 0x01	; 1
     f7a:	81 ec       	ldi	r24, 0xC1	; 193
     f7c:	96 e0       	ldi	r25, 0x06	; 6
     f7e:	0e 94 5d 16 	call	0x2cba	; 0x2cba <_ZN5Print7printlnEPK19__FlashStringHelper>
     f82:	80 91 4b 05 	lds	r24, 0x054B	; 0x80054b <_sWireless_Pump_Data+0x10>
     f86:	84 fd       	sbrc	r24, 4
     f88:	06 c0       	rjmp	.+12     	; 0xf96 <_Z21Check_To_Turn_On_Pumpv+0x5c>
     f8a:	6c e1       	ldi	r22, 0x1C	; 28
     f8c:	71 e0       	ldi	r23, 0x01	; 1
     f8e:	81 ec       	ldi	r24, 0xC1	; 193
     f90:	96 e0       	ldi	r25, 0x06	; 6
     f92:	0e 94 5d 16 	call	0x2cba	; 0x2cba <_ZN5Print7printlnEPK19__FlashStringHelper>
     f96:	20 91 4b 05 	lds	r18, 0x054B	; 0x80054b <_sWireless_Pump_Data+0x10>
     f9a:	30 91 4c 05 	lds	r19, 0x054C	; 0x80054c <_sWireless_Pump_Data+0x11>
     f9e:	20 79       	andi	r18, 0x90	; 144
     fa0:	33 27       	eor	r19, r19
     fa2:	81 e0       	ldi	r24, 0x01	; 1
     fa4:	23 2b       	or	r18, r19
     fa6:	09 f0       	breq	.+2      	; 0xfaa <_Z21Check_To_Turn_On_Pumpv+0x70>
     fa8:	80 e0       	ldi	r24, 0x00	; 0
     faa:	08 95       	ret

00000fac <__vector_7>:




ISR(TIMER2_COMPA_vect)
{
     fac:	1f 92       	push	r1
     fae:	0f 92       	push	r0
     fb0:	0f b6       	in	r0, 0x3f	; 63
     fb2:	0f 92       	push	r0
     fb4:	11 24       	eor	r1, r1
     fb6:	2f 93       	push	r18
     fb8:	3f 93       	push	r19
     fba:	4f 93       	push	r20
     fbc:	5f 93       	push	r21
     fbe:	6f 93       	push	r22
     fc0:	7f 93       	push	r23
     fc2:	8f 93       	push	r24
     fc4:	9f 93       	push	r25
     fc6:	af 93       	push	r26
     fc8:	bf 93       	push	r27
     fca:	ef 93       	push	r30
     fcc:	ff 93       	push	r31
   static unsigned int counter,ct_timer;
   
  if(counter > 1000)
     fce:	80 91 13 03 	lds	r24, 0x0313	; 0x800313 <_ZZ10__vector_7E7counter>
     fd2:	90 91 14 03 	lds	r25, 0x0314	; 0x800314 <_ZZ10__vector_7E7counter+0x1>
     fd6:	89 3e       	cpi	r24, 0xE9	; 233
     fd8:	93 40       	sbci	r25, 0x03	; 3
     fda:	08 f4       	brcc	.+2      	; 0xfde <__vector_7+0x32>
     fdc:	7c c0       	rjmp	.+248    	; 0x10d6 <__vector_7+0x12a>
  {
    counter = 0;
     fde:	10 92 14 03 	sts	0x0314, r1	; 0x800314 <_ZZ10__vector_7E7counter+0x1>
     fe2:	10 92 13 03 	sts	0x0313, r1	; 0x800313 <_ZZ10__vector_7E7counter>
    _g1Sec_Time = _kSET;
     fe6:	81 e0       	ldi	r24, 0x01	; 1
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	90 93 8c 06 	sts	0x068C, r25	; 0x80068c <_g1Sec_Time+0x1>
     fee:	80 93 8b 06 	sts	0x068B, r24	; 0x80068b <_g1Sec_Time>
    Utick++;
     ff2:	80 91 8d 06 	lds	r24, 0x068D	; 0x80068d <Utick>
     ff6:	90 91 8e 06 	lds	r25, 0x068E	; 0x80068e <Utick+0x1>
     ffa:	01 96       	adiw	r24, 0x01	; 1
     ffc:	90 93 8e 06 	sts	0x068E, r25	; 0x80068e <Utick+0x1>
    1000:	80 93 8d 06 	sts	0x068D, r24	; 0x80068d <Utick>
	
	_gMonitor_Controller_Response++;
    1004:	80 91 71 05 	lds	r24, 0x0571	; 0x800571 <_gMonitor_Controller_Response>
    1008:	90 91 72 05 	lds	r25, 0x0572	; 0x800572 <_gMonitor_Controller_Response+0x1>
    100c:	01 96       	adiw	r24, 0x01	; 1
    100e:	90 93 72 05 	sts	0x0572, r25	; 0x800572 <_gMonitor_Controller_Response+0x1>
    1012:	80 93 71 05 	sts	0x0571, r24	; 0x800571 <_gMonitor_Controller_Response>
	
    if(_sWireless_Pump_Data.Resend_Timer)
    1016:	80 91 51 05 	lds	r24, 0x0551	; 0x800551 <_sWireless_Pump_Data+0x16>
    101a:	90 91 52 05 	lds	r25, 0x0552	; 0x800552 <_sWireless_Pump_Data+0x17>
    101e:	00 97       	sbiw	r24, 0x00	; 0
    1020:	29 f0       	breq	.+10     	; 0x102c <__vector_7+0x80>
    {
      _sWireless_Pump_Data.Resend_Timer--;
    1022:	01 97       	sbiw	r24, 0x01	; 1
    1024:	90 93 52 05 	sts	0x0552, r25	; 0x800552 <_sWireless_Pump_Data+0x17>
    1028:	80 93 51 05 	sts	0x0551, r24	; 0x800551 <_sWireless_Pump_Data+0x16>
    }

    if(ct_timer > 9)
    102c:	80 91 11 03 	lds	r24, 0x0311	; 0x800311 <_ZZ10__vector_7E8ct_timer>
    1030:	90 91 12 03 	lds	r25, 0x0312	; 0x800312 <_ZZ10__vector_7E8ct_timer+0x1>
    1034:	0a 97       	sbiw	r24, 0x0a	; 10
    1036:	50 f0       	brcs	.+20     	; 0x104c <__vector_7+0xa0>
    {
	  ct_timer = 0;
    1038:	10 92 12 03 	sts	0x0312, r1	; 0x800312 <_ZZ10__vector_7E8ct_timer+0x1>
    103c:	10 92 11 03 	sts	0x0311, r1	; 0x800311 <_ZZ10__vector_7E8ct_timer>
      _sWireless_Pump_Data.Read_Ct_Value_Timer = _kSET;
    1040:	81 e0       	ldi	r24, 0x01	; 1
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	90 93 4e 05 	sts	0x054E, r25	; 0x80054e <_sWireless_Pump_Data+0x13>
    1048:	80 93 4d 05 	sts	0x054D, r24	; 0x80054d <_sWireless_Pump_Data+0x12>
    }
    ct_timer++;
    104c:	80 91 11 03 	lds	r24, 0x0311	; 0x800311 <_ZZ10__vector_7E8ct_timer>
    1050:	90 91 12 03 	lds	r25, 0x0312	; 0x800312 <_ZZ10__vector_7E8ct_timer+0x1>
    1054:	01 96       	adiw	r24, 0x01	; 1
    1056:	90 93 12 03 	sts	0x0312, r25	; 0x800312 <_ZZ10__vector_7E8ct_timer+0x1>
    105a:	80 93 11 03 	sts	0x0311, r24	; 0x800311 <_ZZ10__vector_7E8ct_timer>

    R_Phase_Fault_Counter++;
    105e:	80 91 7b 05 	lds	r24, 0x057B	; 0x80057b <R_Phase_Fault_Counter>
    1062:	8f 5f       	subi	r24, 0xFF	; 255
    1064:	80 93 7b 05 	sts	0x057B, r24	; 0x80057b <R_Phase_Fault_Counter>
    Y_Phase_Fault_Counter++;
    1068:	80 91 7a 05 	lds	r24, 0x057A	; 0x80057a <Y_Phase_Fault_Counter>
    106c:	8f 5f       	subi	r24, 0xFF	; 255
    106e:	80 93 7a 05 	sts	0x057A, r24	; 0x80057a <Y_Phase_Fault_Counter>
    B_Phase_Fault_Counter++;
    1072:	80 91 79 05 	lds	r24, 0x0579	; 0x800579 <B_Phase_Fault_Counter>
    1076:	8f 5f       	subi	r24, 0xFF	; 255
    1078:	80 93 79 05 	sts	0x0579, r24	; 0x800579 <B_Phase_Fault_Counter>

    R_Phase_Fault_Repair++;
    107c:	80 91 78 05 	lds	r24, 0x0578	; 0x800578 <R_Phase_Fault_Repair>
    1080:	8f 5f       	subi	r24, 0xFF	; 255
    1082:	80 93 78 05 	sts	0x0578, r24	; 0x800578 <R_Phase_Fault_Repair>
    Y_Phase_Fault_Repair++;
    1086:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <Y_Phase_Fault_Repair>
    108a:	8f 5f       	subi	r24, 0xFF	; 255
    108c:	80 93 77 05 	sts	0x0577, r24	; 0x800577 <Y_Phase_Fault_Repair>
    B_Phase_Fault_Repair++;
    1090:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <B_Phase_Fault_Repair>
    1094:	8f 5f       	subi	r24, 0xFF	; 255
    1096:	80 93 76 05 	sts	0x0576, r24	; 0x800576 <B_Phase_Fault_Repair>

    _sWireless_Pump_Data.Counter_To_Read_Faults++;
    109a:	80 91 59 05 	lds	r24, 0x0559	; 0x800559 <_sWireless_Pump_Data+0x1e>
    109e:	90 91 5a 05 	lds	r25, 0x055A	; 0x80055a <_sWireless_Pump_Data+0x1f>
    10a2:	01 96       	adiw	r24, 0x01	; 1
    10a4:	90 93 5a 05 	sts	0x055A, r25	; 0x80055a <_sWireless_Pump_Data+0x1f>
    10a8:	80 93 59 05 	sts	0x0559, r24	; 0x800559 <_sWireless_Pump_Data+0x1e>


    _gTIMER_For_Wdt++;
    10ac:	80 91 73 05 	lds	r24, 0x0573	; 0x800573 <_gTIMER_For_Wdt>
    10b0:	90 91 74 05 	lds	r25, 0x0574	; 0x800574 <_gTIMER_For_Wdt+0x1>
    10b4:	01 96       	adiw	r24, 0x01	; 1
    10b6:	90 93 74 05 	sts	0x0574, r25	; 0x800574 <_gTIMER_For_Wdt+0x1>
    10ba:	80 93 73 05 	sts	0x0573, r24	; 0x800573 <_gTIMER_For_Wdt>
    if(_gcheck_Wdt == _kSET)
    10be:	80 91 75 05 	lds	r24, 0x0575	; 0x800575 <_gcheck_Wdt>
    10c2:	81 30       	cpi	r24, 0x01	; 1
    10c4:	39 f4       	brne	.+14     	; 0x10d4 <__vector_7+0x128>
    {
      if(_gTIMER_For_Wdt < 240)
    10c6:	80 91 73 05 	lds	r24, 0x0573	; 0x800573 <_gTIMER_For_Wdt>
    10ca:	90 91 74 05 	lds	r25, 0x0574	; 0x800574 <_gTIMER_For_Wdt+0x1>
    10ce:	80 3f       	cpi	r24, 0xF0	; 240
    10d0:	91 05       	cpc	r25, r1
    10d2:	08 f4       	brcc	.+2      	; 0x10d6 <__vector_7+0x12a>
        wdt_reset();
      }
    }
    else
    {
      wdt_reset();
    10d4:	a8 95       	wdr
  
  //Phase_Reading_In_Interrupt();
  
  //Interrupt_Analyse_Read_Phases();
  
  Interrupt_Analyse_Read_Phases_New();
    10d6:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <_Z33Interrupt_Analyse_Read_Phases_Newv>
  
  counter++;
    10da:	80 91 13 03 	lds	r24, 0x0313	; 0x800313 <_ZZ10__vector_7E7counter>
    10de:	90 91 14 03 	lds	r25, 0x0314	; 0x800314 <_ZZ10__vector_7E7counter+0x1>
    10e2:	01 96       	adiw	r24, 0x01	; 1
    10e4:	90 93 14 03 	sts	0x0314, r25	; 0x800314 <_ZZ10__vector_7E7counter+0x1>
    10e8:	80 93 13 03 	sts	0x0313, r24	; 0x800313 <_ZZ10__vector_7E7counter>
  OCR2A = _gReload;
    10ec:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <_gReload>
    10f0:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
}
    10f4:	ff 91       	pop	r31
    10f6:	ef 91       	pop	r30
    10f8:	bf 91       	pop	r27
    10fa:	af 91       	pop	r26
    10fc:	9f 91       	pop	r25
    10fe:	8f 91       	pop	r24
    1100:	7f 91       	pop	r23
    1102:	6f 91       	pop	r22
    1104:	5f 91       	pop	r21
    1106:	4f 91       	pop	r20
    1108:	3f 91       	pop	r19
    110a:	2f 91       	pop	r18
    110c:	0f 90       	pop	r0
    110e:	0f be       	out	0x3f, r0	; 63
    1110:	0f 90       	pop	r0
    1112:	1f 90       	pop	r1
    1114:	18 95       	reti

00001116 <_Z13Timer_Settingv>:
}


void Timer_Setting(void)
{
  cli();//stop interrupts
    1116:	f8 94       	cli
  //set timer2 interrupt at 8kHz
  TCCR2A = 0;// set entire TCCR2A register to 0
    1118:	a0 eb       	ldi	r26, 0xB0	; 176
    111a:	b0 e0       	ldi	r27, 0x00	; 0
    111c:	1c 92       	st	X, r1
  TCCR2B = 0;// same for TCCR2B
    111e:	e1 eb       	ldi	r30, 0xB1	; 177
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	10 82       	st	Z, r1
  TCNT2  = 0;//initialize counter value to 0
    1124:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
  // set compare match register for 8khz increments
  OCR2A = _gReload;// = (16*10^6) / (8000*8) - 1 (must be <256)
    1128:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <_gReload>
    112c:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
  // turn on CTC mode
  TCCR2A |= (1 << WGM21);
    1130:	8c 91       	ld	r24, X
    1132:	82 60       	ori	r24, 0x02	; 2
    1134:	8c 93       	st	X, r24
  // Set CS21 bit for 8 prescaler
  TCCR2B |= (1<<CS22) | (1<<CS21) | (1<<CS20);
    1136:	80 81       	ld	r24, Z
    1138:	87 60       	ori	r24, 0x07	; 7
    113a:	80 83       	st	Z, r24
  // enable timer compare interrupt
  TIMSK2 |= (1 << OCIE2A);
    113c:	e0 e7       	ldi	r30, 0x70	; 112
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	80 81       	ld	r24, Z
    1142:	82 60       	ori	r24, 0x02	; 2
    1144:	80 83       	st	Z, r24
  sei();//allow interrupts
    1146:	78 94       	sei
    1148:	08 95       	ret

0000114a <_Z11Read_EEPROMv>:
}


void Read_EEPROM(void)
{
    114a:	0f 93       	push	r16
    114c:	1f 93       	push	r17
    114e:	cf 93       	push	r28
    1150:	df 93       	push	r29
    1152:	01 e3       	ldi	r16, 0x31	; 49
    1154:	15 e0       	ldi	r17, 0x05	; 5
***/

struct EEPtr{

    EEPtr( const int index )
        : index( index )                {}
    1156:	c1 e0       	ldi	r28, 0x01	; 1
    1158:	d0 e0       	ldi	r29, 0x00	; 0

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    115a:	ce 01       	movw	r24, r28
    115c:	0e 94 a9 26 	call	0x4d52	; 0x4d52 <eeprom_read_byte>
    
    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template< typename T > T &get( int idx, T &t ){
        EEPtr e = idx;
        uint8_t *ptr = (uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  *ptr++ = *e;
    1160:	f8 01       	movw	r30, r16
    1162:	81 93       	st	Z+, r24
    1164:	8f 01       	movw	r16, r30
    //Iterator functionality.
    bool operator!=( const EEPtr &ptr ) { return index != ptr.index; }
    EERef operator*()                   { return index; }
    
    /** Prefix & Postfix increment/decrement **/
    EEPtr& operator++()                 { return ++index, *this; }
    1166:	21 96       	adiw	r28, 0x01	; 1
    
    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template< typename T > T &get( int idx, T &t ){
        EEPtr e = idx;
        uint8_t *ptr = (uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  *ptr++ = *e;
    1168:	c5 30       	cpi	r28, 0x05	; 5
    116a:	d1 05       	cpc	r29, r1
    116c:	b1 f7       	brne	.-20     	; 0x115a <_Z11Read_EEPROMv+0x10>

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    116e:	82 e0       	ldi	r24, 0x02	; 2
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	0e 94 a9 26 	call	0x4d52	; 0x4d52 <eeprom_read_byte>
    
    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template< typename T > T &get( int idx, T &t ){
        EEPtr e = idx;
        uint8_t *ptr = (uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  *ptr++ = *e;
    1176:	80 93 5b 05 	sts	0x055B, r24	; 0x80055b <_sWireless_Pump_Data+0x20>
  _kEEPROM_READ(_kEEPROM_LOC_PUMP_NOMINAL_CURRENT,_sPump_Parameter.Pump_Nominal_Current);
  _kEEPROM_READ(_kCT_BY_PASS,_sWireless_Pump_Data.By_Pass_CT);
}
    117a:	df 91       	pop	r29
    117c:	cf 91       	pop	r28
    117e:	1f 91       	pop	r17
    1180:	0f 91       	pop	r16
    1182:	08 95       	ret

00001184 <_Z19Initialise_Hardwarev>:
}


void Initialise_Hardware(void)
{
  Timer_Setting();
    1184:	0e 94 8b 08 	call	0x1116	; 0x1116 <_Z13Timer_Settingv>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    1188:	26 e0       	ldi	r18, 0x06	; 6
    118a:	40 e8       	ldi	r20, 0x80	; 128
    118c:	55 e2       	ldi	r21, 0x25	; 37
    118e:	60 e0       	ldi	r22, 0x00	; 0
    1190:	70 e0       	ldi	r23, 0x00	; 0
    1192:	81 ec       	ldi	r24, 0xC1	; 193
    1194:	96 e0       	ldi	r25, 0x06	; 6
    1196:	0e 94 ee 14 	call	0x29dc	; 0x29dc <_ZN14HardwareSerial5beginEmh>
  
  Serial.begin(9600);
  while (!Serial);
  delay(1000);
    119a:	68 ee       	ldi	r22, 0xE8	; 232
    119c:	73 e0       	ldi	r23, 0x03	; 3
    119e:	80 e0       	ldi	r24, 0x00	; 0
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <delay>
  Serial.println(F("START"));
    11a6:	6d e4       	ldi	r22, 0x4D	; 77
    11a8:	72 e0       	ldi	r23, 0x02	; 2
    11aa:	81 ec       	ldi	r24, 0xC1	; 193
    11ac:	96 e0       	ldi	r25, 0x06	; 6
    11ae:	0e 94 5d 16 	call	0x2cba	; 0x2cba <_ZN5Print7printlnEPK19__FlashStringHelper>
  Serial.print(F("Id: "));
    11b2:	68 e4       	ldi	r22, 0x48	; 72
    11b4:	72 e0       	ldi	r23, 0x02	; 2
    11b6:	81 ec       	ldi	r24, 0xC1	; 193
    11b8:	96 e0       	ldi	r25, 0x06	; 6
    11ba:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <_ZN5Print5printEPK19__FlashStringHelper>
  sprintf((char *)_sWireless_Pump_Data.Wireless_Pump_Id,"PA0035");    /* pump unique ID */
    11be:	68 e8       	ldi	r22, 0x88	; 136
    11c0:	71 e0       	ldi	r23, 0x01	; 1
    11c2:	8b e3       	ldi	r24, 0x3B	; 59
    11c4:	95 e0       	ldi	r25, 0x05	; 5
    11c6:	0e 94 a2 26 	call	0x4d44	; 0x4d44 <strcpy>
  Serial.println((char *)_sWireless_Pump_Data.Wireless_Pump_Id);
    11ca:	6b e3       	ldi	r22, 0x3B	; 59
    11cc:	75 e0       	ldi	r23, 0x05	; 5
    11ce:	81 ec       	ldi	r24, 0xC1	; 193
    11d0:	96 e0       	ldi	r25, 0x06	; 6
    11d2:	0e 94 6f 16 	call	0x2cde	; 0x2cde <_ZN5Print7printlnEPKc>


  Int_Lora();    /* parameters init of lora rf95 */
    11d6:	0e 94 16 0b 	call	0x162c	; 0x162c <_Z8Int_Lorav>

  

   /****************************** output pins *******************/
  pinMode(_kPUMP1,OUTPUT);            /* pump p1 */
    11da:	61 e0       	ldi	r22, 0x01	; 1
    11dc:	89 e0       	ldi	r24, 0x09	; 9
    11de:	0e 94 91 19 	call	0x3322	; 0x3322 <pinMode>
  pinMode(_kPUMP2,OUTPUT);            /* pump p2 */
    11e2:	61 e0       	ldi	r22, 0x01	; 1
    11e4:	88 e0       	ldi	r24, 0x08	; 8
    11e6:	0e 94 91 19 	call	0x3322	; 0x3322 <pinMode>
  pinMode(_kR_PHASE_STATUS,OUTPUT);
    11ea:	61 e0       	ldi	r22, 0x01	; 1
    11ec:	81 e1       	ldi	r24, 0x11	; 17
    11ee:	0e 94 91 19 	call	0x3322	; 0x3322 <pinMode>
  pinMode(_kY_PHASE_STATUS,OUTPUT);
    11f2:	61 e0       	ldi	r22, 0x01	; 1
    11f4:	82 e1       	ldi	r24, 0x12	; 18
    11f6:	0e 94 91 19 	call	0x3322	; 0x3322 <pinMode>
  pinMode(_kB_PHASE_STATUS,OUTPUT);
    11fa:	61 e0       	ldi	r22, 0x01	; 1
    11fc:	83 e1       	ldi	r24, 0x13	; 19
    11fe:	0e 94 91 19 	call	0x3322	; 0x3322 <pinMode>
  pinMode(_kDRY_RUN_STATUS,OUTPUT);
    1202:	61 e0       	ldi	r22, 0x01	; 1
    1204:	83 e0       	ldi	r24, 0x03	; 3
    1206:	0e 94 91 19 	call	0x3322	; 0x3322 <pinMode>
  pinMode(_kLINE_FAULT_STATUS,OUTPUT);
    120a:	61 e0       	ldi	r22, 0x01	; 1
    120c:	83 e0       	ldi	r24, 0x03	; 3
    120e:	0e 94 91 19 	call	0x3322	; 0x3322 <pinMode>
  pinMode(_kPUMP_STATUS,OUTPUT);
    1212:	61 e0       	ldi	r22, 0x01	; 1
    1214:	87 e0       	ldi	r24, 0x07	; 7
    1216:	0e 94 91 19 	call	0x3322	; 0x3322 <pinMode>
  pinMode(_kLORA_CHIP_SELECT,OUTPUT);
    121a:	61 e0       	ldi	r22, 0x01	; 1
    121c:	8a e0       	ldi	r24, 0x0A	; 10
    121e:	0e 94 91 19 	call	0x3322	; 0x3322 <pinMode>

  /*pinMode(_kR_PHASE_INPUT,INPUT);
  pinMode(_kY_PHASE_INPUT,INPUT);
  pinMode(_kB_PHASE_INPUT,INPUT);*/
  
  pinMode(_kAUTO_MANUAL,INPUT);
    1222:	60 e0       	ldi	r22, 0x00	; 0
    1224:	84 e0       	ldi	r24, 0x04	; 4
    1226:	0e 94 91 19 	call	0x3322	; 0x3322 <pinMode>

  Read_EEPROM();          
    122a:	0e 94 a5 08 	call	0x114a	; 0x114a <_Z11Read_EEPROMv>
  /****************************************** set the CT calibration ************************************************/
  RUBLE_PUMP_CURRENT.current(_kADC_PUMP_CUR, _kCT_CALIBRATION_FACTOR);     /* adc pin and calibration factor to read pump running current */
    122e:	20 e0       	ldi	r18, 0x00	; 0
    1230:	30 e0       	ldi	r19, 0x00	; 0
    1232:	40 e7       	ldi	r20, 0x70	; 112
    1234:	51 e4       	ldi	r21, 0x41	; 65
    1236:	64 e1       	ldi	r22, 0x14	; 20
    1238:	70 e0       	ldi	r23, 0x00	; 0
    123a:	85 ed       	ldi	r24, 0xD5	; 213
    123c:	94 e0       	ldi	r25, 0x04	; 4
    123e:	0e 94 25 1a 	call	0x344a	; 0x344a <_ZN13EnergyMonitor7currentEjd>

  Serial.println(F("set up finished"));
    1242:	68 e3       	ldi	r22, 0x38	; 56
    1244:	72 e0       	ldi	r23, 0x02	; 2
    1246:	81 ec       	ldi	r24, 0xC1	; 193
    1248:	96 e0       	ldi	r25, 0x06	; 6
    124a:	0e 94 5d 16 	call	0x2cba	; 0x2cba <_ZN5Print7printlnEPK19__FlashStringHelper>


   /**************** initially pump should be off */
  digitalWrite(_kPUMP1, _kPUMP_OFF);       
    124e:	61 e0       	ldi	r22, 0x01	; 1
    1250:	89 e0       	ldi	r24, 0x09	; 9
    1252:	0e 94 cd 19 	call	0x339a	; 0x339a <digitalWrite>
  digitalWrite(_kPUMP2, _kPUMP_OFF);
    1256:	61 e0       	ldi	r22, 0x01	; 1
    1258:	88 e0       	ldi	r24, 0x08	; 8
    125a:	0e 94 cd 19 	call	0x339a	; 0x339a <digitalWrite>

  
   /************************* all indication should be off ***********************/
  _sWireless_Pump_Data.Indication_Of_Faults  = _kRESET;
    125e:	eb e3       	ldi	r30, 0x3B	; 59
    1260:	f5 e0       	ldi	r31, 0x05	; 5
    1262:	11 8a       	std	Z+17, r1	; 0x11
    1264:	10 8a       	std	Z+16, r1	; 0x10


   /*************************** asign phases to buffer ******************/ 
  _sWireless_Pump_Data.Phase_List[0] = _kR_PHASE_INPUT;
    1266:	8e e0       	ldi	r24, 0x0E	; 14
    1268:	80 8f       	std	Z+24, r24	; 0x18
  _sWireless_Pump_Data.Phase_List[1] = _kY_PHASE_INPUT;
    126a:	8f e0       	ldi	r24, 0x0F	; 15
    126c:	81 8f       	std	Z+25, r24	; 0x19
  _sWireless_Pump_Data.Phase_List[2] = _kB_PHASE_INPUT;
    126e:	80 e1       	ldi	r24, 0x10	; 16
    1270:	82 8f       	std	Z+26, r24	; 0x1a
    1272:	08 95       	ret

00001274 <_Z21Transmit_Fault_Packetc>:
	rf95.setTxPower(20, false);

	Serial.println(F("Spreading factor is : "));
	Serial.println(_kSPREADING_FACTOR);
	rf95.setSpreadingFactor(11);
    1274:	af 92       	push	r10
    1276:	bf 92       	push	r11
    1278:	cf 92       	push	r12
    127a:	df 92       	push	r13
    127c:	ef 92       	push	r14
    127e:	ff 92       	push	r15
    1280:	0f 93       	push	r16
    1282:	1f 93       	push	r17
    1284:	cf 93       	push	r28
    1286:	df 93       	push	r29
    1288:	1f 92       	push	r1
    128a:	cd b7       	in	r28, 0x3d	; 61
    128c:	de b7       	in	r29, 0x3e	; 62
    128e:	80 91 51 05 	lds	r24, 0x0551	; 0x800551 <_sWireless_Pump_Data+0x16>
    1292:	90 91 52 05 	lds	r25, 0x0552	; 0x800552 <_sWireless_Pump_Data+0x17>
    1296:	89 2b       	or	r24, r25
    1298:	09 f0       	breq	.+2      	; 0x129c <_Z21Transmit_Fault_Packetc+0x28>
    129a:	ba c1       	rjmp	.+884    	; 0x1610 <_Z21Transmit_Fault_Packetc+0x39c>
    129c:	20 91 50 05 	lds	r18, 0x0550	; 0x800550 <_sWireless_Pump_Data+0x15>
    12a0:	82 2f       	mov	r24, r18
    12a2:	83 70       	andi	r24, 0x03	; 3
    12a4:	29 f4       	brne	.+10     	; 0x12b0 <_Z21Transmit_Fault_Packetc+0x3c>
    12a6:	20 91 50 05 	lds	r18, 0x0550	; 0x800550 <_sWireless_Pump_Data+0x15>
    12aa:	22 ff       	sbrs	r18, 2
    12ac:	37 c1       	rjmp	.+622    	; 0x151c <_Z21Transmit_Fault_Packetc+0x2a8>
    12ae:	d3 c0       	rjmp	.+422    	; 0x1456 <_Z21Transmit_Fault_Packetc+0x1e2>
    12b0:	84 e1       	ldi	r24, 0x14	; 20
    12b2:	e7 e7       	ldi	r30, 0x77	; 119
    12b4:	f6 e0       	ldi	r31, 0x06	; 6
    12b6:	df 01       	movw	r26, r30
    12b8:	1d 92       	st	X+, r1
    12ba:	8a 95       	dec	r24
    12bc:	e9 f7       	brne	.-6      	; 0x12b8 <_Z21Transmit_Fault_Packetc+0x44>
    12be:	eb e3       	ldi	r30, 0x3B	; 59
    12c0:	f5 e0       	ldi	r31, 0x05	; 5
    12c2:	80 e0       	ldi	r24, 0x00	; 0
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	31 91       	ld	r19, Z+
    12c8:	dc 01       	movw	r26, r24
    12ca:	a9 58       	subi	r26, 0x89	; 137
    12cc:	b9 4f       	sbci	r27, 0xF9	; 249
    12ce:	3c 93       	st	X, r19
    12d0:	01 96       	adiw	r24, 0x01	; 1
    12d2:	86 30       	cpi	r24, 0x06	; 6
    12d4:	91 05       	cpc	r25, r1
    12d6:	b9 f7       	brne	.-18     	; 0x12c6 <_Z21Transmit_Fault_Packetc+0x52>
    12d8:	82 e0       	ldi	r24, 0x02	; 2
    12da:	80 93 7d 06 	sts	0x067D, r24	; 0x80067d <Transmit_Data+0x6>
    12de:	20 93 7e 06 	sts	0x067E, r18	; 0x80067e <Transmit_Data+0x7>
    12e2:	52 e0       	ldi	r21, 0x02	; 2
    12e4:	f5 2e       	mov	r15, r21
    12e6:	6b ef       	ldi	r22, 0xFB	; 251
    12e8:	e6 2e       	mov	r14, r22
    12ea:	79 e1       	ldi	r23, 0x19	; 25
    12ec:	a7 2e       	mov	r10, r23
    12ee:	b1 2c       	mov	r11, r1
    12f0:	e9 82       	std	Y+1, r14	; 0x01
    12f2:	85 e1       	ldi	r24, 0x15	; 21
    12f4:	93 e0       	ldi	r25, 0x03	; 3
    12f6:	0e 94 52 1f 	call	0x3ea4	; 0x3ea4 <_ZN7RH_RF959availableEv>
    12fa:	88 23       	and	r24, r24
    12fc:	49 f0       	breq	.+18     	; 0x1310 <_Z21Transmit_Fault_Packetc+0x9c>
    12fe:	ae 01       	movw	r20, r28
    1300:	4f 5f       	subi	r20, 0xFF	; 255
    1302:	5f 4f       	sbci	r21, 0xFF	; 255
    1304:	6c e7       	ldi	r22, 0x7C	; 124
    1306:	75 e0       	ldi	r23, 0x05	; 5
    1308:	85 e1       	ldi	r24, 0x15	; 21
    130a:	93 e0       	ldi	r25, 0x03	; 3
    130c:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <_ZN7RH_RF954recvEPhS0_>
    1310:	64 e0       	ldi	r22, 0x04	; 4
    1312:	73 e0       	ldi	r23, 0x03	; 3
    1314:	81 ec       	ldi	r24, 0xC1	; 193
    1316:	96 e0       	ldi	r25, 0x06	; 6
    1318:	0e 94 5d 16 	call	0x2cba	; 0x2cba <_ZN5Print7printlnEPK19__FlashStringHelper>
    131c:	48 e0       	ldi	r20, 0x08	; 8
    131e:	67 e7       	ldi	r22, 0x77	; 119
    1320:	76 e0       	ldi	r23, 0x06	; 6
    1322:	85 e1       	ldi	r24, 0x15	; 21
    1324:	93 e0       	ldi	r25, 0x03	; 3
    1326:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <_ZN7RH_RF954sendEPKhh>
    132a:	60 ed       	ldi	r22, 0xD0	; 208
    132c:	77 e0       	ldi	r23, 0x07	; 7
    132e:	85 e1       	ldi	r24, 0x15	; 21
    1330:	93 e0       	ldi	r25, 0x03	; 3
    1332:	0e 94 c8 1b 	call	0x3790	; 0x3790 <_ZN15RHGenericDriver14waitPacketSentEj>
    1336:	6c ee       	ldi	r22, 0xEC	; 236
    1338:	72 e0       	ldi	r23, 0x02	; 2
    133a:	81 ec       	ldi	r24, 0xC1	; 193
    133c:	96 e0       	ldi	r25, 0x06	; 6
    133e:	0e 94 5d 16 	call	0x2cba	; 0x2cba <_ZN5Print7printlnEPK19__FlashStringHelper>
    1342:	68 eb       	ldi	r22, 0xB8	; 184
    1344:	7b e0       	ldi	r23, 0x0B	; 11
    1346:	85 e1       	ldi	r24, 0x15	; 21
    1348:	93 e0       	ldi	r25, 0x03	; 3
    134a:	0e 94 91 1b 	call	0x3722	; 0x3722 <_ZN15RHGenericDriver20waitAvailableTimeoutEj>
    134e:	88 23       	and	r24, r24
    1350:	09 f4       	brne	.+2      	; 0x1354 <_Z21Transmit_Fault_Packetc+0xe0>
    1352:	78 c0       	rjmp	.+240    	; 0x1444 <_Z21Transmit_Fault_Packetc+0x1d0>
    1354:	ae 01       	movw	r20, r28
    1356:	4f 5f       	subi	r20, 0xFF	; 255
    1358:	5f 4f       	sbci	r21, 0xFF	; 255
    135a:	6c e7       	ldi	r22, 0x7C	; 124
    135c:	75 e0       	ldi	r23, 0x05	; 5
    135e:	85 e1       	ldi	r24, 0x15	; 21
    1360:	93 e0       	ldi	r25, 0x03	; 3
    1362:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <_ZN7RH_RF954recvEPhS0_>
    1366:	88 23       	and	r24, r24
    1368:	09 f4       	brne	.+2      	; 0x136c <_Z21Transmit_Fault_Packetc+0xf8>
    136a:	42 c0       	rjmp	.+132    	; 0x13f0 <_Z21Transmit_Fault_Packetc+0x17c>
    136c:	63 ee       	ldi	r22, 0xE3	; 227
    136e:	72 e0       	ldi	r23, 0x02	; 2
    1370:	81 ec       	ldi	r24, 0xC1	; 193
    1372:	96 e0       	ldi	r25, 0x06	; 6
    1374:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <_ZN5Print5printEPK19__FlashStringHelper>
    1378:	60 91 7c 05 	lds	r22, 0x057C	; 0x80057c <buff>
    137c:	81 ec       	ldi	r24, 0xC1	; 193
    137e:	96 e0       	ldi	r25, 0x06	; 6
    1380:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <_ZN5Print5printEc>
    1384:	60 91 7d 05 	lds	r22, 0x057D	; 0x80057d <buff+0x1>
    1388:	81 ec       	ldi	r24, 0xC1	; 193
    138a:	96 e0       	ldi	r25, 0x06	; 6
    138c:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <_ZN5Print5printEc>
    1390:	60 91 7e 05 	lds	r22, 0x057E	; 0x80057e <buff+0x2>
    1394:	81 ec       	ldi	r24, 0xC1	; 193
    1396:	96 e0       	ldi	r25, 0x06	; 6
    1398:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <_ZN5Print5printEc>
    139c:	60 91 7f 05 	lds	r22, 0x057F	; 0x80057f <buff+0x3>
    13a0:	81 ec       	ldi	r24, 0xC1	; 193
    13a2:	96 e0       	ldi	r25, 0x06	; 6
    13a4:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <_ZN5Print5printEc>
    13a8:	60 91 80 05 	lds	r22, 0x0580	; 0x800580 <buff+0x4>
    13ac:	81 ec       	ldi	r24, 0xC1	; 193
    13ae:	96 e0       	ldi	r25, 0x06	; 6
    13b0:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <_ZN5Print5printEc>
    13b4:	60 91 81 05 	lds	r22, 0x0581	; 0x800581 <buff+0x5>
    13b8:	81 ec       	ldi	r24, 0xC1	; 193
    13ba:	96 e0       	ldi	r25, 0x06	; 6
    13bc:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <_ZN5Print5printEc>
    13c0:	60 91 82 05 	lds	r22, 0x0582	; 0x800582 <buff+0x6>
    13c4:	4a e0       	ldi	r20, 0x0A	; 10
    13c6:	50 e0       	ldi	r21, 0x00	; 0
    13c8:	81 ec       	ldi	r24, 0xC1	; 193
    13ca:	96 e0       	ldi	r25, 0x06	; 6
    13cc:	0e 94 d7 16 	call	0x2dae	; 0x2dae <_ZN5Print5printEhi>
    13d0:	60 91 83 05 	lds	r22, 0x0583	; 0x800583 <buff+0x7>
    13d4:	4a e0       	ldi	r20, 0x0A	; 10
    13d6:	50 e0       	ldi	r21, 0x00	; 0
    13d8:	81 ec       	ldi	r24, 0xC1	; 193
    13da:	96 e0       	ldi	r25, 0x06	; 6
    13dc:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <_ZN5Print7printlnEhi>
    13e0:	60 91 84 05 	lds	r22, 0x0584	; 0x800584 <buff+0x8>
    13e4:	4a e0       	ldi	r20, 0x0A	; 10
    13e6:	50 e0       	ldi	r21, 0x00	; 0
    13e8:	81 ec       	ldi	r24, 0xC1	; 193
    13ea:	96 e0       	ldi	r25, 0x06	; 6
    13ec:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <_ZN5Print7printlnEhi>
    13f0:	4b e3       	ldi	r20, 0x3B	; 59
    13f2:	c4 2e       	mov	r12, r20
    13f4:	45 e0       	ldi	r20, 0x05	; 5
    13f6:	d4 2e       	mov	r13, r20
    13f8:	00 e0       	ldi	r16, 0x00	; 0
    13fa:	10 e0       	ldi	r17, 0x00	; 0
    13fc:	f8 01       	movw	r30, r16
    13fe:	e4 58       	subi	r30, 0x84	; 132
    1400:	fa 4f       	sbci	r31, 0xFA	; 250
    1402:	90 81       	ld	r25, Z
    1404:	f6 01       	movw	r30, r12
    1406:	81 91       	ld	r24, Z+
    1408:	6f 01       	movw	r12, r30
    140a:	98 17       	cp	r25, r24
    140c:	31 f0       	breq	.+12     	; 0x141a <_Z21Transmit_Fault_Packetc+0x1a6>
    140e:	6f e8       	ldi	r22, 0x8F	; 143
    1410:	71 e0       	ldi	r23, 0x01	; 1
    1412:	81 ec       	ldi	r24, 0xC1	; 193
    1414:	96 e0       	ldi	r25, 0x06	; 6
    1416:	0e 94 6f 16 	call	0x2cde	; 0x2cde <_ZN5Print7printlnEPKc>
    141a:	0f 5f       	subi	r16, 0xFF	; 255
    141c:	1f 4f       	sbci	r17, 0xFF	; 255
    141e:	06 30       	cpi	r16, 0x06	; 6
    1420:	11 05       	cpc	r17, r1
    1422:	61 f7       	brne	.-40     	; 0x13fc <_Z21Transmit_Fault_Packetc+0x188>
    1424:	80 91 82 05 	lds	r24, 0x0582	; 0x800582 <buff+0x6>
    1428:	81 30       	cpi	r24, 0x01	; 1
    142a:	61 f4       	brne	.+24     	; 0x1444 <_Z21Transmit_Fault_Packetc+0x1d0>
    142c:	80 91 50 05 	lds	r24, 0x0550	; 0x800550 <_sWireless_Pump_Data+0x15>
    1430:	8c 7f       	andi	r24, 0xFC	; 252
    1432:	80 93 50 05 	sts	0x0550, r24	; 0x800550 <_sWireless_Pump_Data+0x15>
    1436:	10 92 52 05 	sts	0x0552, r1	; 0x800552 <_sWireless_Pump_Data+0x17>
    143a:	10 92 51 05 	sts	0x0551, r1	; 0x800551 <_sWireless_Pump_Data+0x16>
    143e:	81 e0       	ldi	r24, 0x01	; 1
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	e8 c0       	rjmp	.+464    	; 0x1614 <_Z21Transmit_Fault_Packetc+0x3a0>
    1444:	b0 92 52 05 	sts	0x0552, r11	; 0x800552 <_sWireless_Pump_Data+0x17>
    1448:	a0 92 51 05 	sts	0x0551, r10	; 0x800551 <_sWireless_Pump_Data+0x16>
    144c:	fa 94       	dec	r15
    144e:	ff 20       	and	r15, r15
    1450:	09 f4       	brne	.+2      	; 0x1454 <_Z21Transmit_Fault_Packetc+0x1e0>
    1452:	29 cf       	rjmp	.-430    	; 0x12a6 <_Z21Transmit_Fault_Packetc+0x32>
    1454:	4d cf       	rjmp	.-358    	; 0x12f0 <_Z21Transmit_Fault_Packetc+0x7c>
    1456:	84 e1       	ldi	r24, 0x14	; 20
    1458:	e7 e7       	ldi	r30, 0x77	; 119
    145a:	f6 e0       	ldi	r31, 0x06	; 6
    145c:	df 01       	movw	r26, r30
    145e:	1d 92       	st	X+, r1
    1460:	8a 95       	dec	r24
    1462:	e9 f7       	brne	.-6      	; 0x145e <_Z21Transmit_Fault_Packetc+0x1ea>
    1464:	eb e3       	ldi	r30, 0x3B	; 59
    1466:	f5 e0       	ldi	r31, 0x05	; 5
    1468:	80 e0       	ldi	r24, 0x00	; 0
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	31 91       	ld	r19, Z+
    146e:	dc 01       	movw	r26, r24
    1470:	a9 58       	subi	r26, 0x89	; 137
    1472:	b9 4f       	sbci	r27, 0xF9	; 249
    1474:	3c 93       	st	X, r19
    1476:	01 96       	adiw	r24, 0x01	; 1
    1478:	86 30       	cpi	r24, 0x06	; 6
    147a:	91 05       	cpc	r25, r1
    147c:	b9 f7       	brne	.-18     	; 0x146c <_Z21Transmit_Fault_Packetc+0x1f8>
    147e:	83 e0       	ldi	r24, 0x03	; 3
    1480:	80 93 7d 06 	sts	0x067D, r24	; 0x80067d <Transmit_Data+0x6>
    1484:	20 93 7e 06 	sts	0x067E, r18	; 0x80067e <Transmit_Data+0x7>
    1488:	80 91 4b 05 	lds	r24, 0x054B	; 0x80054b <_sWireless_Pump_Data+0x10>
    148c:	90 91 4c 05 	lds	r25, 0x054C	; 0x80054c <_sWireless_Pump_Data+0x11>
    1490:	90 93 7f 06 	sts	0x067F, r25	; 0x80067f <Transmit_Data+0x8>
    1494:	80 93 80 06 	sts	0x0680, r24	; 0x800680 <Transmit_Data+0x9>
    1498:	82 e0       	ldi	r24, 0x02	; 2
    149a:	80 93 81 06 	sts	0x0681, r24	; 0x800681 <Transmit_Data+0xa>
    149e:	92 e0       	ldi	r25, 0x02	; 2
    14a0:	f9 2e       	mov	r15, r25
    14a2:	2b ef       	ldi	r18, 0xFB	; 251
    14a4:	e2 2e       	mov	r14, r18
    14a6:	39 e1       	ldi	r19, 0x19	; 25
    14a8:	a3 2e       	mov	r10, r19
    14aa:	b1 2c       	mov	r11, r1
    14ac:	e9 82       	std	Y+1, r14	; 0x01
    14ae:	85 e1       	ldi	r24, 0x15	; 21
    14b0:	93 e0       	ldi	r25, 0x03	; 3
    14b2:	0e 94 52 1f 	call	0x3ea4	; 0x3ea4 <_ZN7RH_RF959availableEv>
    14b6:	88 23       	and	r24, r24
    14b8:	49 f0       	breq	.+18     	; 0x14cc <_Z21Transmit_Fault_Packetc+0x258>
    14ba:	ae 01       	movw	r20, r28
    14bc:	4f 5f       	subi	r20, 0xFF	; 255
    14be:	5f 4f       	sbci	r21, 0xFF	; 255
    14c0:	6c e7       	ldi	r22, 0x7C	; 124
    14c2:	75 e0       	ldi	r23, 0x05	; 5
    14c4:	85 e1       	ldi	r24, 0x15	; 21
    14c6:	93 e0       	ldi	r25, 0x03	; 3
    14c8:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <_ZN7RH_RF954recvEPhS0_>
    14cc:	60 ed       	ldi	r22, 0xD0	; 208
    14ce:	72 e0       	ldi	r23, 0x02	; 2
    14d0:	81 ec       	ldi	r24, 0xC1	; 193
    14d2:	96 e0       	ldi	r25, 0x06	; 6
    14d4:	0e 94 5d 16 	call	0x2cba	; 0x2cba <_ZN5Print7printlnEPK19__FlashStringHelper>
    14d8:	4b e0       	ldi	r20, 0x0B	; 11
    14da:	67 e7       	ldi	r22, 0x77	; 119
    14dc:	76 e0       	ldi	r23, 0x06	; 6
    14de:	85 e1       	ldi	r24, 0x15	; 21
    14e0:	93 e0       	ldi	r25, 0x03	; 3
    14e2:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <_ZN7RH_RF954sendEPKhh>
    14e6:	60 ed       	ldi	r22, 0xD0	; 208
    14e8:	77 e0       	ldi	r23, 0x07	; 7
    14ea:	85 e1       	ldi	r24, 0x15	; 21
    14ec:	93 e0       	ldi	r25, 0x03	; 3
    14ee:	0e 94 c8 1b 	call	0x3790	; 0x3790 <_ZN15RHGenericDriver14waitPacketSentEj>
    14f2:	68 eb       	ldi	r22, 0xB8	; 184
    14f4:	72 e0       	ldi	r23, 0x02	; 2
    14f6:	81 ec       	ldi	r24, 0xC1	; 193
    14f8:	96 e0       	ldi	r25, 0x06	; 6
    14fa:	0e 94 5d 16 	call	0x2cba	; 0x2cba <_ZN5Print7printlnEPK19__FlashStringHelper>
    14fe:	68 eb       	ldi	r22, 0xB8	; 184
    1500:	7b e0       	ldi	r23, 0x0B	; 11
    1502:	85 e1       	ldi	r24, 0x15	; 21
    1504:	93 e0       	ldi	r25, 0x03	; 3
    1506:	0e 94 91 1b 	call	0x3722	; 0x3722 <_ZN15RHGenericDriver20waitAvailableTimeoutEj>
    150a:	81 11       	cpse	r24, r1
    150c:	08 c0       	rjmp	.+16     	; 0x151e <_Z21Transmit_Fault_Packetc+0x2aa>
    150e:	b0 92 52 05 	sts	0x0552, r11	; 0x800552 <_sWireless_Pump_Data+0x17>
    1512:	a0 92 51 05 	sts	0x0551, r10	; 0x800551 <_sWireless_Pump_Data+0x16>
    1516:	fa 94       	dec	r15
    1518:	f1 10       	cpse	r15, r1
    151a:	c8 cf       	rjmp	.-112    	; 0x14ac <_Z21Transmit_Fault_Packetc+0x238>
    151c:	7b c0       	rjmp	.+246    	; 0x1614 <_Z21Transmit_Fault_Packetc+0x3a0>
    151e:	ae 01       	movw	r20, r28
    1520:	4f 5f       	subi	r20, 0xFF	; 255
    1522:	5f 4f       	sbci	r21, 0xFF	; 255
    1524:	6c e7       	ldi	r22, 0x7C	; 124
    1526:	75 e0       	ldi	r23, 0x05	; 5
    1528:	85 e1       	ldi	r24, 0x15	; 21
    152a:	93 e0       	ldi	r25, 0x03	; 3
    152c:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <_ZN7RH_RF954recvEPhS0_>
    1530:	88 23       	and	r24, r24
    1532:	09 f4       	brne	.+2      	; 0x1536 <_Z21Transmit_Fault_Packetc+0x2c2>
    1534:	42 c0       	rjmp	.+132    	; 0x15ba <_Z21Transmit_Fault_Packetc+0x346>
    1536:	6f ea       	ldi	r22, 0xAF	; 175
    1538:	72 e0       	ldi	r23, 0x02	; 2
    153a:	81 ec       	ldi	r24, 0xC1	; 193
    153c:	96 e0       	ldi	r25, 0x06	; 6
    153e:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <_ZN5Print5printEPK19__FlashStringHelper>
    1542:	60 91 7c 05 	lds	r22, 0x057C	; 0x80057c <buff>
    1546:	81 ec       	ldi	r24, 0xC1	; 193
    1548:	96 e0       	ldi	r25, 0x06	; 6
    154a:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <_ZN5Print5printEc>
    154e:	60 91 7d 05 	lds	r22, 0x057D	; 0x80057d <buff+0x1>
    1552:	81 ec       	ldi	r24, 0xC1	; 193
    1554:	96 e0       	ldi	r25, 0x06	; 6
    1556:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <_ZN5Print5printEc>
    155a:	60 91 7e 05 	lds	r22, 0x057E	; 0x80057e <buff+0x2>
    155e:	81 ec       	ldi	r24, 0xC1	; 193
    1560:	96 e0       	ldi	r25, 0x06	; 6
    1562:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <_ZN5Print5printEc>
    1566:	60 91 7f 05 	lds	r22, 0x057F	; 0x80057f <buff+0x3>
    156a:	81 ec       	ldi	r24, 0xC1	; 193
    156c:	96 e0       	ldi	r25, 0x06	; 6
    156e:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <_ZN5Print5printEc>
    1572:	60 91 80 05 	lds	r22, 0x0580	; 0x800580 <buff+0x4>
    1576:	81 ec       	ldi	r24, 0xC1	; 193
    1578:	96 e0       	ldi	r25, 0x06	; 6
    157a:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <_ZN5Print5printEc>
    157e:	60 91 81 05 	lds	r22, 0x0581	; 0x800581 <buff+0x5>
    1582:	81 ec       	ldi	r24, 0xC1	; 193
    1584:	96 e0       	ldi	r25, 0x06	; 6
    1586:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <_ZN5Print5printEc>
    158a:	60 91 82 05 	lds	r22, 0x0582	; 0x800582 <buff+0x6>
    158e:	4a e0       	ldi	r20, 0x0A	; 10
    1590:	50 e0       	ldi	r21, 0x00	; 0
    1592:	81 ec       	ldi	r24, 0xC1	; 193
    1594:	96 e0       	ldi	r25, 0x06	; 6
    1596:	0e 94 d7 16 	call	0x2dae	; 0x2dae <_ZN5Print5printEhi>
    159a:	60 91 83 05 	lds	r22, 0x0583	; 0x800583 <buff+0x7>
    159e:	4a e0       	ldi	r20, 0x0A	; 10
    15a0:	50 e0       	ldi	r21, 0x00	; 0
    15a2:	81 ec       	ldi	r24, 0xC1	; 193
    15a4:	96 e0       	ldi	r25, 0x06	; 6
    15a6:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <_ZN5Print7printlnEhi>
    15aa:	60 91 84 05 	lds	r22, 0x0584	; 0x800584 <buff+0x8>
    15ae:	4a e0       	ldi	r20, 0x0A	; 10
    15b0:	50 e0       	ldi	r21, 0x00	; 0
    15b2:	81 ec       	ldi	r24, 0xC1	; 193
    15b4:	96 e0       	ldi	r25, 0x06	; 6
    15b6:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <_ZN5Print7printlnEhi>
    15ba:	8b e3       	ldi	r24, 0x3B	; 59
    15bc:	c8 2e       	mov	r12, r24
    15be:	85 e0       	ldi	r24, 0x05	; 5
    15c0:	d8 2e       	mov	r13, r24
    15c2:	00 e0       	ldi	r16, 0x00	; 0
    15c4:	10 e0       	ldi	r17, 0x00	; 0
    15c6:	f8 01       	movw	r30, r16
    15c8:	e4 58       	subi	r30, 0x84	; 132
    15ca:	fa 4f       	sbci	r31, 0xFA	; 250
    15cc:	90 81       	ld	r25, Z
    15ce:	f6 01       	movw	r30, r12
    15d0:	81 91       	ld	r24, Z+
    15d2:	6f 01       	movw	r12, r30
    15d4:	98 17       	cp	r25, r24
    15d6:	31 f0       	breq	.+12     	; 0x15e4 <_Z21Transmit_Fault_Packetc+0x370>
    15d8:	6f e8       	ldi	r22, 0x8F	; 143
    15da:	71 e0       	ldi	r23, 0x01	; 1
    15dc:	81 ec       	ldi	r24, 0xC1	; 193
    15de:	96 e0       	ldi	r25, 0x06	; 6
    15e0:	0e 94 6f 16 	call	0x2cde	; 0x2cde <_ZN5Print7printlnEPKc>
    15e4:	0f 5f       	subi	r16, 0xFF	; 255
    15e6:	1f 4f       	sbci	r17, 0xFF	; 255
    15e8:	06 30       	cpi	r16, 0x06	; 6
    15ea:	11 05       	cpc	r17, r1
    15ec:	61 f7       	brne	.-40     	; 0x15c6 <_Z21Transmit_Fault_Packetc+0x352>
    15ee:	80 91 82 05 	lds	r24, 0x0582	; 0x800582 <buff+0x6>
    15f2:	81 30       	cpi	r24, 0x01	; 1
    15f4:	09 f0       	breq	.+2      	; 0x15f8 <_Z21Transmit_Fault_Packetc+0x384>
    15f6:	8b cf       	rjmp	.-234    	; 0x150e <_Z21Transmit_Fault_Packetc+0x29a>
    15f8:	80 91 50 05 	lds	r24, 0x0550	; 0x800550 <_sWireless_Pump_Data+0x15>
    15fc:	8b 7f       	andi	r24, 0xFB	; 251
    15fe:	80 93 50 05 	sts	0x0550, r24	; 0x800550 <_sWireless_Pump_Data+0x15>
    1602:	10 92 52 05 	sts	0x0552, r1	; 0x800552 <_sWireless_Pump_Data+0x17>
    1606:	10 92 51 05 	sts	0x0551, r1	; 0x800551 <_sWireless_Pump_Data+0x16>
    160a:	81 e0       	ldi	r24, 0x01	; 1
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	02 c0       	rjmp	.+4      	; 0x1614 <_Z21Transmit_Fault_Packetc+0x3a0>
    1610:	80 e0       	ldi	r24, 0x00	; 0
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	0f 90       	pop	r0
    1616:	df 91       	pop	r29
    1618:	cf 91       	pop	r28
    161a:	1f 91       	pop	r17
    161c:	0f 91       	pop	r16
    161e:	ff 90       	pop	r15
    1620:	ef 90       	pop	r14
    1622:	df 90       	pop	r13
    1624:	cf 90       	pop	r12
    1626:	bf 90       	pop	r11
    1628:	af 90       	pop	r10
    162a:	08 95       	ret

0000162c <_Z8Int_Lorav>:
    162c:	85 e1       	ldi	r24, 0x15	; 21
    162e:	93 e0       	ldi	r25, 0x03	; 3
    1630:	0e 94 48 20 	call	0x4090	; 0x4090 <_ZN7RH_RF954initEv>
    1634:	81 11       	cpse	r24, r1
    1636:	06 c0       	rjmp	.+12     	; 0x1644 <_Z8Int_Lorav+0x18>
    1638:	62 ea       	ldi	r22, 0xA2	; 162
    163a:	72 e0       	ldi	r23, 0x02	; 2
    163c:	81 ec       	ldi	r24, 0xC1	; 193
    163e:	96 e0       	ldi	r25, 0x06	; 6
    1640:	0e 94 5d 16 	call	0x2cba	; 0x2cba <_ZN5Print7printlnEPK19__FlashStringHelper>
    1644:	40 e0       	ldi	r20, 0x00	; 0
    1646:	54 e4       	ldi	r21, 0x44	; 68
    1648:	68 e5       	ldi	r22, 0x58	; 88
    164a:	74 e4       	ldi	r23, 0x44	; 68
    164c:	85 e1       	ldi	r24, 0x15	; 21
    164e:	93 e0       	ldi	r25, 0x03	; 3
    1650:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <_ZN7RH_RF9512setFrequencyEf>
    1654:	81 11       	cpse	r24, r1
    1656:	06 c0       	rjmp	.+12     	; 0x1664 <_Z8Int_Lorav+0x38>
    1658:	6c e8       	ldi	r22, 0x8C	; 140
    165a:	72 e0       	ldi	r23, 0x02	; 2
    165c:	81 ec       	ldi	r24, 0xC1	; 193
    165e:	96 e0       	ldi	r25, 0x06	; 6
    1660:	0e 94 5d 16 	call	0x2cba	; 0x2cba <_ZN5Print7printlnEPK19__FlashStringHelper>
    1664:	60 e0       	ldi	r22, 0x00	; 0
    1666:	85 e1       	ldi	r24, 0x15	; 21
    1668:	93 e0       	ldi	r25, 0x03	; 3
    166a:	0e 94 0c 20 	call	0x4018	; 0x4018 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>
    166e:	81 11       	cpse	r24, r1
    1670:	06 c0       	rjmp	.+12     	; 0x167e <_Z8Int_Lorav+0x52>
    1672:	6e e7       	ldi	r22, 0x7E	; 126
    1674:	72 e0       	ldi	r23, 0x02	; 2
    1676:	81 ec       	ldi	r24, 0xC1	; 193
    1678:	96 e0       	ldi	r25, 0x06	; 6
    167a:	0e 94 5d 16 	call	0x2cba	; 0x2cba <_ZN5Print7printlnEPK19__FlashStringHelper>
    167e:	6a e6       	ldi	r22, 0x6A	; 106
    1680:	72 e0       	ldi	r23, 0x02	; 2
    1682:	81 ec       	ldi	r24, 0xC1	; 193
    1684:	96 e0       	ldi	r25, 0x06	; 6
    1686:	0e 94 5d 16 	call	0x2cba	; 0x2cba <_ZN5Print7printlnEPK19__FlashStringHelper>
    168a:	4a e0       	ldi	r20, 0x0A	; 10
    168c:	50 e0       	ldi	r21, 0x00	; 0
    168e:	64 e1       	ldi	r22, 0x14	; 20
    1690:	70 e0       	ldi	r23, 0x00	; 0
    1692:	81 ec       	ldi	r24, 0xC1	; 193
    1694:	96 e0       	ldi	r25, 0x06	; 6
    1696:	0e 94 57 17 	call	0x2eae	; 0x2eae <_ZN5Print7printlnEii>
    169a:	40 e0       	ldi	r20, 0x00	; 0
    169c:	64 e1       	ldi	r22, 0x14	; 20
    169e:	85 e1       	ldi	r24, 0x15	; 21
    16a0:	93 e0       	ldi	r25, 0x03	; 3
    16a2:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <_ZN7RH_RF9510setTxPowerEab>
    16a6:	63 e5       	ldi	r22, 0x53	; 83
    16a8:	72 e0       	ldi	r23, 0x02	; 2
    16aa:	81 ec       	ldi	r24, 0xC1	; 193
    16ac:	96 e0       	ldi	r25, 0x06	; 6
    16ae:	0e 94 5d 16 	call	0x2cba	; 0x2cba <_ZN5Print7printlnEPK19__FlashStringHelper>
    16b2:	4a e0       	ldi	r20, 0x0A	; 10
    16b4:	50 e0       	ldi	r21, 0x00	; 0
    16b6:	6b e0       	ldi	r22, 0x0B	; 11
    16b8:	70 e0       	ldi	r23, 0x00	; 0
    16ba:	81 ec       	ldi	r24, 0xC1	; 193
    16bc:	96 e0       	ldi	r25, 0x06	; 6
    16be:	0e 94 57 17 	call	0x2eae	; 0x2eae <_ZN5Print7printlnEii>
    16c2:	6b e0       	ldi	r22, 0x0B	; 11
    16c4:	85 e1       	ldi	r24, 0x15	; 21
    16c6:	93 e0       	ldi	r25, 0x03	; 3
    16c8:	0e 94 4d 21 	call	0x429a	; 0x429a <_ZN7RH_RF9518setSpreadingFactorEh>
    16cc:	08 95       	ret

000016ce <_GLOBAL__sub_I_rf95>:
    16ce:	27 e6       	ldi	r18, 0x67	; 103
    16d0:	37 e0       	ldi	r19, 0x07	; 7
    16d2:	42 e0       	ldi	r20, 0x02	; 2
    16d4:	6a e0       	ldi	r22, 0x0A	; 10
    16d6:	85 e1       	ldi	r24, 0x15	; 21
    16d8:	93 e0       	ldi	r25, 0x03	; 3
    16da:	0c 94 76 1d 	jmp	0x3aec	; 0x3aec <_ZN7RH_RF95C1EhhR12RHGenericSPI>

000016de <_Z20Read_Recieved_Packetv>:

#include "Init_1.h"
RH_RF95 rf95(_kLORA_CHIP_SELECT, _kLORA_INTERRUPT_PIN);

int Read_Recieved_Packet(void)
{
    16de:	ff 92       	push	r15
    16e0:	0f 93       	push	r16
    16e2:	1f 93       	push	r17
    16e4:	cf 93       	push	r28
    16e6:	df 93       	push	r29
    16e8:	1f 92       	push	r1
    16ea:	cd b7       	in	r28, 0x3d	; 61
    16ec:	de b7       	in	r29, 0x3e	; 62
	/**************************** read recieved packets *********************************/
	unsigned char id_len,len,i,count,calibration_response;
	//Serial.println(F("wait available "));
	if (rf95.available())
    16ee:	85 e1       	ldi	r24, 0x15	; 21
    16f0:	93 e0       	ldi	r25, 0x03	; 3
    16f2:	0e 94 52 1f 	call	0x3ea4	; 0x3ea4 <_ZN7RH_RF959availableEv>
    16f6:	88 23       	and	r24, r24
    16f8:	09 f4       	brne	.+2      	; 0x16fc <_Z20Read_Recieved_Packetv+0x1e>
    16fa:	4c c0       	rjmp	.+152    	; 0x1794 <_Z20Read_Recieved_Packetv+0xb6>
	{
		memset((char *)buff,0,sizeof(buff));
    16fc:	0b ef       	ldi	r16, 0xFB	; 251
    16fe:	ec e7       	ldi	r30, 0x7C	; 124
    1700:	f5 e0       	ldi	r31, 0x05	; 5
    1702:	df 01       	movw	r26, r30
    1704:	80 2f       	mov	r24, r16
    1706:	1d 92       	st	X+, r1
    1708:	8a 95       	dec	r24
    170a:	e9 f7       	brne	.-6      	; 0x1706 <_Z20Read_Recieved_Packetv+0x28>
		Serial.print(F("Packet available..."));
    170c:	61 e9       	ldi	r22, 0x91	; 145
    170e:	73 e0       	ldi	r23, 0x03	; 3
    1710:	81 ec       	ldi	r24, 0xC1	; 193
    1712:	96 e0       	ldi	r25, 0x06	; 6
    1714:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <_ZN5Print5printEPK19__FlashStringHelper>
		uint8_t len = sizeof(buff);
    1718:	09 83       	std	Y+1, r16	; 0x01

		if (rf95.recv((unsigned char *)buff, &len))
    171a:	ae 01       	movw	r20, r28
    171c:	4f 5f       	subi	r20, 0xFF	; 255
    171e:	5f 4f       	sbci	r21, 0xFF	; 255
    1720:	6c e7       	ldi	r22, 0x7C	; 124
    1722:	75 e0       	ldi	r23, 0x05	; 5
    1724:	85 e1       	ldi	r24, 0x15	; 21
    1726:	93 e0       	ldi	r25, 0x03	; 3
    1728:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <_ZN7RH_RF954recvEPhS0_>
    172c:	88 23       	and	r24, r24
    172e:	c9 f0       	breq	.+50     	; 0x1762 <_Z20Read_Recieved_Packetv+0x84>
    1730:	eb e3       	ldi	r30, 0x3B	; 59
    1732:	f5 e0       	ldi	r31, 0x05	; 5
    1734:	80 e0       	ldi	r24, 0x00	; 0
    1736:	90 e0       	ldi	r25, 0x00	; 0
		{
			id_len = 0;
			for(i=0;i<_kWIRELESS_PUMP_ID_LEN;i++)
			{
				if(buff[i] != _sWireless_Pump_Data.Wireless_Pump_Id[i])
    1738:	dc 01       	movw	r26, r24
    173a:	a4 58       	subi	r26, 0x84	; 132
    173c:	ba 4f       	sbci	r27, 0xFA	; 250
    173e:	3c 91       	ld	r19, X
    1740:	21 91       	ld	r18, Z+
    1742:	01 96       	adiw	r24, 0x01	; 1
    1744:	32 17       	cp	r19, r18
    1746:	49 f0       	breq	.+18     	; 0x175a <_Z20Read_Recieved_Packetv+0x7c>
				{
					Serial.println("serial id not matched");
    1748:	67 ea       	ldi	r22, 0xA7	; 167
    174a:	71 e0       	ldi	r23, 0x01	; 1
    174c:	81 ec       	ldi	r24, 0xC1	; 193
    174e:	96 e0       	ldi	r25, 0x06	; 6
    1750:	0e 94 6f 16 	call	0x2cde	; 0x2cde <_ZN5Print7printlnEPKc>
					return 0;
    1754:	80 e0       	ldi	r24, 0x00	; 0
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	2a c1       	rjmp	.+596    	; 0x19ae <_Z20Read_Recieved_Packetv+0x2d0>
				}
				id_len++;
    175a:	f8 2e       	mov	r15, r24
		uint8_t len = sizeof(buff);

		if (rf95.recv((unsigned char *)buff, &len))
		{
			id_len = 0;
			for(i=0;i<_kWIRELESS_PUMP_ID_LEN;i++)
    175c:	86 30       	cpi	r24, 0x06	; 6
    175e:	91 05       	cpc	r25, r1
    1760:	59 f7       	brne	.-42     	; 0x1738 <_Z20Read_Recieved_Packetv+0x5a>
				}
				id_len++;
			}
		}

		if(id_len == _kWIRELESS_PUMP_ID_LEN)
    1762:	a6 e0       	ldi	r26, 0x06	; 6
    1764:	fa 12       	cpse	r15, r26
    1766:	0b c0       	rjmp	.+22     	; 0x177e <_Z20Read_Recieved_Packetv+0xa0>
		{
			if(buff[11] != _kWIRELESS_PUMP_NUMBER && buff[12] != 'S')
    1768:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <buff+0xb>
    176c:	82 30       	cpi	r24, 0x02	; 2
    176e:	71 f0       	breq	.+28     	; 0x178c <_Z20Read_Recieved_Packetv+0xae>
    1770:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <buff+0xc>
    1774:	83 35       	cpi	r24, 0x53	; 83
    1776:	51 f0       	breq	.+20     	; 0x178c <_Z20Read_Recieved_Packetv+0xae>
			{
				return 0;
    1778:	80 e0       	ldi	r24, 0x00	; 0
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	18 c1       	rjmp	.+560    	; 0x19ae <_Z20Read_Recieved_Packetv+0x2d0>
				}break;
			}
		}
		else
		{
			Serial.println("Id Not Match");
    177e:	69 ec       	ldi	r22, 0xC9	; 201
    1780:	71 e0       	ldi	r23, 0x01	; 1
    1782:	81 ec       	ldi	r24, 0xC1	; 193
    1784:	96 e0       	ldi	r25, 0x06	; 6
    1786:	0e 94 6f 16 	call	0x2cde	; 0x2cde <_ZN5Print7printlnEPKc>
    178a:	04 c0       	rjmp	.+8      	; 0x1794 <_Z20Read_Recieved_Packetv+0xb6>
			if(buff[11] != _kWIRELESS_PUMP_NUMBER && buff[12] != 'S')
			{
				return 0;
			}
			/************************************************* check the packet type *****************************/
			switch(buff[6])     /* check which command had sent from the controller */
    178c:	80 91 82 05 	lds	r24, 0x0582	; 0x800582 <buff+0x6>
    1790:	81 30       	cpi	r24, 0x01	; 1
    1792:	09 f0       	breq	.+2      	; 0x1796 <_Z20Read_Recieved_Packetv+0xb8>
		{
			Serial.println("Id Not Match");
		}
		
	}
}
    1794:	0c c1       	rjmp	.+536    	; 0x19ae <_Z20Read_Recieved_Packetv+0x2d0>
			/************************************************* check the packet type *****************************/
			switch(buff[6])     /* check which command had sent from the controller */
			{
				case _eCOMMAND_FROM_WIRELESS_PUMP:     /* if controller wants to turn ON or OFF the valve */
				{
					switch(buff[7])   /* check weather controller wants to turn ON or OFF the data */
    1796:	80 91 83 05 	lds	r24, 0x0583	; 0x800583 <buff+0x7>
    179a:	82 30       	cpi	r24, 0x02	; 2
    179c:	79 f1       	breq	.+94     	; 0x17fc <_Z20Read_Recieved_Packetv+0x11e>
    179e:	84 30       	cpi	r24, 0x04	; 4
    17a0:	09 f4       	brne	.+2      	; 0x17a4 <_Z20Read_Recieved_Packetv+0xc6>
    17a2:	5e c0       	rjmp	.+188    	; 0x1860 <_Z20Read_Recieved_Packetv+0x182>
    17a4:	81 30       	cpi	r24, 0x01	; 1
    17a6:	09 f0       	breq	.+2      	; 0x17aa <_Z20Read_Recieved_Packetv+0xcc>
    17a8:	78 c0       	rjmp	.+240    	; 0x189a <_Z20Read_Recieved_Packetv+0x1bc>
					{
						case _eDO_CALIBRATION:  /* if controller wants to do the calibration */
						{
							Serial.println(F("Calibration of PUMP: "));
    17aa:	6b e7       	ldi	r22, 0x7B	; 123
    17ac:	73 e0       	ldi	r23, 0x03	; 3
    17ae:	81 ec       	ldi	r24, 0xC1	; 193
    17b0:	96 e0       	ldi	r25, 0x06	; 6
    17b2:	0e 94 5d 16 	call	0x2cba	; 0x2cba <_ZN5Print7printlnEPK19__FlashStringHelper>
							Serial.flush();
    17b6:	81 ec       	ldi	r24, 0xC1	; 193
    17b8:	96 e0       	ldi	r25, 0x06	; 6
    17ba:	0e 94 cc 14 	call	0x2998	; 0x2998 <_ZN14HardwareSerial5flushEv>
							_sWireless_Pump_Data.Command_From_Ruble |= _eDO_CALIBRATION;
    17be:	80 91 4f 05 	lds	r24, 0x054F	; 0x80054f <_sWireless_Pump_Data+0x14>
    17c2:	81 60       	ori	r24, 0x01	; 1
    17c4:	80 93 4f 05 	sts	0x054F, r24	; 0x80054f <_sWireless_Pump_Data+0x14>
							
							if(buff[13] == 1)
    17c8:	80 91 89 05 	lds	r24, 0x0589	; 0x800589 <buff+0xd>
    17cc:	81 30       	cpi	r24, 0x01	; 1
    17ce:	79 f4       	brne	.+30     	; 0x17ee <_Z20Read_Recieved_Packetv+0x110>
							{
								_sWireless_Pump_Data.By_Pass_CT = _kRESET;
    17d0:	10 92 5b 05 	sts	0x055B, r1	; 0x80055b <_sWireless_Pump_Data+0x20>

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    17d4:	82 e0       	ldi	r24, 0x02	; 2
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	0e 94 a9 26 	call	0x4d52	; 0x4d52 <eeprom_read_byte>
    EERef &operator &=( uint8_t in )     { return *this = **this & in; }
    EERef &operator |=( uint8_t in )     { return *this = **this | in; }
    EERef &operator <<=( uint8_t in )    { return *this = **this << in; }
    EERef &operator >>=( uint8_t in )    { return *this = **this >> in; }
    
    EERef &update( uint8_t in )          { return  in != *this ? *this = in : *this; }
    17dc:	88 23       	and	r24, r24
    17de:	09 f4       	brne	.+2      	; 0x17e2 <_Z20Read_Recieved_Packetv+0x104>
    17e0:	65 c0       	rjmp	.+202    	; 0x18ac <_Z20Read_Recieved_Packetv+0x1ce>
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    operator uint8_t() const             { return **this; }
    
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
    17e2:	60 e0       	ldi	r22, 0x00	; 0
    17e4:	82 e0       	ldi	r24, 0x02	; 2
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	0e 94 b1 26 	call	0x4d62	; 0x4d62 <eeprom_write_byte>
    17ec:	5f c0       	rjmp	.+190    	; 0x18ac <_Z20Read_Recieved_Packetv+0x1ce>
								_kEEPROM_WRITE(_kCT_BY_PASS,_sWireless_Pump_Data.By_Pass_CT);
								calibration_response = _eCALIBARATION_SUCCESS;
							}
							else
							{
								if(Calibration_Of_Pump())
    17ee:	0e 94 7f 02 	call	0x4fe	; 0x4fe <_Z19Calibration_Of_Pumpv>
    17f2:	89 2b       	or	r24, r25
    17f4:	09 f0       	breq	.+2      	; 0x17f8 <_Z20Read_Recieved_Packetv+0x11a>
    17f6:	5a c0       	rjmp	.+180    	; 0x18ac <_Z20Read_Recieved_Packetv+0x1ce>
								{
									calibration_response = _eCALIBARATION_SUCCESS;
								}
								else
								{
									calibration_response = _eCALIBRATION_FAIL;
    17f8:	12 e0       	ldi	r17, 0x02	; 2
    17fa:	59 c0       	rjmp	.+178    	; 0x18ae <_Z20Read_Recieved_Packetv+0x1d0>
							}
						}break;
						
						case _ePUMP_ON:      /* if controller wants to turn ON the valve */
						{
							Serial.println(F("Request to turn ON PUMP: "));
    17fc:	61 e6       	ldi	r22, 0x61	; 97
    17fe:	73 e0       	ldi	r23, 0x03	; 3
    1800:	81 ec       	ldi	r24, 0xC1	; 193
    1802:	96 e0       	ldi	r25, 0x06	; 6
    1804:	0e 94 5d 16 	call	0x2cba	; 0x2cba <_ZN5Print7printlnEPK19__FlashStringHelper>
							Serial.flush();
    1808:	81 ec       	ldi	r24, 0xC1	; 193
    180a:	96 e0       	ldi	r25, 0x06	; 6
    180c:	0e 94 cc 14 	call	0x2998	; 0x2998 <_ZN14HardwareSerial5flushEv>
							_sWireless_Pump_Data.Command_From_Ruble |= _ePUMP_ON;
							_sWireless_Pump_Data.Command_From_Ruble &= ~_ePUMP_OFF;
    1810:	80 91 4f 05 	lds	r24, 0x054F	; 0x80054f <_sWireless_Pump_Data+0x14>
    1814:	8b 7f       	andi	r24, 0xFB	; 251
    1816:	82 60       	ori	r24, 0x02	; 2
    1818:	80 93 4f 05 	sts	0x054F, r24	; 0x80054f <_sWireless_Pump_Data+0x14>

							if(Check_To_Turn_On_Pump())
    181c:	0e 94 9d 07 	call	0xf3a	; 0xf3a <_Z21Check_To_Turn_On_Pumpv>
    1820:	88 23       	and	r24, r24
    1822:	d1 f0       	breq	.+52     	; 0x1858 <_Z20Read_Recieved_Packetv+0x17a>
							{
		
								Serial.println(F("pump is ON"));
    1824:	66 e5       	ldi	r22, 0x56	; 86
    1826:	73 e0       	ldi	r23, 0x03	; 3
    1828:	81 ec       	ldi	r24, 0xC1	; 193
    182a:	96 e0       	ldi	r25, 0x06	; 6
    182c:	0e 94 5d 16 	call	0x2cba	; 0x2cba <_ZN5Print7printlnEPK19__FlashStringHelper>
								Serial.flush();
    1830:	81 ec       	ldi	r24, 0xC1	; 193
    1832:	96 e0       	ldi	r25, 0x06	; 6
    1834:	0e 94 cc 14 	call	0x2998	; 0x2998 <_ZN14HardwareSerial5flushEv>
								if(digitalRead(_kPUMP1))
    1838:	89 e0       	ldi	r24, 0x09	; 9
    183a:	0e 94 fc 19 	call	0x33f8	; 0x33f8 <digitalRead>
    183e:	89 2b       	or	r24, r25
    1840:	b1 f1       	breq	.+108    	; 0x18ae <_Z20Read_Recieved_Packetv+0x1d0>
								{	
									_sWireless_Pump_Data.Indication_Of_Faults  &= ~_ePUMP_OVERLOAD;
									_sWireless_Pump_Data.Indication_Of_Faults  &= ~_eDRY_RUN_STATUS;
									_sWireless_Pump_Data.Indication_Of_Faults  &= ~_ePUMP_NOT_WORKING;
    1842:	80 91 4b 05 	lds	r24, 0x054B	; 0x80054b <_sWireless_Pump_Data+0x10>
    1846:	90 91 4c 05 	lds	r25, 0x054C	; 0x80054c <_sWireless_Pump_Data+0x11>
    184a:	87 7d       	andi	r24, 0xD7	; 215
    184c:	9d 7f       	andi	r25, 0xFD	; 253
    184e:	90 93 4c 05 	sts	0x054C, r25	; 0x80054c <_sWireless_Pump_Data+0x11>
    1852:	80 93 4b 05 	sts	0x054B, r24	; 0x80054b <_sWireless_Pump_Data+0x10>
    1856:	2b c0       	rjmp	.+86     	; 0x18ae <_Z20Read_Recieved_Packetv+0x1d0>
									
								}
							}
							else
							{
								buff[7] = _ePUMP_OR_ELECTRICITY_RELATED;
    1858:	88 e0       	ldi	r24, 0x08	; 8
    185a:	80 93 83 05 	sts	0x0583, r24	; 0x800583 <buff+0x7>
    185e:	27 c0       	rjmp	.+78     	; 0x18ae <_Z20Read_Recieved_Packetv+0x1d0>
							
						}break;

						case _ePUMP_OFF:   /* if controller wants to turn OFF the device */
						{
							Serial.println(F("Request to turn OFF PUMP: "));
    1860:	6b e3       	ldi	r22, 0x3B	; 59
    1862:	73 e0       	ldi	r23, 0x03	; 3
    1864:	81 ec       	ldi	r24, 0xC1	; 193
    1866:	96 e0       	ldi	r25, 0x06	; 6
    1868:	0e 94 5d 16 	call	0x2cba	; 0x2cba <_ZN5Print7printlnEPK19__FlashStringHelper>
							Serial.flush();
    186c:	81 ec       	ldi	r24, 0xC1	; 193
    186e:	96 e0       	ldi	r25, 0x06	; 6
    1870:	0e 94 cc 14 	call	0x2998	; 0x2998 <_ZN14HardwareSerial5flushEv>
							_sWireless_Pump_Data.Command_From_Ruble |= _ePUMP_OFF;
							_sWireless_Pump_Data.Command_From_Ruble &= ~_ePUMP_ON;
    1874:	80 91 4f 05 	lds	r24, 0x054F	; 0x80054f <_sWireless_Pump_Data+0x14>
    1878:	8d 7f       	andi	r24, 0xFD	; 253
    187a:	84 60       	ori	r24, 0x04	; 4
    187c:	80 93 4f 05 	sts	0x054F, r24	; 0x80054f <_sWireless_Pump_Data+0x14>
							if (Pump_Off(buff[11]))
    1880:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <buff+0xb>
    1884:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <_Z8Pump_Offh>
    1888:	88 23       	and	r24, r24
    188a:	89 f0       	breq	.+34     	; 0x18ae <_Z20Read_Recieved_Packetv+0x1d0>
							{
								Serial.println(F("pump is off"));
    188c:	6f e2       	ldi	r22, 0x2F	; 47
    188e:	73 e0       	ldi	r23, 0x03	; 3
    1890:	81 ec       	ldi	r24, 0xC1	; 193
    1892:	96 e0       	ldi	r25, 0x06	; 6
    1894:	0e 94 5d 16 	call	0x2cba	; 0x2cba <_ZN5Print7printlnEPK19__FlashStringHelper>
    1898:	0a c0       	rjmp	.+20     	; 0x18ae <_Z20Read_Recieved_Packetv+0x1d0>
							}
						}break;

						default:     /* if comman not get match */
						{
							Serial.println("pump is off");
    189a:	6d eb       	ldi	r22, 0xBD	; 189
    189c:	71 e0       	ldi	r23, 0x01	; 1
    189e:	81 ec       	ldi	r24, 0xC1	; 193
    18a0:	96 e0       	ldi	r25, 0x06	; 6
    18a2:	0e 94 6f 16 	call	0x2cde	; 0x2cde <_ZN5Print7printlnEPKc>
							return 0;
    18a6:	80 e0       	ldi	r24, 0x00	; 0
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	81 c0       	rjmp	.+258    	; 0x19ae <_Z20Read_Recieved_Packetv+0x2d0>
							}
							else
							{
								if(Calibration_Of_Pump())
								{
									calibration_response = _eCALIBARATION_SUCCESS;
    18ac:	11 e0       	ldi	r17, 0x01	; 1
							return 0;
						}break;
						
					}
					
					_sWireless_Pump_Data.Operation_Mode  = buff[8];         /* operation mode */
    18ae:	80 91 84 05 	lds	r24, 0x0584	; 0x800584 <buff+0x8>
    18b2:	80 93 43 05 	sts	0x0543, r24	; 0x800543 <_sWireless_Pump_Data+0x8>
					_sWireless_Pump_Data.Timer_Duration  = buff[10];        /* Pump run timer */
    18b6:	80 91 86 05 	lds	r24, 0x0586	; 0x800586 <buff+0xa>
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	90 93 47 05 	sts	0x0547, r25	; 0x800547 <_sWireless_Pump_Data+0xc>
    18c0:	80 93 46 05 	sts	0x0546, r24	; 0x800546 <_sWireless_Pump_Data+0xb>
					_sWireless_Pump_Data.Timer_Duration |= buff[9] >> 8;    /* Pump run timer */
    18c4:	80 91 85 05 	lds	r24, 0x0585	; 0x800585 <buff+0x9>
					
					/************************************ make the ack package ***********************************/
					count = 0;
					memset((char *)Transmit_Data,0,sizeof(Transmit_Data));
    18c8:	84 e1       	ldi	r24, 0x14	; 20
    18ca:	e7 e7       	ldi	r30, 0x77	; 119
    18cc:	f6 e0       	ldi	r31, 0x06	; 6
    18ce:	df 01       	movw	r26, r30
    18d0:	1d 92       	st	X+, r1
    18d2:	8a 95       	dec	r24
    18d4:	e9 f7       	brne	.-6      	; 0x18d0 <_Z20Read_Recieved_Packetv+0x1f2>
    18d6:	eb e3       	ldi	r30, 0x3B	; 59
    18d8:	f5 e0       	ldi	r31, 0x05	; 5
    18da:	80 e0       	ldi	r24, 0x00	; 0
    18dc:	90 e0       	ldi	r25, 0x00	; 0

					for(i=0;i<_kWIRELESS_PUMP_ID_LEN;i++)
					{
						Transmit_Data[count++] = _sWireless_Pump_Data.Wireless_Pump_Id[i];
    18de:	21 91       	ld	r18, Z+
    18e0:	dc 01       	movw	r26, r24
    18e2:	a9 58       	subi	r26, 0x89	; 137
    18e4:	b9 4f       	sbci	r27, 0xF9	; 249
    18e6:	2c 93       	st	X, r18
    18e8:	01 96       	adiw	r24, 0x01	; 1
					
					/************************************ make the ack package ***********************************/
					count = 0;
					memset((char *)Transmit_Data,0,sizeof(Transmit_Data));

					for(i=0;i<_kWIRELESS_PUMP_ID_LEN;i++)
    18ea:	86 30       	cpi	r24, 0x06	; 6
    18ec:	91 05       	cpc	r25, r1
    18ee:	b9 f7       	brne	.-18     	; 0x18de <_Z20Read_Recieved_Packetv+0x200>
					{
						Transmit_Data[count++] = _sWireless_Pump_Data.Wireless_Pump_Id[i];
					}
					
					Transmit_Data[count++] = _eCOMMAND_FROM_WIRELESS_PUMP;
    18f0:	81 e0       	ldi	r24, 0x01	; 1
    18f2:	80 93 7d 06 	sts	0x067D, r24	; 0x80067d <Transmit_Data+0x6>
					Transmit_Data[count++] = buff[7];
    18f6:	80 91 83 05 	lds	r24, 0x0583	; 0x800583 <buff+0x7>
    18fa:	80 93 7e 06 	sts	0x067E, r24	; 0x80067e <Transmit_Data+0x7>
					Transmit_Data[count++] = _sWireless_Pump_Data.Wireless_Pump_Status;
    18fe:	80 91 48 05 	lds	r24, 0x0548	; 0x800548 <_sWireless_Pump_Data+0xd>
    1902:	80 93 7f 06 	sts	0x067F, r24	; 0x80067f <Transmit_Data+0x8>
					Transmit_Data[count++] = _sWireless_Pump_Data.Battery_Voltage >> 8;
    1906:	80 91 44 05 	lds	r24, 0x0544	; 0x800544 <_sWireless_Pump_Data+0x9>
    190a:	90 91 45 05 	lds	r25, 0x0545	; 0x800545 <_sWireless_Pump_Data+0xa>
    190e:	90 93 80 06 	sts	0x0680, r25	; 0x800680 <Transmit_Data+0x9>
					Transmit_Data[count++] = _sWireless_Pump_Data.Battery_Voltage;
    1912:	80 93 81 06 	sts	0x0681, r24	; 0x800681 <Transmit_Data+0xa>
					Transmit_Data[count++] = _sWireless_Pump_Data.Indication_Of_Faults >> 8;
    1916:	80 91 4b 05 	lds	r24, 0x054B	; 0x80054b <_sWireless_Pump_Data+0x10>
    191a:	90 91 4c 05 	lds	r25, 0x054C	; 0x80054c <_sWireless_Pump_Data+0x11>
    191e:	90 93 82 06 	sts	0x0682, r25	; 0x800682 <Transmit_Data+0xb>
					Transmit_Data[count++] = _sWireless_Pump_Data.Indication_Of_Faults;
    1922:	80 93 83 06 	sts	0x0683, r24	; 0x800683 <Transmit_Data+0xc>
					
					Transmit_Data[count++] = calibration_response;
    1926:	10 93 84 06 	sts	0x0684, r17	; 0x800684 <Transmit_Data+0xd>
					
					Transmit_Data[count++] = (int)_sPump_Parameter.Pump_Nominal_Current >> 24;
    192a:	60 91 31 05 	lds	r22, 0x0531	; 0x800531 <_sPump_Parameter>
    192e:	70 91 32 05 	lds	r23, 0x0532	; 0x800532 <_sPump_Parameter+0x1>
    1932:	80 91 33 05 	lds	r24, 0x0533	; 0x800533 <_sPump_Parameter+0x2>
    1936:	90 91 34 05 	lds	r25, 0x0534	; 0x800534 <_sPump_Parameter+0x3>
    193a:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__fixsfsi>
    193e:	33 0f       	add	r19, r19
    1940:	22 0b       	sbc	r18, r18
    1942:	32 2f       	mov	r19, r18
    1944:	20 93 85 06 	sts	0x0685, r18	; 0x800685 <Transmit_Data+0xe>
					Transmit_Data[count++] = (int)_sPump_Parameter.Pump_Nominal_Current >> 16;
    1948:	33 0f       	add	r19, r19
    194a:	22 0b       	sbc	r18, r18
    194c:	32 2f       	mov	r19, r18
    194e:	20 93 86 06 	sts	0x0686, r18	; 0x800686 <Transmit_Data+0xf>
					Transmit_Data[count++] = (int)_sPump_Parameter.Pump_Nominal_Current >> 8;
    1952:	70 93 87 06 	sts	0x0687, r23	; 0x800687 <Transmit_Data+0x10>
					Transmit_Data[count++] = (int)_sPump_Parameter.Pump_Nominal_Current;
    1956:	60 93 88 06 	sts	0x0688, r22	; 0x800688 <Transmit_Data+0x11>
					

					/******************************** SEND DATA TO EURO VALVE ****************************/
					Serial.println(F("send back 1"));
    195a:	63 e2       	ldi	r22, 0x23	; 35
    195c:	73 e0       	ldi	r23, 0x03	; 3
    195e:	81 ec       	ldi	r24, 0xC1	; 193
    1960:	96 e0       	ldi	r25, 0x06	; 6
    1962:	0e 94 5d 16 	call	0x2cba	; 0x2cba <_ZN5Print7printlnEPK19__FlashStringHelper>
					rf95.send((unsigned char *)Transmit_Data,count);
    1966:	42 e1       	ldi	r20, 0x12	; 18
    1968:	67 e7       	ldi	r22, 0x77	; 119
    196a:	76 e0       	ldi	r23, 0x06	; 6
    196c:	85 e1       	ldi	r24, 0x15	; 21
    196e:	93 e0       	ldi	r25, 0x03	; 3
    1970:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <_ZN7RH_RF954sendEPKhh>
					rf95.waitPacketSent(2000);
    1974:	60 ed       	ldi	r22, 0xD0	; 208
    1976:	77 e0       	ldi	r23, 0x07	; 7
    1978:	85 e1       	ldi	r24, 0x15	; 21
    197a:	93 e0       	ldi	r25, 0x03	; 3
    197c:	0e 94 c8 1b 	call	0x3790	; 0x3790 <_ZN15RHGenericDriver14waitPacketSentEj>
					Serial.println(F("send back 2"));
    1980:	67 e1       	ldi	r22, 0x17	; 23
    1982:	73 e0       	ldi	r23, 0x03	; 3
    1984:	81 ec       	ldi	r24, 0xC1	; 193
    1986:	96 e0       	ldi	r25, 0x06	; 6
    1988:	0e 94 5d 16 	call	0x2cba	; 0x2cba <_ZN5Print7printlnEPK19__FlashStringHelper>

					if(_sWireless_Pump_Data.Command_From_Ruble & _ePUMP_ON)
    198c:	80 91 4f 05 	lds	r24, 0x054F	; 0x80054f <_sWireless_Pump_Data+0x14>
    1990:	81 ff       	sbrs	r24, 1
    1992:	0b c0       	rjmp	.+22     	; 0x19aa <_Z20Read_Recieved_Packetv+0x2cc>
					{
						if(buff[7] != _ePUMP_OR_ELECTRICITY_RELATED)
    1994:	80 91 83 05 	lds	r24, 0x0583	; 0x800583 <buff+0x7>
    1998:	88 30       	cpi	r24, 0x08	; 8
    199a:	39 f0       	breq	.+14     	; 0x19aa <_Z20Read_Recieved_Packetv+0x2cc>
						{
							Pump_On(buff[11]);
    199c:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <buff+0xb>
    19a0:	0e 94 de 0c 	call	0x19bc	; 0x19bc <_Z7Pump_Onh>
						}
					}
					return 1;
    19a4:	81 e0       	ldi	r24, 0x01	; 1
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	02 c0       	rjmp	.+4      	; 0x19ae <_Z20Read_Recieved_Packetv+0x2d0>
    19aa:	81 e0       	ldi	r24, 0x01	; 1
    19ac:	90 e0       	ldi	r25, 0x00	; 0
		{
			Serial.println("Id Not Match");
		}
		
	}
}
    19ae:	0f 90       	pop	r0
    19b0:	df 91       	pop	r29
    19b2:	cf 91       	pop	r28
    19b4:	1f 91       	pop	r17
    19b6:	0f 91       	pop	r16
    19b8:	ff 90       	pop	r15
    19ba:	08 95       	ret

000019bc <_Z7Pump_Onh>:
    19bc:	10 92 72 05 	sts	0x0572, r1	; 0x800572 <_gMonitor_Controller_Response+0x1>
    19c0:	10 92 71 05 	sts	0x0571, r1	; 0x800571 <_gMonitor_Controller_Response>
    19c4:	80 91 4f 05 	lds	r24, 0x054F	; 0x80054f <_sWireless_Pump_Data+0x14>
    19c8:	81 ff       	sbrs	r24, 1
    19ca:	2d c0       	rjmp	.+90     	; 0x1a26 <_Z7Pump_Onh+0x6a>
    19cc:	89 e0       	ldi	r24, 0x09	; 9
    19ce:	0e 94 fc 19 	call	0x33f8	; 0x33f8 <digitalRead>
    19d2:	89 2b       	or	r24, r25
    19d4:	41 f1       	breq	.+80     	; 0x1a26 <_Z7Pump_Onh+0x6a>
    19d6:	10 92 5a 05 	sts	0x055A, r1	; 0x80055a <_sWireless_Pump_Data+0x1f>
    19da:	10 92 59 05 	sts	0x0559, r1	; 0x800559 <_sWireless_Pump_Data+0x1e>
    19de:	60 e0       	ldi	r22, 0x00	; 0
    19e0:	89 e0       	ldi	r24, 0x09	; 9
    19e2:	0e 94 cd 19 	call	0x339a	; 0x339a <digitalWrite>
    19e6:	60 e0       	ldi	r22, 0x00	; 0
    19e8:	88 e0       	ldi	r24, 0x08	; 8
    19ea:	0e 94 cd 19 	call	0x339a	; 0x339a <digitalWrite>
    19ee:	68 e5       	ldi	r22, 0x58	; 88
    19f0:	7b e1       	ldi	r23, 0x1B	; 27
    19f2:	80 e0       	ldi	r24, 0x00	; 0
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <delay>
    19fa:	61 e0       	ldi	r22, 0x01	; 1
    19fc:	88 e0       	ldi	r24, 0x08	; 8
    19fe:	0e 94 cd 19 	call	0x339a	; 0x339a <digitalWrite>
    1a02:	80 91 4f 05 	lds	r24, 0x054F	; 0x80054f <_sWireless_Pump_Data+0x14>
    1a06:	8d 7f       	andi	r24, 0xFD	; 253
    1a08:	80 93 4f 05 	sts	0x054F, r24	; 0x80054f <_sWireless_Pump_Data+0x14>
    1a0c:	81 e0       	ldi	r24, 0x01	; 1
    1a0e:	80 93 63 05 	sts	0x0563, r24	; 0x800563 <_sWireless_Pump_Data+0x28>
    1a12:	80 91 4b 05 	lds	r24, 0x054B	; 0x80054b <_sWireless_Pump_Data+0x10>
    1a16:	90 91 4c 05 	lds	r25, 0x054C	; 0x80054c <_sWireless_Pump_Data+0x11>
    1a1a:	87 7d       	andi	r24, 0xD7	; 215
    1a1c:	9d 7f       	andi	r25, 0xFD	; 253
    1a1e:	90 93 4c 05 	sts	0x054C, r25	; 0x80054c <_sWireless_Pump_Data+0x11>
    1a22:	80 93 4b 05 	sts	0x054B, r24	; 0x80054b <_sWireless_Pump_Data+0x10>
    1a26:	81 e0       	ldi	r24, 0x01	; 1
    1a28:	08 95       	ret

00001a2a <_Z8Pump_Offh>:
    1a2a:	cf 93       	push	r28
    1a2c:	df 93       	push	r29
    1a2e:	10 92 72 05 	sts	0x0572, r1	; 0x800572 <_gMonitor_Controller_Response+0x1>
    1a32:	10 92 71 05 	sts	0x0571, r1	; 0x800571 <_gMonitor_Controller_Response>
    1a36:	cb e3       	ldi	r28, 0x3B	; 59
    1a38:	d5 e0       	ldi	r29, 0x05	; 5
    1a3a:	8c 89       	ldd	r24, Y+20	; 0x14
    1a3c:	8b 7f       	andi	r24, 0xFB	; 251
    1a3e:	8c 8b       	std	Y+20, r24	; 0x14
    1a40:	61 e0       	ldi	r22, 0x01	; 1
    1a42:	89 e0       	ldi	r24, 0x09	; 9
    1a44:	0e 94 cd 19 	call	0x339a	; 0x339a <digitalWrite>
    1a48:	61 e0       	ldi	r22, 0x01	; 1
    1a4a:	88 e0       	ldi	r24, 0x08	; 8
    1a4c:	0e 94 cd 19 	call	0x339a	; 0x339a <digitalWrite>
    1a50:	18 a6       	std	Y+40, r1	; 0x28
    1a52:	81 e0       	ldi	r24, 0x01	; 1
    1a54:	df 91       	pop	r29
    1a56:	cf 91       	pop	r28
    1a58:	08 95       	ret

00001a5a <_Z19Pump_Off_For_Faultsh>:
    1a5a:	80 91 4b 05 	lds	r24, 0x054B	; 0x80054b <_sWireless_Pump_Data+0x10>
    1a5e:	90 91 4c 05 	lds	r25, 0x054C	; 0x80054c <_sWireless_Pump_Data+0x11>
    1a62:	88 7b       	andi	r24, 0xB8	; 184
    1a64:	92 70       	andi	r25, 0x02	; 2
    1a66:	89 2b       	or	r24, r25
    1a68:	39 f1       	breq	.+78     	; 0x1ab8 <_Z19Pump_Off_For_Faultsh+0x5e>
    1a6a:	65 ea       	ldi	r22, 0xA5	; 165
    1a6c:	73 e0       	ldi	r23, 0x03	; 3
    1a6e:	81 ec       	ldi	r24, 0xC1	; 193
    1a70:	96 e0       	ldi	r25, 0x06	; 6
    1a72:	0e 94 5d 16 	call	0x2cba	; 0x2cba <_ZN5Print7printlnEPK19__FlashStringHelper>
    1a76:	60 91 4b 05 	lds	r22, 0x054B	; 0x80054b <_sWireless_Pump_Data+0x10>
    1a7a:	70 91 4c 05 	lds	r23, 0x054C	; 0x80054c <_sWireless_Pump_Data+0x11>
    1a7e:	42 e0       	ldi	r20, 0x02	; 2
    1a80:	50 e0       	ldi	r21, 0x00	; 0
    1a82:	81 ec       	ldi	r24, 0xC1	; 193
    1a84:	96 e0       	ldi	r25, 0x06	; 6
    1a86:	0e 94 f6 16 	call	0x2dec	; 0x2dec <_ZN5Print7printlnEji>
    1a8a:	10 92 63 05 	sts	0x0563, r1	; 0x800563 <_sWireless_Pump_Data+0x28>
    1a8e:	89 e0       	ldi	r24, 0x09	; 9
    1a90:	0e 94 fc 19 	call	0x33f8	; 0x33f8 <digitalRead>
    1a94:	89 2b       	or	r24, r25
    1a96:	81 f4       	brne	.+32     	; 0x1ab8 <_Z19Pump_Off_For_Faultsh+0x5e>
    1a98:	61 e0       	ldi	r22, 0x01	; 1
    1a9a:	89 e0       	ldi	r24, 0x09	; 9
    1a9c:	0e 94 cd 19 	call	0x339a	; 0x339a <digitalWrite>
    1aa0:	61 e0       	ldi	r22, 0x01	; 1
    1aa2:	88 e0       	ldi	r24, 0x08	; 8
    1aa4:	0e 94 cd 19 	call	0x339a	; 0x339a <digitalWrite>
    1aa8:	68 e8       	ldi	r22, 0x88	; 136
    1aaa:	73 e1       	ldi	r23, 0x13	; 19
    1aac:	80 e0       	ldi	r24, 0x00	; 0
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <delay>
    1ab4:	81 e0       	ldi	r24, 0x01	; 1
    1ab6:	08 95       	ret
    1ab8:	08 95       	ret

00001aba <setup>:

unsigned char Read_Ct(void)
{
  _sPump_Parameter.Pump_Run_Current = RUBLE_PUMP_CURRENT.calcIrms(_kCT_AVERAGE_TURNS);
  Serial.println(_sPump_Parameter.Pump_Run_Current);
}
    1aba:	cf 92       	push	r12
    1abc:	ef 92       	push	r14
    1abe:	0f 93       	push	r16
    1ac0:	0f b6       	in	r0, 0x3f	; 63
    1ac2:	f8 94       	cli
    1ac4:	a8 95       	wdr
    1ac6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    1aca:	88 61       	ori	r24, 0x18	; 24
    1acc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    1ad0:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    1ad4:	0f be       	out	0x3f, r0	; 63
    1ad6:	99 e2       	ldi	r25, 0x29	; 41
    1ad8:	88 e1       	ldi	r24, 0x18	; 24
    1ada:	0f b6       	in	r0, 0x3f	; 63
    1adc:	f8 94       	cli
    1ade:	a8 95       	wdr
    1ae0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    1ae4:	0f be       	out	0x3f, r0	; 63
    1ae6:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    1aea:	10 92 75 05 	sts	0x0575, r1	; 0x800575 <_gcheck_Wdt>
    1aee:	0e 94 c2 08 	call	0x1184	; 0x1184 <_Z19Initialise_Hardwarev>
    1af2:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <VoltRange>
    1af6:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <VoltRange+0x1>
    1afa:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <VoltRange+0x2>
    1afe:	70 91 0d 01 	lds	r23, 0x010D	; 0x80010d <VoltRange+0x3>
    1b02:	c1 2c       	mov	r12, r1
    1b04:	ee 24       	eor	r14, r14
    1b06:	e3 94       	inc	r14
    1b08:	0a e0       	ldi	r16, 0x0A	; 10
    1b0a:	28 e2       	ldi	r18, 0x28	; 40
    1b0c:	8f e8       	ldi	r24, 0x8F	; 143
    1b0e:	96 e0       	ldi	r25, 0x06	; 6
    1b10:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <_ZN3Rms5beginEfhhbb>
    1b14:	8f e8       	ldi	r24, 0x8F	; 143
    1b16:	96 e0       	ldi	r25, 0x06	; 6
    1b18:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <_ZN3Rms5startEv>
    1b1c:	0e 94 ac 18 	call	0x3158	; 0x3158 <micros>
    1b20:	dc 01       	movw	r26, r24
    1b22:	cb 01       	movw	r24, r22
    1b24:	88 51       	subi	r24, 0x18	; 24
    1b26:	9c 4f       	sbci	r25, 0xFC	; 252
    1b28:	af 4f       	sbci	r26, 0xFF	; 255
    1b2a:	bf 4f       	sbci	r27, 0xFF	; 255
    1b2c:	80 93 6c 05 	sts	0x056C, r24	; 0x80056c <nextLoop>
    1b30:	90 93 6d 05 	sts	0x056D, r25	; 0x80056d <nextLoop+0x1>
    1b34:	a0 93 6e 05 	sts	0x056E, r26	; 0x80056e <nextLoop+0x2>
    1b38:	b0 93 6f 05 	sts	0x056F, r27	; 0x80056f <nextLoop+0x3>
    1b3c:	81 e0       	ldi	r24, 0x01	; 1
    1b3e:	0e 94 48 19 	call	0x3290	; 0x3290 <analogReference>
    1b42:	81 e0       	ldi	r24, 0x01	; 1
    1b44:	80 93 75 05 	sts	0x0575, r24	; 0x800575 <_gcheck_Wdt>
    1b48:	eb e3       	ldi	r30, 0x3B	; 59
    1b4a:	f5 e0       	ldi	r31, 0x05	; 5
    1b4c:	80 89       	ldd	r24, Z+16	; 0x10
    1b4e:	91 89       	ldd	r25, Z+17	; 0x11
    1b50:	87 7c       	andi	r24, 0xC7	; 199
    1b52:	9d 7f       	andi	r25, 0xFD	; 253
    1b54:	91 8b       	std	Z+17, r25	; 0x11
    1b56:	80 8b       	std	Z+16, r24	; 0x10
    1b58:	0f 91       	pop	r16
    1b5a:	ef 90       	pop	r14
    1b5c:	cf 90       	pop	r12
    1b5e:	08 95       	ret

00001b60 <_Z11Print_Phasev>:
    1b60:	cf 93       	push	r28
    1b62:	df 93       	push	r29
    1b64:	cb e3       	ldi	r28, 0x3B	; 59
    1b66:	d5 e0       	ldi	r29, 0x05	; 5
    1b68:	69 a5       	ldd	r22, Y+41	; 0x29
    1b6a:	7a a5       	ldd	r23, Y+42	; 0x2a
    1b6c:	4a e0       	ldi	r20, 0x0A	; 10
    1b6e:	50 e0       	ldi	r21, 0x00	; 0
    1b70:	81 ec       	ldi	r24, 0xC1	; 193
    1b72:	96 e0       	ldi	r25, 0x06	; 6
    1b74:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <_ZN5Print5printEji>
    1b78:	65 ee       	ldi	r22, 0xE5	; 229
    1b7a:	71 e0       	ldi	r23, 0x01	; 1
    1b7c:	81 ec       	ldi	r24, 0xC1	; 193
    1b7e:	96 e0       	ldi	r25, 0x06	; 6
    1b80:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <_ZN5Print5printEPKc>
    1b84:	6b a5       	ldd	r22, Y+43	; 0x2b
    1b86:	7c a5       	ldd	r23, Y+44	; 0x2c
    1b88:	4a e0       	ldi	r20, 0x0A	; 10
    1b8a:	50 e0       	ldi	r21, 0x00	; 0
    1b8c:	81 ec       	ldi	r24, 0xC1	; 193
    1b8e:	96 e0       	ldi	r25, 0x06	; 6
    1b90:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <_ZN5Print5printEji>
    1b94:	65 ee       	ldi	r22, 0xE5	; 229
    1b96:	71 e0       	ldi	r23, 0x01	; 1
    1b98:	81 ec       	ldi	r24, 0xC1	; 193
    1b9a:	96 e0       	ldi	r25, 0x06	; 6
    1b9c:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <_ZN5Print5printEPKc>
    1ba0:	6d a5       	ldd	r22, Y+45	; 0x2d
    1ba2:	7e a5       	ldd	r23, Y+46	; 0x2e
    1ba4:	4a e0       	ldi	r20, 0x0A	; 10
    1ba6:	50 e0       	ldi	r21, 0x00	; 0
    1ba8:	81 ec       	ldi	r24, 0xC1	; 193
    1baa:	96 e0       	ldi	r25, 0x06	; 6
    1bac:	0e 94 f6 16 	call	0x2dec	; 0x2dec <_ZN5Print7printlnEji>
    1bb0:	df 91       	pop	r29
    1bb2:	cf 91       	pop	r28
    1bb4:	08 95       	ret

00001bb6 <loop>:
    1bb6:	80 91 8b 06 	lds	r24, 0x068B	; 0x80068b <_g1Sec_Time>
    1bba:	90 91 8c 06 	lds	r25, 0x068C	; 0x80068c <_g1Sec_Time+0x1>
    1bbe:	89 2b       	or	r24, r25
    1bc0:	99 f0       	breq	.+38     	; 0x1be8 <loop+0x32>
    1bc2:	10 92 8c 06 	sts	0x068C, r1	; 0x80068c <_g1Sec_Time+0x1>
    1bc6:	10 92 8b 06 	sts	0x068B, r1	; 0x80068b <_g1Sec_Time>
    1bca:	10 92 74 05 	sts	0x0574, r1	; 0x800574 <_gTIMER_For_Wdt+0x1>
    1bce:	10 92 73 05 	sts	0x0573, r1	; 0x800573 <_gTIMER_For_Wdt>
    1bd2:	0e 94 6f 0b 	call	0x16de	; 0x16de <_Z20Read_Recieved_Packetv>
    1bd6:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <_Z14Faults_Handlerv>
    1bda:	0e 94 84 03 	call	0x708	; 0x708 <_Z17Update_Indicationv>
    1bde:	81 e0       	ldi	r24, 0x01	; 1
    1be0:	0e 94 3a 09 	call	0x1274	; 0x1274 <_Z21Transmit_Fault_Packetc>
    1be4:	0c 94 b0 0d 	jmp	0x1b60	; 0x1b60 <_Z11Print_Phasev>
    1be8:	08 95       	ret

00001bea <_Z16B_Check_Equitionj>:

unsigned int B_Check_Equition(unsigned int Phase_Input)
{
	unsigned int return_data;
	
	if(Phase_Input >= 1 && Phase_Input <=   310 /*558*/)
    1bea:	9c 01       	movw	r18, r24
    1bec:	21 50       	subi	r18, 0x01	; 1
    1bee:	31 09       	sbc	r19, r1
    1bf0:	26 33       	cpi	r18, 0x36	; 54
    1bf2:	31 40       	sbci	r19, 0x01	; 1
    1bf4:	50 f0       	brcs	.+20     	; 0x1c0a <_Z16B_Check_Equitionj+0x20>
	{
		Phase_Input = 200;
	}
	else if(Phase_Input < 186)
    1bf6:	8a 3b       	cpi	r24, 0xBA	; 186
    1bf8:	91 05       	cpc	r25, r1
    1bfa:	50 f0       	brcs	.+20     	; 0x1c10 <_Z16B_Check_Equitionj+0x26>
	{
		Phase_Input = 250;
	}
	else if(Phase_Input > 320 /*558*/ )
    1bfc:	81 34       	cpi	r24, 0x41	; 65
    1bfe:	21 e0       	ldi	r18, 0x01	; 1
    1c00:	92 07       	cpc	r25, r18
    1c02:	40 f0       	brcs	.+16     	; 0x1c14 <_Z16B_Check_Equitionj+0x2a>
	{
		Phase_Input = 100;
    1c04:	84 e6       	ldi	r24, 0x64	; 100
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	08 95       	ret
{
	unsigned int return_data;
	
	if(Phase_Input >= 1 && Phase_Input <=   310 /*558*/)
	{
		Phase_Input = 200;
    1c0a:	88 ec       	ldi	r24, 0xC8	; 200
    1c0c:	90 e0       	ldi	r25, 0x00	; 0
    1c0e:	08 95       	ret
	}
	else if(Phase_Input < 186)
	{
		Phase_Input = 250;
    1c10:	8a ef       	ldi	r24, 0xFA	; 250
    1c12:	90 e0       	ldi	r25, 0x00	; 0
	{
		Phase_Input = 100;
	}
	
	return Phase_Input;
}
    1c14:	08 95       	ret

00001c16 <_Z33Interrupt_Analyse_Read_Phases_Newv>:
	  Serial.println(_sWireless_Pump_Data.PHASE_AFTER_Filter[2]);
}

unsigned char Interrupt_Analyse_Read_Phases_New(void)
{
	if(Reading_Ct_Flag)
    1c16:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <Reading_Ct_Flag>
    1c1a:	88 23       	and	r24, r24
    1c1c:	11 f0       	breq	.+4      	; 0x1c22 <_Z33Interrupt_Analyse_Read_Phases_Newv+0xc>
	{
		return 0;
    1c1e:	80 e0       	ldi	r24, 0x00	; 0
    1c20:	08 95       	ret

	int R_Phase_Output, Y_Phase_Output, B_Phase_Output;
	
	static unsigned int check_max_voltage;
	
	check_max_voltage = _sWireless_Pump_Data.PHASE_AFTER_Filter[0];
    1c22:	20 91 64 05 	lds	r18, 0x0564	; 0x800564 <_sWireless_Pump_Data+0x29>
    1c26:	30 91 65 05 	lds	r19, 0x0565	; 0x800565 <_sWireless_Pump_Data+0x2a>
    1c2a:	30 93 d4 04 	sts	0x04D4, r19	; 0x8004d4 <_ZZ33Interrupt_Analyse_Read_Phases_NewvE17check_max_voltage+0x1>
    1c2e:	20 93 d3 04 	sts	0x04D3, r18	; 0x8004d3 <_ZZ33Interrupt_Analyse_Read_Phases_NewvE17check_max_voltage>
	for(unsigned char i=1; i<3; i++)
	{
		if(check_max_voltage <  _sWireless_Pump_Data.PHASE_AFTER_Filter[i])
    1c32:	80 91 66 05 	lds	r24, 0x0566	; 0x800566 <_sWireless_Pump_Data+0x2b>
    1c36:	90 91 67 05 	lds	r25, 0x0567	; 0x800567 <_sWireless_Pump_Data+0x2c>
    1c3a:	28 17       	cp	r18, r24
    1c3c:	39 07       	cpc	r19, r25
    1c3e:	20 f4       	brcc	.+8      	; 0x1c48 <_Z33Interrupt_Analyse_Read_Phases_Newv+0x32>
		{
			check_max_voltage = _sWireless_Pump_Data.PHASE_AFTER_Filter[i];
    1c40:	90 93 d4 04 	sts	0x04D4, r25	; 0x8004d4 <_ZZ33Interrupt_Analyse_Read_Phases_NewvE17check_max_voltage+0x1>
    1c44:	80 93 d3 04 	sts	0x04D3, r24	; 0x8004d3 <_ZZ33Interrupt_Analyse_Read_Phases_NewvE17check_max_voltage>
	static unsigned int check_max_voltage;
	
	check_max_voltage = _sWireless_Pump_Data.PHASE_AFTER_Filter[0];
	for(unsigned char i=1; i<3; i++)
	{
		if(check_max_voltage <  _sWireless_Pump_Data.PHASE_AFTER_Filter[i])
    1c48:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <_sWireless_Pump_Data+0x2d>
    1c4c:	90 91 69 05 	lds	r25, 0x0569	; 0x800569 <_sWireless_Pump_Data+0x2e>
    1c50:	20 91 d3 04 	lds	r18, 0x04D3	; 0x8004d3 <_ZZ33Interrupt_Analyse_Read_Phases_NewvE17check_max_voltage>
    1c54:	30 91 d4 04 	lds	r19, 0x04D4	; 0x8004d4 <_ZZ33Interrupt_Analyse_Read_Phases_NewvE17check_max_voltage+0x1>
    1c58:	28 17       	cp	r18, r24
    1c5a:	39 07       	cpc	r19, r25
    1c5c:	20 f4       	brcc	.+8      	; 0x1c66 <_Z33Interrupt_Analyse_Read_Phases_Newv+0x50>
		{
			check_max_voltage = _sWireless_Pump_Data.PHASE_AFTER_Filter[i];
    1c5e:	90 93 d4 04 	sts	0x04D4, r25	; 0x8004d4 <_ZZ33Interrupt_Analyse_Read_Phases_NewvE17check_max_voltage+0x1>
    1c62:	80 93 d3 04 	sts	0x04D3, r24	; 0x8004d3 <_ZZ33Interrupt_Analyse_Read_Phases_NewvE17check_max_voltage>
		}
	}
	
	switch(i)
    1c66:	80 91 d2 04 	lds	r24, 0x04D2	; 0x8004d2 <_ZZ33Interrupt_Analyse_Read_Phases_NewvE1i>
    1c6a:	81 30       	cpi	r24, 0x01	; 1
    1c6c:	09 f4       	brne	.+2      	; 0x1c70 <_Z33Interrupt_Analyse_Read_Phases_Newv+0x5a>
    1c6e:	6f c0       	rjmp	.+222    	; 0x1d4e <_Z33Interrupt_Analyse_Read_Phases_Newv+0x138>
    1c70:	20 f0       	brcs	.+8      	; 0x1c7a <_Z33Interrupt_Analyse_Read_Phases_Newv+0x64>
    1c72:	82 30       	cpi	r24, 0x02	; 2
    1c74:	09 f4       	brne	.+2      	; 0x1c78 <_Z33Interrupt_Analyse_Read_Phases_Newv+0x62>
    1c76:	d5 c0       	rjmp	.+426    	; 0x1e22 <_Z33Interrupt_Analyse_Read_Phases_Newv+0x20c>
    1c78:	39 c1       	rjmp	.+626    	; 0x1eec <_Z33Interrupt_Analyse_Read_Phases_Newv+0x2d6>
	{
		case 0:
		{
			adcVal = analogRead(A0);    // B PHASE
    1c7a:	8e e0       	ldi	r24, 0x0E	; 14
    1c7c:	0e 94 4b 19 	call	0x3296	; 0x3296 <analogRead>
    1c80:	90 93 6b 05 	sts	0x056B, r25	; 0x80056b <adcVal+0x1>
    1c84:	80 93 6a 05 	sts	0x056A, r24	; 0x80056a <adcVal>
			
			i = 1;
    1c88:	81 e0       	ldi	r24, 0x01	; 1
    1c8a:	80 93 d2 04 	sts	0x04D2, r24	; 0x8004d2 <_ZZ33Interrupt_Analyse_Read_Phases_NewvE1i>
				
			if(R_Counter < 25)
    1c8e:	80 91 d1 04 	lds	r24, 0x04D1	; 0x8004d1 <_ZZ33Interrupt_Analyse_Read_Phases_NewvE9R_Counter>
    1c92:	89 31       	cpi	r24, 0x19	; 25
    1c94:	80 f4       	brcc	.+32     	; 0x1cb6 <_Z33Interrupt_Analyse_Read_Phases_Newv+0xa0>
			{
				R_Phases_Avg[R_Counter] = adcVal;
    1c96:	20 91 6a 05 	lds	r18, 0x056A	; 0x80056a <adcVal>
    1c9a:	30 91 6b 05 	lds	r19, 0x056B	; 0x80056b <adcVal+0x1>
    1c9e:	e8 2f       	mov	r30, r24
    1ca0:	f0 e0       	ldi	r31, 0x00	; 0
    1ca2:	ee 0f       	add	r30, r30
    1ca4:	ff 1f       	adc	r31, r31
    1ca6:	e1 56       	subi	r30, 0x61	; 97
    1ca8:	fb 4f       	sbci	r31, 0xFB	; 251
    1caa:	31 83       	std	Z+1, r19	; 0x01
    1cac:	20 83       	st	Z, r18
				R_Counter++;
    1cae:	8f 5f       	subi	r24, 0xFF	; 255
    1cb0:	80 93 d1 04 	sts	0x04D1, r24	; 0x8004d1 <_ZZ33Interrupt_Analyse_Read_Phases_NewvE9R_Counter>
    1cb4:	1b c1       	rjmp	.+566    	; 0x1eec <_Z33Interrupt_Analyse_Read_Phases_Newv+0x2d6>
    1cb6:	af e9       	ldi	r26, 0x9F	; 159
    1cb8:	b4 e0       	ldi	r27, 0x04	; 4
    1cba:	8f ec       	ldi	r24, 0xCF	; 207
    1cbc:	94 e0       	ldi	r25, 0x04	; 4
		{
			adcVal = analogRead(A0);    // B PHASE
			
			i = 1;
				
			if(R_Counter < 25)
    1cbe:	fd 01       	movw	r30, r26
			}
			else
			{
				for(unsigned int i=0; i<24; i++)
				{
					R_Phases_Avg[i] = R_Phases_Avg[i+1];
    1cc0:	22 81       	ldd	r18, Z+2	; 0x02
    1cc2:	33 81       	ldd	r19, Z+3	; 0x03
    1cc4:	21 93       	st	Z+, r18
    1cc6:	31 93       	st	Z+, r19
				R_Phases_Avg[R_Counter] = adcVal;
				R_Counter++;
			}
			else
			{
				for(unsigned int i=0; i<24; i++)
    1cc8:	8e 17       	cp	r24, r30
    1cca:	9f 07       	cpc	r25, r31
    1ccc:	c9 f7       	brne	.-14     	; 0x1cc0 <_Z33Interrupt_Analyse_Read_Phases_Newv+0xaa>
				{
					R_Phases_Avg[i] = R_Phases_Avg[i+1];
				}
				R_Phases_Avg[24] =  adcVal;
    1cce:	80 91 6a 05 	lds	r24, 0x056A	; 0x80056a <adcVal>
    1cd2:	90 91 6b 05 	lds	r25, 0x056B	; 0x80056b <adcVal+0x1>
    1cd6:	90 93 d0 04 	sts	0x04D0, r25	; 0x8004d0 <_ZZ33Interrupt_Analyse_Read_Phases_NewvE12R_Phases_Avg+0x31>
    1cda:	80 93 cf 04 	sts	0x04CF, r24	; 0x8004cf <_ZZ33Interrupt_Analyse_Read_Phases_NewvE12R_Phases_Avg+0x30>
    1cde:	21 ed       	ldi	r18, 0xD1	; 209
    1ce0:	34 e0       	ldi	r19, 0x04	; 4
					
				R_Phase_Output = 0;
    1ce2:	80 e0       	ldi	r24, 0x00	; 0
    1ce4:	90 e0       	ldi	r25, 0x00	; 0
				for(unsigned char i=0;i<25;i++)
				{
					R_Phase_Output += R_Phases_Avg[i];
    1ce6:	4d 91       	ld	r20, X+
    1ce8:	5d 91       	ld	r21, X+
    1cea:	84 0f       	add	r24, r20
    1cec:	95 1f       	adc	r25, r21
					R_Phases_Avg[i] = R_Phases_Avg[i+1];
				}
				R_Phases_Avg[24] =  adcVal;
					
				R_Phase_Output = 0;
				for(unsigned char i=0;i<25;i++)
    1cee:	2a 17       	cp	r18, r26
    1cf0:	3b 07       	cpc	r19, r27
    1cf2:	c9 f7       	brne	.-14     	; 0x1ce6 <_Z33Interrupt_Analyse_Read_Phases_Newv+0xd0>
					R_Phase_Output += R_Phases_Avg[i];
				}
					
				R_Phase_Output = R_Phase_Output/25;
				
				_sWireless_Pump_Data.PHASE_AFTER_Filter[0] = R_Check_Equition(R_Phase_Output);
    1cf4:	69 e1       	ldi	r22, 0x19	; 25
    1cf6:	70 e0       	ldi	r23, 0x00	; 0
    1cf8:	0e 94 53 24 	call	0x48a6	; 0x48a6 <__divmodhi4>
    1cfc:	cb 01       	movw	r24, r22
    1cfe:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <_Z16B_Check_Equitionj>
    1d02:	90 93 65 05 	sts	0x0565, r25	; 0x800565 <_sWireless_Pump_Data+0x2a>
    1d06:	80 93 64 05 	sts	0x0564, r24	; 0x800564 <_sWireless_Pump_Data+0x29>
					
				R_Phase_Output = _sWireless_Pump_Data.PHASE_AFTER_Filter[0];
				
				
				check_fault = 1;
    1d0a:	21 e0       	ldi	r18, 0x01	; 1
    1d0c:	20 93 9e 04 	sts	0x049E, r18	; 0x80049e <_ZZ33Interrupt_Analyse_Read_Phases_NewvE11check_fault>
					
				if(1)
				{	
					if(_sWireless_Pump_Data.PHASE_AFTER_Filter[0] < 110)
    1d10:	8e 36       	cpi	r24, 0x6E	; 110
    1d12:	91 05       	cpc	r25, r1
    1d14:	50 f4       	brcc	.+20     	; 0x1d2a <_Z33Interrupt_Analyse_Read_Phases_Newv+0x114>
					{
						R_Phase_Fault_Counter = _kRESET;
    1d16:	10 92 7b 05 	sts	0x057B, r1	; 0x80057b <R_Phase_Fault_Counter>
						if(R_Phase_Fault_Repair > 13)
    1d1a:	80 91 78 05 	lds	r24, 0x0578	; 0x800578 <R_Phase_Fault_Repair>
    1d1e:	8e 30       	cpi	r24, 0x0E	; 14
    1d20:	08 f4       	brcc	.+2      	; 0x1d24 <_Z33Interrupt_Analyse_Read_Phases_Newv+0x10e>
    1d22:	e7 c0       	rjmp	.+462    	; 0x1ef2 <_Z33Interrupt_Analyse_Read_Phases_Newv+0x2dc>
						{
							_sWireless_Pump_Data.RPhase_Status = _kRESET;
    1d24:	10 92 56 05 	sts	0x0556, r1	; 0x800556 <_sWireless_Pump_Data+0x1b>
    1d28:	e1 c0       	rjmp	.+450    	; 0x1eec <_Z33Interrupt_Analyse_Read_Phases_Newv+0x2d6>
						}
						
					}
					else if(_sWireless_Pump_Data.PHASE_AFTER_Filter[0] > 120)
    1d2a:	89 37       	cpi	r24, 0x79	; 121
    1d2c:	91 05       	cpc	r25, r1
    1d2e:	50 f0       	brcs	.+20     	; 0x1d44 <_Z33Interrupt_Analyse_Read_Phases_Newv+0x12e>
					{
						if(R_Phase_Fault_Counter > 13)
    1d30:	80 91 7b 05 	lds	r24, 0x057B	; 0x80057b <R_Phase_Fault_Counter>
    1d34:	8e 30       	cpi	r24, 0x0E	; 14
    1d36:	08 f4       	brcc	.+2      	; 0x1d3a <_Z33Interrupt_Analyse_Read_Phases_Newv+0x124>
    1d38:	dc c0       	rjmp	.+440    	; 0x1ef2 <_Z33Interrupt_Analyse_Read_Phases_Newv+0x2dc>
						{
							R_Phase_Fault_Repair = _kRESET;
    1d3a:	10 92 78 05 	sts	0x0578, r1	; 0x800578 <R_Phase_Fault_Repair>
							/* cosider fault is there */
							_sWireless_Pump_Data.RPhase_Status = _kSET;
    1d3e:	20 93 56 05 	sts	0x0556, r18	; 0x800556 <_sWireless_Pump_Data+0x1b>
    1d42:	d4 c0       	rjmp	.+424    	; 0x1eec <_Z33Interrupt_Analyse_Read_Phases_Newv+0x2d6>
						}
					}
				
					else
					{
						R_Phase_Fault_Repair = _kRESET;
    1d44:	10 92 78 05 	sts	0x0578, r1	; 0x800578 <R_Phase_Fault_Repair>
						R_Phase_Fault_Counter = _kRESET;
    1d48:	10 92 7b 05 	sts	0x057B, r1	; 0x80057b <R_Phase_Fault_Counter>
    1d4c:	cf c0       	rjmp	.+414    	; 0x1eec <_Z33Interrupt_Analyse_Read_Phases_Newv+0x2d6>
		
		

		case 1:   // y
		{
			adcVal = analogRead(A1);
    1d4e:	8f e0       	ldi	r24, 0x0F	; 15
    1d50:	0e 94 4b 19 	call	0x3296	; 0x3296 <analogRead>
    1d54:	90 93 6b 05 	sts	0x056B, r25	; 0x80056b <adcVal+0x1>
    1d58:	80 93 6a 05 	sts	0x056A, r24	; 0x80056a <adcVal>
			
			i = 2;
    1d5c:	82 e0       	ldi	r24, 0x02	; 2
    1d5e:	80 93 d2 04 	sts	0x04D2, r24	; 0x8004d2 <_ZZ33Interrupt_Analyse_Read_Phases_NewvE1i>

			if(Y_Counter < 25)
    1d62:	80 91 9d 04 	lds	r24, 0x049D	; 0x80049d <_ZZ33Interrupt_Analyse_Read_Phases_NewvE9Y_Counter>
    1d66:	89 31       	cpi	r24, 0x19	; 25
    1d68:	80 f4       	brcc	.+32     	; 0x1d8a <_Z33Interrupt_Analyse_Read_Phases_Newv+0x174>
			{
				Y_Phases_Avg[Y_Counter] = adcVal;
    1d6a:	20 91 6a 05 	lds	r18, 0x056A	; 0x80056a <adcVal>
    1d6e:	30 91 6b 05 	lds	r19, 0x056B	; 0x80056b <adcVal+0x1>
    1d72:	e8 2f       	mov	r30, r24
    1d74:	f0 e0       	ldi	r31, 0x00	; 0
    1d76:	ee 0f       	add	r30, r30
    1d78:	ff 1f       	adc	r31, r31
    1d7a:	e5 59       	subi	r30, 0x95	; 149
    1d7c:	fb 4f       	sbci	r31, 0xFB	; 251
    1d7e:	31 83       	std	Z+1, r19	; 0x01
    1d80:	20 83       	st	Z, r18
				Y_Counter++;
    1d82:	8f 5f       	subi	r24, 0xFF	; 255
    1d84:	80 93 9d 04 	sts	0x049D, r24	; 0x80049d <_ZZ33Interrupt_Analyse_Read_Phases_NewvE9Y_Counter>
    1d88:	b1 c0       	rjmp	.+354    	; 0x1eec <_Z33Interrupt_Analyse_Read_Phases_Newv+0x2d6>
    1d8a:	ab e6       	ldi	r26, 0x6B	; 107
    1d8c:	b4 e0       	ldi	r27, 0x04	; 4
    1d8e:	8b e9       	ldi	r24, 0x9B	; 155
    1d90:	94 e0       	ldi	r25, 0x04	; 4
		{
			adcVal = analogRead(A1);
			
			i = 2;

			if(Y_Counter < 25)
    1d92:	fd 01       	movw	r30, r26
			}
			else
			{
				for(unsigned int i=0; i<24; i++)
				{
					Y_Phases_Avg[i] = Y_Phases_Avg[i+1];
    1d94:	22 81       	ldd	r18, Z+2	; 0x02
    1d96:	33 81       	ldd	r19, Z+3	; 0x03
    1d98:	21 93       	st	Z+, r18
    1d9a:	31 93       	st	Z+, r19
				Y_Phases_Avg[Y_Counter] = adcVal;
				Y_Counter++;
			}
			else
			{
				for(unsigned int i=0; i<24; i++)
    1d9c:	8e 17       	cp	r24, r30
    1d9e:	9f 07       	cpc	r25, r31
    1da0:	c9 f7       	brne	.-14     	; 0x1d94 <_Z33Interrupt_Analyse_Read_Phases_Newv+0x17e>
				{
					Y_Phases_Avg[i] = Y_Phases_Avg[i+1];
				}
				Y_Phases_Avg[24] =  adcVal;
    1da2:	80 91 6a 05 	lds	r24, 0x056A	; 0x80056a <adcVal>
    1da6:	90 91 6b 05 	lds	r25, 0x056B	; 0x80056b <adcVal+0x1>
    1daa:	90 93 9c 04 	sts	0x049C, r25	; 0x80049c <_ZZ33Interrupt_Analyse_Read_Phases_NewvE12Y_Phases_Avg+0x31>
    1dae:	80 93 9b 04 	sts	0x049B, r24	; 0x80049b <_ZZ33Interrupt_Analyse_Read_Phases_NewvE12Y_Phases_Avg+0x30>
    1db2:	2d e9       	ldi	r18, 0x9D	; 157
    1db4:	34 e0       	ldi	r19, 0x04	; 4

				Y_Phase_Output = 0;
    1db6:	80 e0       	ldi	r24, 0x00	; 0
    1db8:	90 e0       	ldi	r25, 0x00	; 0
					
				for(unsigned char i=0;i<25;i++)
				{
					Y_Phase_Output += Y_Phases_Avg[i];
    1dba:	4d 91       	ld	r20, X+
    1dbc:	5d 91       	ld	r21, X+
    1dbe:	84 0f       	add	r24, r20
    1dc0:	95 1f       	adc	r25, r21
				}
				Y_Phases_Avg[24] =  adcVal;

				Y_Phase_Output = 0;
					
				for(unsigned char i=0;i<25;i++)
    1dc2:	2a 17       	cp	r18, r26
    1dc4:	3b 07       	cpc	r19, r27
    1dc6:	c9 f7       	brne	.-14     	; 0x1dba <_Z33Interrupt_Analyse_Read_Phases_Newv+0x1a4>
					Y_Phase_Output += Y_Phases_Avg[i];
				}
				Y_Phase_Output = Y_Phase_Output/25;
				
				
				_sWireless_Pump_Data.PHASE_AFTER_Filter[1] = Y_Check_Equition(Y_Phase_Output);
    1dc8:	69 e1       	ldi	r22, 0x19	; 25
    1dca:	70 e0       	ldi	r23, 0x00	; 0
    1dcc:	0e 94 53 24 	call	0x48a6	; 0x48a6 <__divmodhi4>
    1dd0:	cb 01       	movw	r24, r22
    1dd2:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <_Z16B_Check_Equitionj>
    1dd6:	90 93 67 05 	sts	0x0567, r25	; 0x800567 <_sWireless_Pump_Data+0x2c>
    1dda:	80 93 66 05 	sts	0x0566, r24	; 0x800566 <_sWireless_Pump_Data+0x2b>
				Y_Phase_Output = _sWireless_Pump_Data.PHASE_AFTER_Filter[1];
					
				check_fault = 1;
    1dde:	21 e0       	ldi	r18, 0x01	; 1
    1de0:	20 93 9e 04 	sts	0x049E, r18	; 0x80049e <_ZZ33Interrupt_Analyse_Read_Phases_NewvE11check_fault>
					
				if(1)
				{	
					if(_sWireless_Pump_Data.PHASE_AFTER_Filter[1] < 110 )
    1de4:	8e 36       	cpi	r24, 0x6E	; 110
    1de6:	91 05       	cpc	r25, r1
    1de8:	50 f4       	brcc	.+20     	; 0x1dfe <_Z33Interrupt_Analyse_Read_Phases_Newv+0x1e8>
					{
						Y_Phase_Fault_Counter = _kRESET;
    1dea:	10 92 7a 05 	sts	0x057A, r1	; 0x80057a <Y_Phase_Fault_Counter>
						if(Y_Phase_Fault_Repair > 13)
    1dee:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <Y_Phase_Fault_Repair>
    1df2:	8e 30       	cpi	r24, 0x0E	; 14
    1df4:	08 f4       	brcc	.+2      	; 0x1df8 <_Z33Interrupt_Analyse_Read_Phases_Newv+0x1e2>
    1df6:	7d c0       	rjmp	.+250    	; 0x1ef2 <_Z33Interrupt_Analyse_Read_Phases_Newv+0x2dc>
						{
							_sWireless_Pump_Data.YPhase_Status = _kRESET;
    1df8:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <_sWireless_Pump_Data+0x1c>
    1dfc:	77 c0       	rjmp	.+238    	; 0x1eec <_Z33Interrupt_Analyse_Read_Phases_Newv+0x2d6>
						}
					}
					else if(_sWireless_Pump_Data.PHASE_AFTER_Filter[1] > 120)
    1dfe:	89 37       	cpi	r24, 0x79	; 121
    1e00:	91 05       	cpc	r25, r1
    1e02:	50 f0       	brcs	.+20     	; 0x1e18 <_Z33Interrupt_Analyse_Read_Phases_Newv+0x202>
					{
						if(Y_Phase_Fault_Counter > 13)
    1e04:	80 91 7a 05 	lds	r24, 0x057A	; 0x80057a <Y_Phase_Fault_Counter>
    1e08:	8e 30       	cpi	r24, 0x0E	; 14
    1e0a:	08 f4       	brcc	.+2      	; 0x1e0e <_Z33Interrupt_Analyse_Read_Phases_Newv+0x1f8>
    1e0c:	72 c0       	rjmp	.+228    	; 0x1ef2 <_Z33Interrupt_Analyse_Read_Phases_Newv+0x2dc>
						{
							Y_Phase_Fault_Repair = _kRESET;
    1e0e:	10 92 77 05 	sts	0x0577, r1	; 0x800577 <Y_Phase_Fault_Repair>
							
							_sWireless_Pump_Data.YPhase_Status = _kSET;
    1e12:	20 93 57 05 	sts	0x0557, r18	; 0x800557 <_sWireless_Pump_Data+0x1c>
    1e16:	6a c0       	rjmp	.+212    	; 0x1eec <_Z33Interrupt_Analyse_Read_Phases_Newv+0x2d6>
						}
					}
					else
					{
						Y_Phase_Fault_Counter = _kRESET;
    1e18:	10 92 7a 05 	sts	0x057A, r1	; 0x80057a <Y_Phase_Fault_Counter>
						Y_Phase_Fault_Repair = _kRESET;
    1e1c:	10 92 77 05 	sts	0x0577, r1	; 0x800577 <Y_Phase_Fault_Repair>
    1e20:	65 c0       	rjmp	.+202    	; 0x1eec <_Z33Interrupt_Analyse_Read_Phases_Newv+0x2d6>
			
		}break;

		case 2:
		{
			adcVal = analogRead(A2);   // b phase
    1e22:	80 e1       	ldi	r24, 0x10	; 16
    1e24:	0e 94 4b 19 	call	0x3296	; 0x3296 <analogRead>
    1e28:	90 93 6b 05 	sts	0x056B, r25	; 0x80056b <adcVal+0x1>
    1e2c:	80 93 6a 05 	sts	0x056A, r24	; 0x80056a <adcVal>
			i = 0;
    1e30:	10 92 d2 04 	sts	0x04D2, r1	; 0x8004d2 <_ZZ33Interrupt_Analyse_Read_Phases_NewvE1i>
			if(B_Counter < 25)
    1e34:	80 91 6a 04 	lds	r24, 0x046A	; 0x80046a <_ZZ33Interrupt_Analyse_Read_Phases_NewvE9B_Counter>
    1e38:	89 31       	cpi	r24, 0x19	; 25
    1e3a:	80 f4       	brcc	.+32     	; 0x1e5c <_Z33Interrupt_Analyse_Read_Phases_Newv+0x246>
			{
				B_Phases_Avg[B_Counter] = adcVal;
    1e3c:	20 91 6a 05 	lds	r18, 0x056A	; 0x80056a <adcVal>
    1e40:	30 91 6b 05 	lds	r19, 0x056B	; 0x80056b <adcVal+0x1>
    1e44:	e8 2f       	mov	r30, r24
    1e46:	f0 e0       	ldi	r31, 0x00	; 0
    1e48:	ee 0f       	add	r30, r30
    1e4a:	ff 1f       	adc	r31, r31
    1e4c:	e8 5c       	subi	r30, 0xC8	; 200
    1e4e:	fb 4f       	sbci	r31, 0xFB	; 251
    1e50:	31 83       	std	Z+1, r19	; 0x01
    1e52:	20 83       	st	Z, r18
				B_Counter++;
    1e54:	8f 5f       	subi	r24, 0xFF	; 255
    1e56:	80 93 6a 04 	sts	0x046A, r24	; 0x80046a <_ZZ33Interrupt_Analyse_Read_Phases_NewvE9B_Counter>
    1e5a:	48 c0       	rjmp	.+144    	; 0x1eec <_Z33Interrupt_Analyse_Read_Phases_Newv+0x2d6>
    1e5c:	a8 e3       	ldi	r26, 0x38	; 56
    1e5e:	b4 e0       	ldi	r27, 0x04	; 4

		case 2:
		{
			adcVal = analogRead(A2);   // b phase
			i = 0;
			if(B_Counter < 25)
    1e60:	fd 01       	movw	r30, r26
			}
			else
			{
				for(unsigned int i=0; i<24; i++)
				{
					B_Phases_Avg[i] = B_Phases_Avg[i+1];
    1e62:	82 81       	ldd	r24, Z+2	; 0x02
    1e64:	93 81       	ldd	r25, Z+3	; 0x03
    1e66:	81 93       	st	Z+, r24
    1e68:	91 93       	st	Z+, r25
				B_Phases_Avg[B_Counter] = adcVal;
				B_Counter++;
			}
			else
			{
				for(unsigned int i=0; i<24; i++)
    1e6a:	84 e0       	ldi	r24, 0x04	; 4
    1e6c:	e8 36       	cpi	r30, 0x68	; 104
    1e6e:	f8 07       	cpc	r31, r24
    1e70:	c1 f7       	brne	.-16     	; 0x1e62 <_Z33Interrupt_Analyse_Read_Phases_Newv+0x24c>
				{
					B_Phases_Avg[i] = B_Phases_Avg[i+1];
				}
				B_Phases_Avg[24] =  adcVal;
    1e72:	80 91 6a 05 	lds	r24, 0x056A	; 0x80056a <adcVal>
    1e76:	90 91 6b 05 	lds	r25, 0x056B	; 0x80056b <adcVal+0x1>
    1e7a:	90 93 69 04 	sts	0x0469, r25	; 0x800469 <_ZZ33Interrupt_Analyse_Read_Phases_NewvE12B_Phases_Avg+0x31>
    1e7e:	80 93 68 04 	sts	0x0468, r24	; 0x800468 <_ZZ33Interrupt_Analyse_Read_Phases_NewvE12B_Phases_Avg+0x30>
    1e82:	2a e6       	ldi	r18, 0x6A	; 106
    1e84:	34 e0       	ldi	r19, 0x04	; 4
					
				B_Phase_Output = 0;
    1e86:	80 e0       	ldi	r24, 0x00	; 0
    1e88:	90 e0       	ldi	r25, 0x00	; 0
				for(unsigned char i=0;i<25;i++)
				{
					B_Phase_Output += B_Phases_Avg[i];
    1e8a:	4d 91       	ld	r20, X+
    1e8c:	5d 91       	ld	r21, X+
    1e8e:	84 0f       	add	r24, r20
    1e90:	95 1f       	adc	r25, r21
					B_Phases_Avg[i] = B_Phases_Avg[i+1];
				}
				B_Phases_Avg[24] =  adcVal;
					
				B_Phase_Output = 0;
				for(unsigned char i=0;i<25;i++)
    1e92:	2a 17       	cp	r18, r26
    1e94:	3b 07       	cpc	r19, r27
    1e96:	c9 f7       	brne	.-14     	; 0x1e8a <_Z33Interrupt_Analyse_Read_Phases_Newv+0x274>
				}
					
				B_Phase_Output = B_Phase_Output/25;
					

				_sWireless_Pump_Data.PHASE_AFTER_Filter[2] = B_Check_Equition(B_Phase_Output);
    1e98:	69 e1       	ldi	r22, 0x19	; 25
    1e9a:	70 e0       	ldi	r23, 0x00	; 0
    1e9c:	0e 94 53 24 	call	0x48a6	; 0x48a6 <__divmodhi4>
    1ea0:	cb 01       	movw	r24, r22
    1ea2:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <_Z16B_Check_Equitionj>
    1ea6:	90 93 69 05 	sts	0x0569, r25	; 0x800569 <_sWireless_Pump_Data+0x2e>
    1eaa:	80 93 68 05 	sts	0x0568, r24	; 0x800568 <_sWireless_Pump_Data+0x2d>
				B_Phase_Output = _sWireless_Pump_Data.PHASE_AFTER_Filter[2];
				
				
				check_fault = 1;
    1eae:	21 e0       	ldi	r18, 0x01	; 1
    1eb0:	20 93 9e 04 	sts	0x049E, r18	; 0x80049e <_ZZ33Interrupt_Analyse_Read_Phases_NewvE11check_fault>
				
				if(1)
				{	
					if(_sWireless_Pump_Data.PHASE_AFTER_Filter[2] < 110)
    1eb4:	8e 36       	cpi	r24, 0x6E	; 110
    1eb6:	91 05       	cpc	r25, r1
    1eb8:	48 f4       	brcc	.+18     	; 0x1ecc <_Z33Interrupt_Analyse_Read_Phases_Newv+0x2b6>
					{
						B_Phase_Fault_Counter = _kRESET;
    1eba:	10 92 79 05 	sts	0x0579, r1	; 0x800579 <B_Phase_Fault_Counter>
						if(B_Phase_Fault_Repair > 13)
    1ebe:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <B_Phase_Fault_Repair>
    1ec2:	8e 30       	cpi	r24, 0x0E	; 14
    1ec4:	b0 f0       	brcs	.+44     	; 0x1ef2 <_Z33Interrupt_Analyse_Read_Phases_Newv+0x2dc>
						{
							_sWireless_Pump_Data.BPhase_Status = _kRESET;
    1ec6:	10 92 58 05 	sts	0x0558, r1	; 0x800558 <_sWireless_Pump_Data+0x1d>
    1eca:	10 c0       	rjmp	.+32     	; 0x1eec <_Z33Interrupt_Analyse_Read_Phases_Newv+0x2d6>
						}
					}
					else if(_sWireless_Pump_Data.PHASE_AFTER_Filter[2] > 120)
    1ecc:	89 37       	cpi	r24, 0x79	; 121
    1ece:	91 05       	cpc	r25, r1
    1ed0:	48 f0       	brcs	.+18     	; 0x1ee4 <_Z33Interrupt_Analyse_Read_Phases_Newv+0x2ce>
					{
						if(B_Phase_Fault_Counter > 13)
    1ed2:	80 91 79 05 	lds	r24, 0x0579	; 0x800579 <B_Phase_Fault_Counter>
    1ed6:	8e 30       	cpi	r24, 0x0E	; 14
    1ed8:	60 f0       	brcs	.+24     	; 0x1ef2 <_Z33Interrupt_Analyse_Read_Phases_Newv+0x2dc>
						{
							B_Phase_Fault_Repair = _kRESET;
    1eda:	10 92 76 05 	sts	0x0576, r1	; 0x800576 <B_Phase_Fault_Repair>
							/* cosider fault is there */
							_sWireless_Pump_Data.BPhase_Status = _kSET;
    1ede:	20 93 58 05 	sts	0x0558, r18	; 0x800558 <_sWireless_Pump_Data+0x1d>
    1ee2:	04 c0       	rjmp	.+8      	; 0x1eec <_Z33Interrupt_Analyse_Read_Phases_Newv+0x2d6>
							
						}
					}
					else
					{
						B_Phase_Fault_Repair = _kRESET;
    1ee4:	10 92 76 05 	sts	0x0576, r1	; 0x800576 <B_Phase_Fault_Repair>
						B_Phase_Fault_Counter = _kRESET;
    1ee8:	10 92 79 05 	sts	0x0579, r1	; 0x800579 <B_Phase_Fault_Counter>
			
		}break;
	}
	

	if(check_fault)
    1eec:	80 91 9e 04 	lds	r24, 0x049E	; 0x80049e <_ZZ33Interrupt_Analyse_Read_Phases_NewvE11check_fault>
    1ef0:	81 11       	cpse	r24, r1
	{
		check_fault = 0;
    1ef2:	10 92 9e 04 	sts	0x049E, r1	; 0x80049e <_ZZ33Interrupt_Analyse_Read_Phases_NewvE11check_fault>
	}
	
}
    1ef6:	08 95       	ret

00001ef8 <_GLOBAL__sub_I_readRms>:
  long sumInstVal;
};



class Rms
    1ef8:	83 e3       	ldi	r24, 0x33	; 51
    1efa:	93 e3       	ldi	r25, 0x33	; 51
    1efc:	a3 e3       	ldi	r26, 0x33	; 51
    1efe:	bf e3       	ldi	r27, 0x3F	; 63
    1f00:	80 93 9d 06 	sts	0x069D, r24	; 0x80069d <readRms+0xe>
    1f04:	90 93 9e 06 	sts	0x069E, r25	; 0x80069e <readRms+0xf>
    1f08:	a0 93 9f 06 	sts	0x069F, r26	; 0x80069f <readRms+0x10>
    1f0c:	b0 93 a0 06 	sts	0x06A0, r27	; 0x8006a0 <readRms+0x11>
    1f10:	08 95       	ret

00001f12 <_ZN3Rms5beginEfhhbb>:
}


void Average::start() {
  acquire=true;
  acqRdy=false;
    1f12:	4f 92       	push	r4
    1f14:	5f 92       	push	r5
    1f16:	6f 92       	push	r6
    1f18:	7f 92       	push	r7
    1f1a:	8f 92       	push	r8
    1f1c:	9f 92       	push	r9
    1f1e:	af 92       	push	r10
    1f20:	bf 92       	push	r11
    1f22:	cf 92       	push	r12
    1f24:	df 92       	push	r13
    1f26:	ef 92       	push	r14
    1f28:	0f 93       	push	r16
    1f2a:	cf 93       	push	r28
    1f2c:	df 93       	push	r29
    1f2e:	ec 01       	movw	r28, r24
    1f30:	4a 01       	movw	r8, r20
    1f32:	5b 01       	movw	r10, r22
    1f34:	cb 86       	std	Y+11, r12	; 0x0b
    1f36:	c2 2e       	mov	r12, r18
    1f38:	d1 2c       	mov	r13, r1
    1f3a:	dd 86       	std	Y+13, r13	; 0x0d
    1f3c:	cc 86       	std	Y+12, r12	; 0x0c
    1f3e:	ea 86       	std	Y+10, r14	; 0x0a
    1f40:	60 2f       	mov	r22, r16
    1f42:	70 e0       	ldi	r23, 0x00	; 0
    1f44:	80 e0       	ldi	r24, 0x00	; 0
    1f46:	90 e0       	ldi	r25, 0x00	; 0
    1f48:	0e 94 1c 11 	call	0x2238	; 0x2238 <__floatunsisf>
    1f4c:	9b 01       	movw	r18, r22
    1f4e:	ac 01       	movw	r20, r24
    1f50:	60 e0       	ldi	r22, 0x00	; 0
    1f52:	70 e0       	ldi	r23, 0x00	; 0
    1f54:	80 e0       	ldi	r24, 0x00	; 0
    1f56:	90 e4       	ldi	r25, 0x40	; 64
    1f58:	0e 94 40 12 	call	0x2480	; 0x2480 <pow>
    1f5c:	20 e0       	ldi	r18, 0x00	; 0
    1f5e:	30 e0       	ldi	r19, 0x00	; 0
    1f60:	40 e0       	ldi	r20, 0x00	; 0
    1f62:	5f e3       	ldi	r21, 0x3F	; 63
    1f64:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <__mulsf3>
    1f68:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__fixsfsi>
    1f6c:	7f 83       	std	Y+7, r23	; 0x07
    1f6e:	6e 83       	std	Y+6, r22	; 0x06
    1f70:	60 2f       	mov	r22, r16
    1f72:	70 e0       	ldi	r23, 0x00	; 0
    1f74:	66 0f       	add	r22, r22
    1f76:	77 1f       	adc	r23, r23
    1f78:	07 2e       	mov	r0, r23
    1f7a:	00 0c       	add	r0, r0
    1f7c:	88 0b       	sbc	r24, r24
    1f7e:	99 0b       	sbc	r25, r25
    1f80:	0e 94 1e 11 	call	0x223c	; 0x223c <__floatsisf>
    1f84:	9b 01       	movw	r18, r22
    1f86:	ac 01       	movw	r20, r24
    1f88:	60 e0       	ldi	r22, 0x00	; 0
    1f8a:	70 e0       	ldi	r23, 0x00	; 0
    1f8c:	80 e0       	ldi	r24, 0x00	; 0
    1f8e:	90 e4       	ldi	r25, 0x40	; 64
    1f90:	0e 94 40 12 	call	0x2480	; 0x2480 <pow>
    1f94:	2b 01       	movw	r4, r22
    1f96:	3c 01       	movw	r6, r24
    1f98:	a5 01       	movw	r20, r10
    1f9a:	94 01       	movw	r18, r8
    1f9c:	c5 01       	movw	r24, r10
    1f9e:	b4 01       	movw	r22, r8
    1fa0:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <__mulsf3>
    1fa4:	4b 01       	movw	r8, r22
    1fa6:	5c 01       	movw	r10, r24
    1fa8:	b6 01       	movw	r22, r12
    1faa:	dd 0c       	add	r13, r13
    1fac:	88 0b       	sbc	r24, r24
    1fae:	99 0b       	sbc	r25, r25
    1fb0:	0e 94 1e 11 	call	0x223c	; 0x223c <__floatsisf>
    1fb4:	a3 01       	movw	r20, r6
    1fb6:	92 01       	movw	r18, r4
    1fb8:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <__mulsf3>
    1fbc:	9b 01       	movw	r18, r22
    1fbe:	ac 01       	movw	r20, r24
    1fc0:	c5 01       	movw	r24, r10
    1fc2:	b4 01       	movw	r22, r8
    1fc4:	0e 94 74 10 	call	0x20e8	; 0x20e8 <__divsf3>
    1fc8:	6a 8f       	std	Y+26, r22	; 0x1a
    1fca:	7b 8f       	std	Y+27, r23	; 0x1b
    1fcc:	8c 8f       	std	Y+28, r24	; 0x1c
    1fce:	9d 8f       	std	Y+29, r25	; 0x1d
    1fd0:	1a a6       	std	Y+42, r1	; 0x2a
    1fd2:	1b a6       	std	Y+43, r1	; 0x2b
    1fd4:	1c a6       	std	Y+44, r1	; 0x2c
    1fd6:	1d a6       	std	Y+45, r1	; 0x2d
    1fd8:	1d 8a       	std	Y+21, r1	; 0x15
    1fda:	1c 8a       	std	Y+20, r1	; 0x14
    1fdc:	df 91       	pop	r29
    1fde:	cf 91       	pop	r28
    1fe0:	0f 91       	pop	r16
    1fe2:	ef 90       	pop	r14
    1fe4:	df 90       	pop	r13
    1fe6:	cf 90       	pop	r12
    1fe8:	bf 90       	pop	r11
    1fea:	af 90       	pop	r10
    1fec:	9f 90       	pop	r9
    1fee:	8f 90       	pop	r8
    1ff0:	7f 90       	pop	r7
    1ff2:	6f 90       	pop	r6
    1ff4:	5f 90       	pop	r5
    1ff6:	4f 90       	pop	r4
    1ff8:	08 95       	ret

00001ffa <_ZN3Rms5startEv>:
}


void Rms::start() {
  acquire=true;
    1ffa:	21 e0       	ldi	r18, 0x01	; 1
    1ffc:	fc 01       	movw	r30, r24
    1ffe:	20 87       	std	Z+8, r18	; 0x08
  acqRdy=false;
    2000:	11 86       	std	Z+9, r1	; 0x09
    2002:	08 95       	ret

00002004 <__subsf3>:
    2004:	50 58       	subi	r21, 0x80	; 128

00002006 <__addsf3>:
    2006:	bb 27       	eor	r27, r27
    2008:	aa 27       	eor	r26, r26
    200a:	0e 94 1a 10 	call	0x2034	; 0x2034 <__addsf3x>
    200e:	0c 94 94 11 	jmp	0x2328	; 0x2328 <__fp_round>
    2012:	0e 94 86 11 	call	0x230c	; 0x230c <__fp_pscA>
    2016:	38 f0       	brcs	.+14     	; 0x2026 <__addsf3+0x20>
    2018:	0e 94 8d 11 	call	0x231a	; 0x231a <__fp_pscB>
    201c:	20 f0       	brcs	.+8      	; 0x2026 <__addsf3+0x20>
    201e:	39 f4       	brne	.+14     	; 0x202e <__addsf3+0x28>
    2020:	9f 3f       	cpi	r25, 0xFF	; 255
    2022:	19 f4       	brne	.+6      	; 0x202a <__addsf3+0x24>
    2024:	26 f4       	brtc	.+8      	; 0x202e <__addsf3+0x28>
    2026:	0c 94 83 11 	jmp	0x2306	; 0x2306 <__fp_nan>
    202a:	0e f4       	brtc	.+2      	; 0x202e <__addsf3+0x28>
    202c:	e0 95       	com	r30
    202e:	e7 fb       	bst	r30, 7
    2030:	0c 94 7d 11 	jmp	0x22fa	; 0x22fa <__fp_inf>

00002034 <__addsf3x>:
    2034:	e9 2f       	mov	r30, r25
    2036:	0e 94 a5 11 	call	0x234a	; 0x234a <__fp_split3>
    203a:	58 f3       	brcs	.-42     	; 0x2012 <__addsf3+0xc>
    203c:	ba 17       	cp	r27, r26
    203e:	62 07       	cpc	r22, r18
    2040:	73 07       	cpc	r23, r19
    2042:	84 07       	cpc	r24, r20
    2044:	95 07       	cpc	r25, r21
    2046:	20 f0       	brcs	.+8      	; 0x2050 <__addsf3x+0x1c>
    2048:	79 f4       	brne	.+30     	; 0x2068 <__addsf3x+0x34>
    204a:	a6 f5       	brtc	.+104    	; 0x20b4 <__addsf3x+0x80>
    204c:	0c 94 c7 11 	jmp	0x238e	; 0x238e <__fp_zero>
    2050:	0e f4       	brtc	.+2      	; 0x2054 <__addsf3x+0x20>
    2052:	e0 95       	com	r30
    2054:	0b 2e       	mov	r0, r27
    2056:	ba 2f       	mov	r27, r26
    2058:	a0 2d       	mov	r26, r0
    205a:	0b 01       	movw	r0, r22
    205c:	b9 01       	movw	r22, r18
    205e:	90 01       	movw	r18, r0
    2060:	0c 01       	movw	r0, r24
    2062:	ca 01       	movw	r24, r20
    2064:	a0 01       	movw	r20, r0
    2066:	11 24       	eor	r1, r1
    2068:	ff 27       	eor	r31, r31
    206a:	59 1b       	sub	r21, r25
    206c:	99 f0       	breq	.+38     	; 0x2094 <__addsf3x+0x60>
    206e:	59 3f       	cpi	r21, 0xF9	; 249
    2070:	50 f4       	brcc	.+20     	; 0x2086 <__addsf3x+0x52>
    2072:	50 3e       	cpi	r21, 0xE0	; 224
    2074:	68 f1       	brcs	.+90     	; 0x20d0 <__addsf3x+0x9c>
    2076:	1a 16       	cp	r1, r26
    2078:	f0 40       	sbci	r31, 0x00	; 0
    207a:	a2 2f       	mov	r26, r18
    207c:	23 2f       	mov	r18, r19
    207e:	34 2f       	mov	r19, r20
    2080:	44 27       	eor	r20, r20
    2082:	58 5f       	subi	r21, 0xF8	; 248
    2084:	f3 cf       	rjmp	.-26     	; 0x206c <__addsf3x+0x38>
    2086:	46 95       	lsr	r20
    2088:	37 95       	ror	r19
    208a:	27 95       	ror	r18
    208c:	a7 95       	ror	r26
    208e:	f0 40       	sbci	r31, 0x00	; 0
    2090:	53 95       	inc	r21
    2092:	c9 f7       	brne	.-14     	; 0x2086 <__addsf3x+0x52>
    2094:	7e f4       	brtc	.+30     	; 0x20b4 <__addsf3x+0x80>
    2096:	1f 16       	cp	r1, r31
    2098:	ba 0b       	sbc	r27, r26
    209a:	62 0b       	sbc	r22, r18
    209c:	73 0b       	sbc	r23, r19
    209e:	84 0b       	sbc	r24, r20
    20a0:	ba f0       	brmi	.+46     	; 0x20d0 <__addsf3x+0x9c>
    20a2:	91 50       	subi	r25, 0x01	; 1
    20a4:	a1 f0       	breq	.+40     	; 0x20ce <__addsf3x+0x9a>
    20a6:	ff 0f       	add	r31, r31
    20a8:	bb 1f       	adc	r27, r27
    20aa:	66 1f       	adc	r22, r22
    20ac:	77 1f       	adc	r23, r23
    20ae:	88 1f       	adc	r24, r24
    20b0:	c2 f7       	brpl	.-16     	; 0x20a2 <__addsf3x+0x6e>
    20b2:	0e c0       	rjmp	.+28     	; 0x20d0 <__addsf3x+0x9c>
    20b4:	ba 0f       	add	r27, r26
    20b6:	62 1f       	adc	r22, r18
    20b8:	73 1f       	adc	r23, r19
    20ba:	84 1f       	adc	r24, r20
    20bc:	48 f4       	brcc	.+18     	; 0x20d0 <__addsf3x+0x9c>
    20be:	87 95       	ror	r24
    20c0:	77 95       	ror	r23
    20c2:	67 95       	ror	r22
    20c4:	b7 95       	ror	r27
    20c6:	f7 95       	ror	r31
    20c8:	9e 3f       	cpi	r25, 0xFE	; 254
    20ca:	08 f0       	brcs	.+2      	; 0x20ce <__addsf3x+0x9a>
    20cc:	b0 cf       	rjmp	.-160    	; 0x202e <__addsf3+0x28>
    20ce:	93 95       	inc	r25
    20d0:	88 0f       	add	r24, r24
    20d2:	08 f0       	brcs	.+2      	; 0x20d6 <__addsf3x+0xa2>
    20d4:	99 27       	eor	r25, r25
    20d6:	ee 0f       	add	r30, r30
    20d8:	97 95       	ror	r25
    20da:	87 95       	ror	r24
    20dc:	08 95       	ret

000020de <__cmpsf2>:
    20de:	0e 94 59 11 	call	0x22b2	; 0x22b2 <__fp_cmp>
    20e2:	08 f4       	brcc	.+2      	; 0x20e6 <__cmpsf2+0x8>
    20e4:	81 e0       	ldi	r24, 0x01	; 1
    20e6:	08 95       	ret

000020e8 <__divsf3>:
    20e8:	0e 94 88 10 	call	0x2110	; 0x2110 <__divsf3x>
    20ec:	0c 94 94 11 	jmp	0x2328	; 0x2328 <__fp_round>
    20f0:	0e 94 8d 11 	call	0x231a	; 0x231a <__fp_pscB>
    20f4:	58 f0       	brcs	.+22     	; 0x210c <__divsf3+0x24>
    20f6:	0e 94 86 11 	call	0x230c	; 0x230c <__fp_pscA>
    20fa:	40 f0       	brcs	.+16     	; 0x210c <__divsf3+0x24>
    20fc:	29 f4       	brne	.+10     	; 0x2108 <__divsf3+0x20>
    20fe:	5f 3f       	cpi	r21, 0xFF	; 255
    2100:	29 f0       	breq	.+10     	; 0x210c <__divsf3+0x24>
    2102:	0c 94 7d 11 	jmp	0x22fa	; 0x22fa <__fp_inf>
    2106:	51 11       	cpse	r21, r1
    2108:	0c 94 c8 11 	jmp	0x2390	; 0x2390 <__fp_szero>
    210c:	0c 94 83 11 	jmp	0x2306	; 0x2306 <__fp_nan>

00002110 <__divsf3x>:
    2110:	0e 94 a5 11 	call	0x234a	; 0x234a <__fp_split3>
    2114:	68 f3       	brcs	.-38     	; 0x20f0 <__divsf3+0x8>

00002116 <__divsf3_pse>:
    2116:	99 23       	and	r25, r25
    2118:	b1 f3       	breq	.-20     	; 0x2106 <__divsf3+0x1e>
    211a:	55 23       	and	r21, r21
    211c:	91 f3       	breq	.-28     	; 0x2102 <__divsf3+0x1a>
    211e:	95 1b       	sub	r25, r21
    2120:	55 0b       	sbc	r21, r21
    2122:	bb 27       	eor	r27, r27
    2124:	aa 27       	eor	r26, r26
    2126:	62 17       	cp	r22, r18
    2128:	73 07       	cpc	r23, r19
    212a:	84 07       	cpc	r24, r20
    212c:	38 f0       	brcs	.+14     	; 0x213c <__divsf3_pse+0x26>
    212e:	9f 5f       	subi	r25, 0xFF	; 255
    2130:	5f 4f       	sbci	r21, 0xFF	; 255
    2132:	22 0f       	add	r18, r18
    2134:	33 1f       	adc	r19, r19
    2136:	44 1f       	adc	r20, r20
    2138:	aa 1f       	adc	r26, r26
    213a:	a9 f3       	breq	.-22     	; 0x2126 <__divsf3_pse+0x10>
    213c:	35 d0       	rcall	.+106    	; 0x21a8 <__divsf3_pse+0x92>
    213e:	0e 2e       	mov	r0, r30
    2140:	3a f0       	brmi	.+14     	; 0x2150 <__divsf3_pse+0x3a>
    2142:	e0 e8       	ldi	r30, 0x80	; 128
    2144:	32 d0       	rcall	.+100    	; 0x21aa <__divsf3_pse+0x94>
    2146:	91 50       	subi	r25, 0x01	; 1
    2148:	50 40       	sbci	r21, 0x00	; 0
    214a:	e6 95       	lsr	r30
    214c:	00 1c       	adc	r0, r0
    214e:	ca f7       	brpl	.-14     	; 0x2142 <__divsf3_pse+0x2c>
    2150:	2b d0       	rcall	.+86     	; 0x21a8 <__divsf3_pse+0x92>
    2152:	fe 2f       	mov	r31, r30
    2154:	29 d0       	rcall	.+82     	; 0x21a8 <__divsf3_pse+0x92>
    2156:	66 0f       	add	r22, r22
    2158:	77 1f       	adc	r23, r23
    215a:	88 1f       	adc	r24, r24
    215c:	bb 1f       	adc	r27, r27
    215e:	26 17       	cp	r18, r22
    2160:	37 07       	cpc	r19, r23
    2162:	48 07       	cpc	r20, r24
    2164:	ab 07       	cpc	r26, r27
    2166:	b0 e8       	ldi	r27, 0x80	; 128
    2168:	09 f0       	breq	.+2      	; 0x216c <__divsf3_pse+0x56>
    216a:	bb 0b       	sbc	r27, r27
    216c:	80 2d       	mov	r24, r0
    216e:	bf 01       	movw	r22, r30
    2170:	ff 27       	eor	r31, r31
    2172:	93 58       	subi	r25, 0x83	; 131
    2174:	5f 4f       	sbci	r21, 0xFF	; 255
    2176:	3a f0       	brmi	.+14     	; 0x2186 <__divsf3_pse+0x70>
    2178:	9e 3f       	cpi	r25, 0xFE	; 254
    217a:	51 05       	cpc	r21, r1
    217c:	78 f0       	brcs	.+30     	; 0x219c <__divsf3_pse+0x86>
    217e:	0c 94 7d 11 	jmp	0x22fa	; 0x22fa <__fp_inf>
    2182:	0c 94 c8 11 	jmp	0x2390	; 0x2390 <__fp_szero>
    2186:	5f 3f       	cpi	r21, 0xFF	; 255
    2188:	e4 f3       	brlt	.-8      	; 0x2182 <__divsf3_pse+0x6c>
    218a:	98 3e       	cpi	r25, 0xE8	; 232
    218c:	d4 f3       	brlt	.-12     	; 0x2182 <__divsf3_pse+0x6c>
    218e:	86 95       	lsr	r24
    2190:	77 95       	ror	r23
    2192:	67 95       	ror	r22
    2194:	b7 95       	ror	r27
    2196:	f7 95       	ror	r31
    2198:	9f 5f       	subi	r25, 0xFF	; 255
    219a:	c9 f7       	brne	.-14     	; 0x218e <__divsf3_pse+0x78>
    219c:	88 0f       	add	r24, r24
    219e:	91 1d       	adc	r25, r1
    21a0:	96 95       	lsr	r25
    21a2:	87 95       	ror	r24
    21a4:	97 f9       	bld	r25, 7
    21a6:	08 95       	ret
    21a8:	e1 e0       	ldi	r30, 0x01	; 1
    21aa:	66 0f       	add	r22, r22
    21ac:	77 1f       	adc	r23, r23
    21ae:	88 1f       	adc	r24, r24
    21b0:	bb 1f       	adc	r27, r27
    21b2:	62 17       	cp	r22, r18
    21b4:	73 07       	cpc	r23, r19
    21b6:	84 07       	cpc	r24, r20
    21b8:	ba 07       	cpc	r27, r26
    21ba:	20 f0       	brcs	.+8      	; 0x21c4 <__divsf3_pse+0xae>
    21bc:	62 1b       	sub	r22, r18
    21be:	73 0b       	sbc	r23, r19
    21c0:	84 0b       	sbc	r24, r20
    21c2:	ba 0b       	sbc	r27, r26
    21c4:	ee 1f       	adc	r30, r30
    21c6:	88 f7       	brcc	.-30     	; 0x21aa <__divsf3_pse+0x94>
    21c8:	e0 95       	com	r30
    21ca:	08 95       	ret

000021cc <__fixsfsi>:
    21cc:	0e 94 ed 10 	call	0x21da	; 0x21da <__fixunssfsi>
    21d0:	68 94       	set
    21d2:	b1 11       	cpse	r27, r1
    21d4:	0c 94 c8 11 	jmp	0x2390	; 0x2390 <__fp_szero>
    21d8:	08 95       	ret

000021da <__fixunssfsi>:
    21da:	0e 94 ad 11 	call	0x235a	; 0x235a <__fp_splitA>
    21de:	88 f0       	brcs	.+34     	; 0x2202 <__fixunssfsi+0x28>
    21e0:	9f 57       	subi	r25, 0x7F	; 127
    21e2:	98 f0       	brcs	.+38     	; 0x220a <__fixunssfsi+0x30>
    21e4:	b9 2f       	mov	r27, r25
    21e6:	99 27       	eor	r25, r25
    21e8:	b7 51       	subi	r27, 0x17	; 23
    21ea:	b0 f0       	brcs	.+44     	; 0x2218 <__fixunssfsi+0x3e>
    21ec:	e1 f0       	breq	.+56     	; 0x2226 <__fixunssfsi+0x4c>
    21ee:	66 0f       	add	r22, r22
    21f0:	77 1f       	adc	r23, r23
    21f2:	88 1f       	adc	r24, r24
    21f4:	99 1f       	adc	r25, r25
    21f6:	1a f0       	brmi	.+6      	; 0x21fe <__fixunssfsi+0x24>
    21f8:	ba 95       	dec	r27
    21fa:	c9 f7       	brne	.-14     	; 0x21ee <__fixunssfsi+0x14>
    21fc:	14 c0       	rjmp	.+40     	; 0x2226 <__fixunssfsi+0x4c>
    21fe:	b1 30       	cpi	r27, 0x01	; 1
    2200:	91 f0       	breq	.+36     	; 0x2226 <__fixunssfsi+0x4c>
    2202:	0e 94 c7 11 	call	0x238e	; 0x238e <__fp_zero>
    2206:	b1 e0       	ldi	r27, 0x01	; 1
    2208:	08 95       	ret
    220a:	0c 94 c7 11 	jmp	0x238e	; 0x238e <__fp_zero>
    220e:	67 2f       	mov	r22, r23
    2210:	78 2f       	mov	r23, r24
    2212:	88 27       	eor	r24, r24
    2214:	b8 5f       	subi	r27, 0xF8	; 248
    2216:	39 f0       	breq	.+14     	; 0x2226 <__fixunssfsi+0x4c>
    2218:	b9 3f       	cpi	r27, 0xF9	; 249
    221a:	cc f3       	brlt	.-14     	; 0x220e <__fixunssfsi+0x34>
    221c:	86 95       	lsr	r24
    221e:	77 95       	ror	r23
    2220:	67 95       	ror	r22
    2222:	b3 95       	inc	r27
    2224:	d9 f7       	brne	.-10     	; 0x221c <__fixunssfsi+0x42>
    2226:	3e f4       	brtc	.+14     	; 0x2236 <__fixunssfsi+0x5c>
    2228:	90 95       	com	r25
    222a:	80 95       	com	r24
    222c:	70 95       	com	r23
    222e:	61 95       	neg	r22
    2230:	7f 4f       	sbci	r23, 0xFF	; 255
    2232:	8f 4f       	sbci	r24, 0xFF	; 255
    2234:	9f 4f       	sbci	r25, 0xFF	; 255
    2236:	08 95       	ret

00002238 <__floatunsisf>:
    2238:	e8 94       	clt
    223a:	09 c0       	rjmp	.+18     	; 0x224e <__floatsisf+0x12>

0000223c <__floatsisf>:
    223c:	97 fb       	bst	r25, 7
    223e:	3e f4       	brtc	.+14     	; 0x224e <__floatsisf+0x12>
    2240:	90 95       	com	r25
    2242:	80 95       	com	r24
    2244:	70 95       	com	r23
    2246:	61 95       	neg	r22
    2248:	7f 4f       	sbci	r23, 0xFF	; 255
    224a:	8f 4f       	sbci	r24, 0xFF	; 255
    224c:	9f 4f       	sbci	r25, 0xFF	; 255
    224e:	99 23       	and	r25, r25
    2250:	a9 f0       	breq	.+42     	; 0x227c <__floatsisf+0x40>
    2252:	f9 2f       	mov	r31, r25
    2254:	96 e9       	ldi	r25, 0x96	; 150
    2256:	bb 27       	eor	r27, r27
    2258:	93 95       	inc	r25
    225a:	f6 95       	lsr	r31
    225c:	87 95       	ror	r24
    225e:	77 95       	ror	r23
    2260:	67 95       	ror	r22
    2262:	b7 95       	ror	r27
    2264:	f1 11       	cpse	r31, r1
    2266:	f8 cf       	rjmp	.-16     	; 0x2258 <__floatsisf+0x1c>
    2268:	fa f4       	brpl	.+62     	; 0x22a8 <__floatsisf+0x6c>
    226a:	bb 0f       	add	r27, r27
    226c:	11 f4       	brne	.+4      	; 0x2272 <__floatsisf+0x36>
    226e:	60 ff       	sbrs	r22, 0
    2270:	1b c0       	rjmp	.+54     	; 0x22a8 <__floatsisf+0x6c>
    2272:	6f 5f       	subi	r22, 0xFF	; 255
    2274:	7f 4f       	sbci	r23, 0xFF	; 255
    2276:	8f 4f       	sbci	r24, 0xFF	; 255
    2278:	9f 4f       	sbci	r25, 0xFF	; 255
    227a:	16 c0       	rjmp	.+44     	; 0x22a8 <__floatsisf+0x6c>
    227c:	88 23       	and	r24, r24
    227e:	11 f0       	breq	.+4      	; 0x2284 <__floatsisf+0x48>
    2280:	96 e9       	ldi	r25, 0x96	; 150
    2282:	11 c0       	rjmp	.+34     	; 0x22a6 <__floatsisf+0x6a>
    2284:	77 23       	and	r23, r23
    2286:	21 f0       	breq	.+8      	; 0x2290 <__floatsisf+0x54>
    2288:	9e e8       	ldi	r25, 0x8E	; 142
    228a:	87 2f       	mov	r24, r23
    228c:	76 2f       	mov	r23, r22
    228e:	05 c0       	rjmp	.+10     	; 0x229a <__floatsisf+0x5e>
    2290:	66 23       	and	r22, r22
    2292:	71 f0       	breq	.+28     	; 0x22b0 <__floatsisf+0x74>
    2294:	96 e8       	ldi	r25, 0x86	; 134
    2296:	86 2f       	mov	r24, r22
    2298:	70 e0       	ldi	r23, 0x00	; 0
    229a:	60 e0       	ldi	r22, 0x00	; 0
    229c:	2a f0       	brmi	.+10     	; 0x22a8 <__floatsisf+0x6c>
    229e:	9a 95       	dec	r25
    22a0:	66 0f       	add	r22, r22
    22a2:	77 1f       	adc	r23, r23
    22a4:	88 1f       	adc	r24, r24
    22a6:	da f7       	brpl	.-10     	; 0x229e <__floatsisf+0x62>
    22a8:	88 0f       	add	r24, r24
    22aa:	96 95       	lsr	r25
    22ac:	87 95       	ror	r24
    22ae:	97 f9       	bld	r25, 7
    22b0:	08 95       	ret

000022b2 <__fp_cmp>:
    22b2:	99 0f       	add	r25, r25
    22b4:	00 08       	sbc	r0, r0
    22b6:	55 0f       	add	r21, r21
    22b8:	aa 0b       	sbc	r26, r26
    22ba:	e0 e8       	ldi	r30, 0x80	; 128
    22bc:	fe ef       	ldi	r31, 0xFE	; 254
    22be:	16 16       	cp	r1, r22
    22c0:	17 06       	cpc	r1, r23
    22c2:	e8 07       	cpc	r30, r24
    22c4:	f9 07       	cpc	r31, r25
    22c6:	c0 f0       	brcs	.+48     	; 0x22f8 <__fp_cmp+0x46>
    22c8:	12 16       	cp	r1, r18
    22ca:	13 06       	cpc	r1, r19
    22cc:	e4 07       	cpc	r30, r20
    22ce:	f5 07       	cpc	r31, r21
    22d0:	98 f0       	brcs	.+38     	; 0x22f8 <__fp_cmp+0x46>
    22d2:	62 1b       	sub	r22, r18
    22d4:	73 0b       	sbc	r23, r19
    22d6:	84 0b       	sbc	r24, r20
    22d8:	95 0b       	sbc	r25, r21
    22da:	39 f4       	brne	.+14     	; 0x22ea <__fp_cmp+0x38>
    22dc:	0a 26       	eor	r0, r26
    22de:	61 f0       	breq	.+24     	; 0x22f8 <__fp_cmp+0x46>
    22e0:	23 2b       	or	r18, r19
    22e2:	24 2b       	or	r18, r20
    22e4:	25 2b       	or	r18, r21
    22e6:	21 f4       	brne	.+8      	; 0x22f0 <__fp_cmp+0x3e>
    22e8:	08 95       	ret
    22ea:	0a 26       	eor	r0, r26
    22ec:	09 f4       	brne	.+2      	; 0x22f0 <__fp_cmp+0x3e>
    22ee:	a1 40       	sbci	r26, 0x01	; 1
    22f0:	a6 95       	lsr	r26
    22f2:	8f ef       	ldi	r24, 0xFF	; 255
    22f4:	81 1d       	adc	r24, r1
    22f6:	81 1d       	adc	r24, r1
    22f8:	08 95       	ret

000022fa <__fp_inf>:
    22fa:	97 f9       	bld	r25, 7
    22fc:	9f 67       	ori	r25, 0x7F	; 127
    22fe:	80 e8       	ldi	r24, 0x80	; 128
    2300:	70 e0       	ldi	r23, 0x00	; 0
    2302:	60 e0       	ldi	r22, 0x00	; 0
    2304:	08 95       	ret

00002306 <__fp_nan>:
    2306:	9f ef       	ldi	r25, 0xFF	; 255
    2308:	80 ec       	ldi	r24, 0xC0	; 192
    230a:	08 95       	ret

0000230c <__fp_pscA>:
    230c:	00 24       	eor	r0, r0
    230e:	0a 94       	dec	r0
    2310:	16 16       	cp	r1, r22
    2312:	17 06       	cpc	r1, r23
    2314:	18 06       	cpc	r1, r24
    2316:	09 06       	cpc	r0, r25
    2318:	08 95       	ret

0000231a <__fp_pscB>:
    231a:	00 24       	eor	r0, r0
    231c:	0a 94       	dec	r0
    231e:	12 16       	cp	r1, r18
    2320:	13 06       	cpc	r1, r19
    2322:	14 06       	cpc	r1, r20
    2324:	05 06       	cpc	r0, r21
    2326:	08 95       	ret

00002328 <__fp_round>:
    2328:	09 2e       	mov	r0, r25
    232a:	03 94       	inc	r0
    232c:	00 0c       	add	r0, r0
    232e:	11 f4       	brne	.+4      	; 0x2334 <__fp_round+0xc>
    2330:	88 23       	and	r24, r24
    2332:	52 f0       	brmi	.+20     	; 0x2348 <__fp_round+0x20>
    2334:	bb 0f       	add	r27, r27
    2336:	40 f4       	brcc	.+16     	; 0x2348 <__fp_round+0x20>
    2338:	bf 2b       	or	r27, r31
    233a:	11 f4       	brne	.+4      	; 0x2340 <__fp_round+0x18>
    233c:	60 ff       	sbrs	r22, 0
    233e:	04 c0       	rjmp	.+8      	; 0x2348 <__fp_round+0x20>
    2340:	6f 5f       	subi	r22, 0xFF	; 255
    2342:	7f 4f       	sbci	r23, 0xFF	; 255
    2344:	8f 4f       	sbci	r24, 0xFF	; 255
    2346:	9f 4f       	sbci	r25, 0xFF	; 255
    2348:	08 95       	ret

0000234a <__fp_split3>:
    234a:	57 fd       	sbrc	r21, 7
    234c:	90 58       	subi	r25, 0x80	; 128
    234e:	44 0f       	add	r20, r20
    2350:	55 1f       	adc	r21, r21
    2352:	59 f0       	breq	.+22     	; 0x236a <__fp_splitA+0x10>
    2354:	5f 3f       	cpi	r21, 0xFF	; 255
    2356:	71 f0       	breq	.+28     	; 0x2374 <__fp_splitA+0x1a>
    2358:	47 95       	ror	r20

0000235a <__fp_splitA>:
    235a:	88 0f       	add	r24, r24
    235c:	97 fb       	bst	r25, 7
    235e:	99 1f       	adc	r25, r25
    2360:	61 f0       	breq	.+24     	; 0x237a <__fp_splitA+0x20>
    2362:	9f 3f       	cpi	r25, 0xFF	; 255
    2364:	79 f0       	breq	.+30     	; 0x2384 <__fp_splitA+0x2a>
    2366:	87 95       	ror	r24
    2368:	08 95       	ret
    236a:	12 16       	cp	r1, r18
    236c:	13 06       	cpc	r1, r19
    236e:	14 06       	cpc	r1, r20
    2370:	55 1f       	adc	r21, r21
    2372:	f2 cf       	rjmp	.-28     	; 0x2358 <__fp_split3+0xe>
    2374:	46 95       	lsr	r20
    2376:	f1 df       	rcall	.-30     	; 0x235a <__fp_splitA>
    2378:	08 c0       	rjmp	.+16     	; 0x238a <__fp_splitA+0x30>
    237a:	16 16       	cp	r1, r22
    237c:	17 06       	cpc	r1, r23
    237e:	18 06       	cpc	r1, r24
    2380:	99 1f       	adc	r25, r25
    2382:	f1 cf       	rjmp	.-30     	; 0x2366 <__fp_splitA+0xc>
    2384:	86 95       	lsr	r24
    2386:	71 05       	cpc	r23, r1
    2388:	61 05       	cpc	r22, r1
    238a:	08 94       	sec
    238c:	08 95       	ret

0000238e <__fp_zero>:
    238e:	e8 94       	clt

00002390 <__fp_szero>:
    2390:	bb 27       	eor	r27, r27
    2392:	66 27       	eor	r22, r22
    2394:	77 27       	eor	r23, r23
    2396:	cb 01       	movw	r24, r22
    2398:	97 f9       	bld	r25, 7
    239a:	08 95       	ret

0000239c <__gesf2>:
    239c:	0e 94 59 11 	call	0x22b2	; 0x22b2 <__fp_cmp>
    23a0:	08 f4       	brcc	.+2      	; 0x23a4 <__gesf2+0x8>
    23a2:	8f ef       	ldi	r24, 0xFF	; 255
    23a4:	08 95       	ret

000023a6 <__mulsf3>:
    23a6:	0e 94 e6 11 	call	0x23cc	; 0x23cc <__mulsf3x>
    23aa:	0c 94 94 11 	jmp	0x2328	; 0x2328 <__fp_round>
    23ae:	0e 94 86 11 	call	0x230c	; 0x230c <__fp_pscA>
    23b2:	38 f0       	brcs	.+14     	; 0x23c2 <__mulsf3+0x1c>
    23b4:	0e 94 8d 11 	call	0x231a	; 0x231a <__fp_pscB>
    23b8:	20 f0       	brcs	.+8      	; 0x23c2 <__mulsf3+0x1c>
    23ba:	95 23       	and	r25, r21
    23bc:	11 f0       	breq	.+4      	; 0x23c2 <__mulsf3+0x1c>
    23be:	0c 94 7d 11 	jmp	0x22fa	; 0x22fa <__fp_inf>
    23c2:	0c 94 83 11 	jmp	0x2306	; 0x2306 <__fp_nan>
    23c6:	11 24       	eor	r1, r1
    23c8:	0c 94 c8 11 	jmp	0x2390	; 0x2390 <__fp_szero>

000023cc <__mulsf3x>:
    23cc:	0e 94 a5 11 	call	0x234a	; 0x234a <__fp_split3>
    23d0:	70 f3       	brcs	.-36     	; 0x23ae <__mulsf3+0x8>

000023d2 <__mulsf3_pse>:
    23d2:	95 9f       	mul	r25, r21
    23d4:	c1 f3       	breq	.-16     	; 0x23c6 <__mulsf3+0x20>
    23d6:	95 0f       	add	r25, r21
    23d8:	50 e0       	ldi	r21, 0x00	; 0
    23da:	55 1f       	adc	r21, r21
    23dc:	62 9f       	mul	r22, r18
    23de:	f0 01       	movw	r30, r0
    23e0:	72 9f       	mul	r23, r18
    23e2:	bb 27       	eor	r27, r27
    23e4:	f0 0d       	add	r31, r0
    23e6:	b1 1d       	adc	r27, r1
    23e8:	63 9f       	mul	r22, r19
    23ea:	aa 27       	eor	r26, r26
    23ec:	f0 0d       	add	r31, r0
    23ee:	b1 1d       	adc	r27, r1
    23f0:	aa 1f       	adc	r26, r26
    23f2:	64 9f       	mul	r22, r20
    23f4:	66 27       	eor	r22, r22
    23f6:	b0 0d       	add	r27, r0
    23f8:	a1 1d       	adc	r26, r1
    23fa:	66 1f       	adc	r22, r22
    23fc:	82 9f       	mul	r24, r18
    23fe:	22 27       	eor	r18, r18
    2400:	b0 0d       	add	r27, r0
    2402:	a1 1d       	adc	r26, r1
    2404:	62 1f       	adc	r22, r18
    2406:	73 9f       	mul	r23, r19
    2408:	b0 0d       	add	r27, r0
    240a:	a1 1d       	adc	r26, r1
    240c:	62 1f       	adc	r22, r18
    240e:	83 9f       	mul	r24, r19
    2410:	a0 0d       	add	r26, r0
    2412:	61 1d       	adc	r22, r1
    2414:	22 1f       	adc	r18, r18
    2416:	74 9f       	mul	r23, r20
    2418:	33 27       	eor	r19, r19
    241a:	a0 0d       	add	r26, r0
    241c:	61 1d       	adc	r22, r1
    241e:	23 1f       	adc	r18, r19
    2420:	84 9f       	mul	r24, r20
    2422:	60 0d       	add	r22, r0
    2424:	21 1d       	adc	r18, r1
    2426:	82 2f       	mov	r24, r18
    2428:	76 2f       	mov	r23, r22
    242a:	6a 2f       	mov	r22, r26
    242c:	11 24       	eor	r1, r1
    242e:	9f 57       	subi	r25, 0x7F	; 127
    2430:	50 40       	sbci	r21, 0x00	; 0
    2432:	9a f0       	brmi	.+38     	; 0x245a <__mulsf3_pse+0x88>
    2434:	f1 f0       	breq	.+60     	; 0x2472 <__mulsf3_pse+0xa0>
    2436:	88 23       	and	r24, r24
    2438:	4a f0       	brmi	.+18     	; 0x244c <__mulsf3_pse+0x7a>
    243a:	ee 0f       	add	r30, r30
    243c:	ff 1f       	adc	r31, r31
    243e:	bb 1f       	adc	r27, r27
    2440:	66 1f       	adc	r22, r22
    2442:	77 1f       	adc	r23, r23
    2444:	88 1f       	adc	r24, r24
    2446:	91 50       	subi	r25, 0x01	; 1
    2448:	50 40       	sbci	r21, 0x00	; 0
    244a:	a9 f7       	brne	.-22     	; 0x2436 <__mulsf3_pse+0x64>
    244c:	9e 3f       	cpi	r25, 0xFE	; 254
    244e:	51 05       	cpc	r21, r1
    2450:	80 f0       	brcs	.+32     	; 0x2472 <__mulsf3_pse+0xa0>
    2452:	0c 94 7d 11 	jmp	0x22fa	; 0x22fa <__fp_inf>
    2456:	0c 94 c8 11 	jmp	0x2390	; 0x2390 <__fp_szero>
    245a:	5f 3f       	cpi	r21, 0xFF	; 255
    245c:	e4 f3       	brlt	.-8      	; 0x2456 <__mulsf3_pse+0x84>
    245e:	98 3e       	cpi	r25, 0xE8	; 232
    2460:	d4 f3       	brlt	.-12     	; 0x2456 <__mulsf3_pse+0x84>
    2462:	86 95       	lsr	r24
    2464:	77 95       	ror	r23
    2466:	67 95       	ror	r22
    2468:	b7 95       	ror	r27
    246a:	f7 95       	ror	r31
    246c:	e7 95       	ror	r30
    246e:	9f 5f       	subi	r25, 0xFF	; 255
    2470:	c1 f7       	brne	.-16     	; 0x2462 <__mulsf3_pse+0x90>
    2472:	fe 2b       	or	r31, r30
    2474:	88 0f       	add	r24, r24
    2476:	91 1d       	adc	r25, r1
    2478:	96 95       	lsr	r25
    247a:	87 95       	ror	r24
    247c:	97 f9       	bld	r25, 7
    247e:	08 95       	ret

00002480 <pow>:
    2480:	fa 01       	movw	r30, r20
    2482:	ee 0f       	add	r30, r30
    2484:	ff 1f       	adc	r31, r31
    2486:	30 96       	adiw	r30, 0x00	; 0
    2488:	21 05       	cpc	r18, r1
    248a:	31 05       	cpc	r19, r1
    248c:	a1 f1       	breq	.+104    	; 0x24f6 <pow+0x76>
    248e:	61 15       	cp	r22, r1
    2490:	71 05       	cpc	r23, r1
    2492:	61 f4       	brne	.+24     	; 0x24ac <pow+0x2c>
    2494:	80 38       	cpi	r24, 0x80	; 128
    2496:	bf e3       	ldi	r27, 0x3F	; 63
    2498:	9b 07       	cpc	r25, r27
    249a:	49 f1       	breq	.+82     	; 0x24ee <pow+0x6e>
    249c:	68 94       	set
    249e:	90 38       	cpi	r25, 0x80	; 128
    24a0:	81 05       	cpc	r24, r1
    24a2:	61 f0       	breq	.+24     	; 0x24bc <pow+0x3c>
    24a4:	80 38       	cpi	r24, 0x80	; 128
    24a6:	bf ef       	ldi	r27, 0xFF	; 255
    24a8:	9b 07       	cpc	r25, r27
    24aa:	41 f0       	breq	.+16     	; 0x24bc <pow+0x3c>
    24ac:	99 23       	and	r25, r25
    24ae:	4a f5       	brpl	.+82     	; 0x2502 <pow+0x82>
    24b0:	ff 3f       	cpi	r31, 0xFF	; 255
    24b2:	e1 05       	cpc	r30, r1
    24b4:	31 05       	cpc	r19, r1
    24b6:	21 05       	cpc	r18, r1
    24b8:	19 f1       	breq	.+70     	; 0x2500 <pow+0x80>
    24ba:	e8 94       	clt
    24bc:	08 94       	sec
    24be:	e7 95       	ror	r30
    24c0:	d9 01       	movw	r26, r18
    24c2:	aa 23       	and	r26, r26
    24c4:	29 f4       	brne	.+10     	; 0x24d0 <pow+0x50>
    24c6:	ab 2f       	mov	r26, r27
    24c8:	be 2f       	mov	r27, r30
    24ca:	f8 5f       	subi	r31, 0xF8	; 248
    24cc:	d0 f3       	brcs	.-12     	; 0x24c2 <pow+0x42>
    24ce:	10 c0       	rjmp	.+32     	; 0x24f0 <pow+0x70>
    24d0:	ff 5f       	subi	r31, 0xFF	; 255
    24d2:	70 f4       	brcc	.+28     	; 0x24f0 <pow+0x70>
    24d4:	a6 95       	lsr	r26
    24d6:	e0 f7       	brcc	.-8      	; 0x24d0 <pow+0x50>
    24d8:	f7 39       	cpi	r31, 0x97	; 151
    24da:	50 f0       	brcs	.+20     	; 0x24f0 <pow+0x70>
    24dc:	19 f0       	breq	.+6      	; 0x24e4 <pow+0x64>
    24de:	ff 3a       	cpi	r31, 0xAF	; 175
    24e0:	38 f4       	brcc	.+14     	; 0x24f0 <pow+0x70>
    24e2:	9f 77       	andi	r25, 0x7F	; 127
    24e4:	9f 93       	push	r25
    24e6:	0d d0       	rcall	.+26     	; 0x2502 <pow+0x82>
    24e8:	0f 90       	pop	r0
    24ea:	07 fc       	sbrc	r0, 7
    24ec:	90 58       	subi	r25, 0x80	; 128
    24ee:	08 95       	ret
    24f0:	46 f0       	brts	.+16     	; 0x2502 <pow+0x82>
    24f2:	0c 94 83 11 	jmp	0x2306	; 0x2306 <__fp_nan>
    24f6:	60 e0       	ldi	r22, 0x00	; 0
    24f8:	70 e0       	ldi	r23, 0x00	; 0
    24fa:	80 e8       	ldi	r24, 0x80	; 128
    24fc:	9f e3       	ldi	r25, 0x3F	; 63
    24fe:	08 95       	ret
    2500:	4f e7       	ldi	r20, 0x7F	; 127
    2502:	9f 77       	andi	r25, 0x7F	; 127
    2504:	5f 93       	push	r21
    2506:	4f 93       	push	r20
    2508:	3f 93       	push	r19
    250a:	2f 93       	push	r18
    250c:	0e 94 96 13 	call	0x272c	; 0x272c <log>
    2510:	2f 91       	pop	r18
    2512:	3f 91       	pop	r19
    2514:	4f 91       	pop	r20
    2516:	5f 91       	pop	r21
    2518:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <__mulsf3>
    251c:	0c 94 de 12 	jmp	0x25bc	; 0x25bc <exp>
    2520:	19 f4       	brne	.+6      	; 0x2528 <pow+0xa8>
    2522:	16 f4       	brtc	.+4      	; 0x2528 <pow+0xa8>
    2524:	0c 94 83 11 	jmp	0x2306	; 0x2306 <__fp_nan>
    2528:	0c 94 10 13 	jmp	0x2620	; 0x2620 <__fp_mpack>

0000252c <sqrt>:
    252c:	0e 94 ad 11 	call	0x235a	; 0x235a <__fp_splitA>
    2530:	b8 f3       	brcs	.-18     	; 0x2520 <pow+0xa0>
    2532:	99 23       	and	r25, r25
    2534:	c9 f3       	breq	.-14     	; 0x2528 <pow+0xa8>
    2536:	b6 f3       	brts	.-20     	; 0x2524 <pow+0xa4>
    2538:	9f 57       	subi	r25, 0x7F	; 127
    253a:	55 0b       	sbc	r21, r21
    253c:	87 ff       	sbrs	r24, 7
    253e:	0e 94 1e 13 	call	0x263c	; 0x263c <__fp_norm2>
    2542:	00 24       	eor	r0, r0
    2544:	a0 e6       	ldi	r26, 0x60	; 96
    2546:	40 ea       	ldi	r20, 0xA0	; 160
    2548:	90 01       	movw	r18, r0
    254a:	80 58       	subi	r24, 0x80	; 128
    254c:	56 95       	lsr	r21
    254e:	97 95       	ror	r25
    2550:	28 f4       	brcc	.+10     	; 0x255c <sqrt+0x30>
    2552:	80 5c       	subi	r24, 0xC0	; 192
    2554:	66 0f       	add	r22, r22
    2556:	77 1f       	adc	r23, r23
    2558:	88 1f       	adc	r24, r24
    255a:	20 f0       	brcs	.+8      	; 0x2564 <sqrt+0x38>
    255c:	26 17       	cp	r18, r22
    255e:	37 07       	cpc	r19, r23
    2560:	48 07       	cpc	r20, r24
    2562:	30 f4       	brcc	.+12     	; 0x2570 <sqrt+0x44>
    2564:	62 1b       	sub	r22, r18
    2566:	73 0b       	sbc	r23, r19
    2568:	84 0b       	sbc	r24, r20
    256a:	20 29       	or	r18, r0
    256c:	31 29       	or	r19, r1
    256e:	4a 2b       	or	r20, r26
    2570:	a6 95       	lsr	r26
    2572:	17 94       	ror	r1
    2574:	07 94       	ror	r0
    2576:	20 25       	eor	r18, r0
    2578:	31 25       	eor	r19, r1
    257a:	4a 27       	eor	r20, r26
    257c:	58 f7       	brcc	.-42     	; 0x2554 <sqrt+0x28>
    257e:	66 0f       	add	r22, r22
    2580:	77 1f       	adc	r23, r23
    2582:	88 1f       	adc	r24, r24
    2584:	20 f0       	brcs	.+8      	; 0x258e <sqrt+0x62>
    2586:	26 17       	cp	r18, r22
    2588:	37 07       	cpc	r19, r23
    258a:	48 07       	cpc	r20, r24
    258c:	30 f4       	brcc	.+12     	; 0x259a <sqrt+0x6e>
    258e:	62 0b       	sbc	r22, r18
    2590:	73 0b       	sbc	r23, r19
    2592:	84 0b       	sbc	r24, r20
    2594:	20 0d       	add	r18, r0
    2596:	31 1d       	adc	r19, r1
    2598:	41 1d       	adc	r20, r1
    259a:	a0 95       	com	r26
    259c:	81 f7       	brne	.-32     	; 0x257e <sqrt+0x52>
    259e:	b9 01       	movw	r22, r18
    25a0:	84 2f       	mov	r24, r20
    25a2:	91 58       	subi	r25, 0x81	; 129
    25a4:	88 0f       	add	r24, r24
    25a6:	96 95       	lsr	r25
    25a8:	87 95       	ror	r24
    25aa:	08 95       	ret
    25ac:	29 f4       	brne	.+10     	; 0x25b8 <sqrt+0x8c>
    25ae:	16 f0       	brts	.+4      	; 0x25b4 <sqrt+0x88>
    25b0:	0c 94 7d 11 	jmp	0x22fa	; 0x22fa <__fp_inf>
    25b4:	0c 94 c7 11 	jmp	0x238e	; 0x238e <__fp_zero>
    25b8:	0c 94 83 11 	jmp	0x2306	; 0x2306 <__fp_nan>

000025bc <exp>:
    25bc:	0e 94 ad 11 	call	0x235a	; 0x235a <__fp_splitA>
    25c0:	a8 f3       	brcs	.-22     	; 0x25ac <sqrt+0x80>
    25c2:	96 38       	cpi	r25, 0x86	; 134
    25c4:	a0 f7       	brcc	.-24     	; 0x25ae <sqrt+0x82>
    25c6:	07 f8       	bld	r0, 7
    25c8:	0f 92       	push	r0
    25ca:	e8 94       	clt
    25cc:	2b e3       	ldi	r18, 0x3B	; 59
    25ce:	3a ea       	ldi	r19, 0xAA	; 170
    25d0:	48 eb       	ldi	r20, 0xB8	; 184
    25d2:	5f e7       	ldi	r21, 0x7F	; 127
    25d4:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <__mulsf3_pse>
    25d8:	0f 92       	push	r0
    25da:	0f 92       	push	r0
    25dc:	0f 92       	push	r0
    25de:	4d b7       	in	r20, 0x3d	; 61
    25e0:	5e b7       	in	r21, 0x3e	; 62
    25e2:	0f 92       	push	r0
    25e4:	0e 94 de 13 	call	0x27bc	; 0x27bc <modf>
    25e8:	e8 e6       	ldi	r30, 0x68	; 104
    25ea:	f0 e0       	ldi	r31, 0x00	; 0
    25ec:	0e 94 25 13 	call	0x264a	; 0x264a <__fp_powser>
    25f0:	4f 91       	pop	r20
    25f2:	5f 91       	pop	r21
    25f4:	ef 91       	pop	r30
    25f6:	ff 91       	pop	r31
    25f8:	e5 95       	asr	r30
    25fa:	ee 1f       	adc	r30, r30
    25fc:	ff 1f       	adc	r31, r31
    25fe:	49 f0       	breq	.+18     	; 0x2612 <exp+0x56>
    2600:	fe 57       	subi	r31, 0x7E	; 126
    2602:	e0 68       	ori	r30, 0x80	; 128
    2604:	44 27       	eor	r20, r20
    2606:	ee 0f       	add	r30, r30
    2608:	44 1f       	adc	r20, r20
    260a:	fa 95       	dec	r31
    260c:	e1 f7       	brne	.-8      	; 0x2606 <exp+0x4a>
    260e:	41 95       	neg	r20
    2610:	55 0b       	sbc	r21, r21
    2612:	0e 94 58 13 	call	0x26b0	; 0x26b0 <ldexp>
    2616:	0f 90       	pop	r0
    2618:	07 fe       	sbrs	r0, 7
    261a:	0c 94 4c 13 	jmp	0x2698	; 0x2698 <inverse>
    261e:	08 95       	ret

00002620 <__fp_mpack>:
    2620:	9f 3f       	cpi	r25, 0xFF	; 255
    2622:	31 f0       	breq	.+12     	; 0x2630 <__fp_mpack_finite+0xc>

00002624 <__fp_mpack_finite>:
    2624:	91 50       	subi	r25, 0x01	; 1
    2626:	20 f4       	brcc	.+8      	; 0x2630 <__fp_mpack_finite+0xc>
    2628:	87 95       	ror	r24
    262a:	77 95       	ror	r23
    262c:	67 95       	ror	r22
    262e:	b7 95       	ror	r27
    2630:	88 0f       	add	r24, r24
    2632:	91 1d       	adc	r25, r1
    2634:	96 95       	lsr	r25
    2636:	87 95       	ror	r24
    2638:	97 f9       	bld	r25, 7
    263a:	08 95       	ret

0000263c <__fp_norm2>:
    263c:	91 50       	subi	r25, 0x01	; 1
    263e:	50 40       	sbci	r21, 0x00	; 0
    2640:	66 0f       	add	r22, r22
    2642:	77 1f       	adc	r23, r23
    2644:	88 1f       	adc	r24, r24
    2646:	d2 f7       	brpl	.-12     	; 0x263c <__fp_norm2>
    2648:	08 95       	ret

0000264a <__fp_powser>:
    264a:	df 93       	push	r29
    264c:	cf 93       	push	r28
    264e:	1f 93       	push	r17
    2650:	0f 93       	push	r16
    2652:	ff 92       	push	r15
    2654:	ef 92       	push	r14
    2656:	df 92       	push	r13
    2658:	7b 01       	movw	r14, r22
    265a:	8c 01       	movw	r16, r24
    265c:	68 94       	set
    265e:	06 c0       	rjmp	.+12     	; 0x266c <__fp_powser+0x22>
    2660:	da 2e       	mov	r13, r26
    2662:	ef 01       	movw	r28, r30
    2664:	0e 94 e6 11 	call	0x23cc	; 0x23cc <__mulsf3x>
    2668:	fe 01       	movw	r30, r28
    266a:	e8 94       	clt
    266c:	a5 91       	lpm	r26, Z+
    266e:	25 91       	lpm	r18, Z+
    2670:	35 91       	lpm	r19, Z+
    2672:	45 91       	lpm	r20, Z+
    2674:	55 91       	lpm	r21, Z+
    2676:	a6 f3       	brts	.-24     	; 0x2660 <__fp_powser+0x16>
    2678:	ef 01       	movw	r28, r30
    267a:	0e 94 1a 10 	call	0x2034	; 0x2034 <__addsf3x>
    267e:	fe 01       	movw	r30, r28
    2680:	97 01       	movw	r18, r14
    2682:	a8 01       	movw	r20, r16
    2684:	da 94       	dec	r13
    2686:	69 f7       	brne	.-38     	; 0x2662 <__fp_powser+0x18>
    2688:	df 90       	pop	r13
    268a:	ef 90       	pop	r14
    268c:	ff 90       	pop	r15
    268e:	0f 91       	pop	r16
    2690:	1f 91       	pop	r17
    2692:	cf 91       	pop	r28
    2694:	df 91       	pop	r29
    2696:	08 95       	ret

00002698 <inverse>:
    2698:	9b 01       	movw	r18, r22
    269a:	ac 01       	movw	r20, r24
    269c:	60 e0       	ldi	r22, 0x00	; 0
    269e:	70 e0       	ldi	r23, 0x00	; 0
    26a0:	80 e8       	ldi	r24, 0x80	; 128
    26a2:	9f e3       	ldi	r25, 0x3F	; 63
    26a4:	0c 94 74 10 	jmp	0x20e8	; 0x20e8 <__divsf3>
    26a8:	0c 94 7d 11 	jmp	0x22fa	; 0x22fa <__fp_inf>
    26ac:	0c 94 10 13 	jmp	0x2620	; 0x2620 <__fp_mpack>

000026b0 <ldexp>:
    26b0:	0e 94 ad 11 	call	0x235a	; 0x235a <__fp_splitA>
    26b4:	d8 f3       	brcs	.-10     	; 0x26ac <inverse+0x14>
    26b6:	99 23       	and	r25, r25
    26b8:	c9 f3       	breq	.-14     	; 0x26ac <inverse+0x14>
    26ba:	94 0f       	add	r25, r20
    26bc:	51 1d       	adc	r21, r1
    26be:	a3 f3       	brvs	.-24     	; 0x26a8 <inverse+0x10>
    26c0:	91 50       	subi	r25, 0x01	; 1
    26c2:	50 40       	sbci	r21, 0x00	; 0
    26c4:	94 f0       	brlt	.+36     	; 0x26ea <ldexp+0x3a>
    26c6:	59 f0       	breq	.+22     	; 0x26de <ldexp+0x2e>
    26c8:	88 23       	and	r24, r24
    26ca:	32 f0       	brmi	.+12     	; 0x26d8 <ldexp+0x28>
    26cc:	66 0f       	add	r22, r22
    26ce:	77 1f       	adc	r23, r23
    26d0:	88 1f       	adc	r24, r24
    26d2:	91 50       	subi	r25, 0x01	; 1
    26d4:	50 40       	sbci	r21, 0x00	; 0
    26d6:	c1 f7       	brne	.-16     	; 0x26c8 <ldexp+0x18>
    26d8:	9e 3f       	cpi	r25, 0xFE	; 254
    26da:	51 05       	cpc	r21, r1
    26dc:	2c f7       	brge	.-54     	; 0x26a8 <inverse+0x10>
    26de:	88 0f       	add	r24, r24
    26e0:	91 1d       	adc	r25, r1
    26e2:	96 95       	lsr	r25
    26e4:	87 95       	ror	r24
    26e6:	97 f9       	bld	r25, 7
    26e8:	08 95       	ret
    26ea:	5f 3f       	cpi	r21, 0xFF	; 255
    26ec:	ac f0       	brlt	.+42     	; 0x2718 <ldexp+0x68>
    26ee:	98 3e       	cpi	r25, 0xE8	; 232
    26f0:	9c f0       	brlt	.+38     	; 0x2718 <ldexp+0x68>
    26f2:	bb 27       	eor	r27, r27
    26f4:	86 95       	lsr	r24
    26f6:	77 95       	ror	r23
    26f8:	67 95       	ror	r22
    26fa:	b7 95       	ror	r27
    26fc:	08 f4       	brcc	.+2      	; 0x2700 <ldexp+0x50>
    26fe:	b1 60       	ori	r27, 0x01	; 1
    2700:	93 95       	inc	r25
    2702:	c1 f7       	brne	.-16     	; 0x26f4 <ldexp+0x44>
    2704:	bb 0f       	add	r27, r27
    2706:	58 f7       	brcc	.-42     	; 0x26de <ldexp+0x2e>
    2708:	11 f4       	brne	.+4      	; 0x270e <ldexp+0x5e>
    270a:	60 ff       	sbrs	r22, 0
    270c:	e8 cf       	rjmp	.-48     	; 0x26de <ldexp+0x2e>
    270e:	6f 5f       	subi	r22, 0xFF	; 255
    2710:	7f 4f       	sbci	r23, 0xFF	; 255
    2712:	8f 4f       	sbci	r24, 0xFF	; 255
    2714:	9f 4f       	sbci	r25, 0xFF	; 255
    2716:	e3 cf       	rjmp	.-58     	; 0x26de <ldexp+0x2e>
    2718:	0c 94 c8 11 	jmp	0x2390	; 0x2390 <__fp_szero>
    271c:	16 f0       	brts	.+4      	; 0x2722 <ldexp+0x72>
    271e:	0c 94 10 13 	jmp	0x2620	; 0x2620 <__fp_mpack>
    2722:	0c 94 83 11 	jmp	0x2306	; 0x2306 <__fp_nan>
    2726:	68 94       	set
    2728:	0c 94 7d 11 	jmp	0x22fa	; 0x22fa <__fp_inf>

0000272c <log>:
    272c:	0e 94 ad 11 	call	0x235a	; 0x235a <__fp_splitA>
    2730:	a8 f3       	brcs	.-22     	; 0x271c <ldexp+0x6c>
    2732:	99 23       	and	r25, r25
    2734:	c1 f3       	breq	.-16     	; 0x2726 <ldexp+0x76>
    2736:	ae f3       	brts	.-22     	; 0x2722 <ldexp+0x72>
    2738:	df 93       	push	r29
    273a:	cf 93       	push	r28
    273c:	1f 93       	push	r17
    273e:	0f 93       	push	r16
    2740:	ff 92       	push	r15
    2742:	c9 2f       	mov	r28, r25
    2744:	dd 27       	eor	r29, r29
    2746:	88 23       	and	r24, r24
    2748:	2a f0       	brmi	.+10     	; 0x2754 <log+0x28>
    274a:	21 97       	sbiw	r28, 0x01	; 1
    274c:	66 0f       	add	r22, r22
    274e:	77 1f       	adc	r23, r23
    2750:	88 1f       	adc	r24, r24
    2752:	da f7       	brpl	.-10     	; 0x274a <log+0x1e>
    2754:	20 e0       	ldi	r18, 0x00	; 0
    2756:	30 e0       	ldi	r19, 0x00	; 0
    2758:	40 e8       	ldi	r20, 0x80	; 128
    275a:	5f eb       	ldi	r21, 0xBF	; 191
    275c:	9f e3       	ldi	r25, 0x3F	; 63
    275e:	88 39       	cpi	r24, 0x98	; 152
    2760:	20 f0       	brcs	.+8      	; 0x276a <log+0x3e>
    2762:	80 3e       	cpi	r24, 0xE0	; 224
    2764:	38 f0       	brcs	.+14     	; 0x2774 <log+0x48>
    2766:	21 96       	adiw	r28, 0x01	; 1
    2768:	8f 77       	andi	r24, 0x7F	; 127
    276a:	0e 94 03 10 	call	0x2006	; 0x2006 <__addsf3>
    276e:	e0 e9       	ldi	r30, 0x90	; 144
    2770:	f0 e0       	ldi	r31, 0x00	; 0
    2772:	04 c0       	rjmp	.+8      	; 0x277c <log+0x50>
    2774:	0e 94 03 10 	call	0x2006	; 0x2006 <__addsf3>
    2778:	ed eb       	ldi	r30, 0xBD	; 189
    277a:	f0 e0       	ldi	r31, 0x00	; 0
    277c:	0e 94 25 13 	call	0x264a	; 0x264a <__fp_powser>
    2780:	8b 01       	movw	r16, r22
    2782:	be 01       	movw	r22, r28
    2784:	ec 01       	movw	r28, r24
    2786:	fb 2e       	mov	r15, r27
    2788:	6f 57       	subi	r22, 0x7F	; 127
    278a:	71 09       	sbc	r23, r1
    278c:	75 95       	asr	r23
    278e:	77 1f       	adc	r23, r23
    2790:	88 0b       	sbc	r24, r24
    2792:	99 0b       	sbc	r25, r25
    2794:	0e 94 1e 11 	call	0x223c	; 0x223c <__floatsisf>
    2798:	28 e1       	ldi	r18, 0x18	; 24
    279a:	32 e7       	ldi	r19, 0x72	; 114
    279c:	41 e3       	ldi	r20, 0x31	; 49
    279e:	5f e3       	ldi	r21, 0x3F	; 63
    27a0:	0e 94 e6 11 	call	0x23cc	; 0x23cc <__mulsf3x>
    27a4:	af 2d       	mov	r26, r15
    27a6:	98 01       	movw	r18, r16
    27a8:	ae 01       	movw	r20, r28
    27aa:	ff 90       	pop	r15
    27ac:	0f 91       	pop	r16
    27ae:	1f 91       	pop	r17
    27b0:	cf 91       	pop	r28
    27b2:	df 91       	pop	r29
    27b4:	0e 94 1a 10 	call	0x2034	; 0x2034 <__addsf3x>
    27b8:	0c 94 94 11 	jmp	0x2328	; 0x2328 <__fp_round>

000027bc <modf>:
    27bc:	fa 01       	movw	r30, r20
    27be:	dc 01       	movw	r26, r24
    27c0:	aa 0f       	add	r26, r26
    27c2:	bb 1f       	adc	r27, r27
    27c4:	9b 01       	movw	r18, r22
    27c6:	ac 01       	movw	r20, r24
    27c8:	bf 57       	subi	r27, 0x7F	; 127
    27ca:	28 f4       	brcc	.+10     	; 0x27d6 <modf+0x1a>
    27cc:	22 27       	eor	r18, r18
    27ce:	33 27       	eor	r19, r19
    27d0:	44 27       	eor	r20, r20
    27d2:	50 78       	andi	r21, 0x80	; 128
    27d4:	20 c0       	rjmp	.+64     	; 0x2816 <modf+0x5a>
    27d6:	b7 51       	subi	r27, 0x17	; 23
    27d8:	90 f4       	brcc	.+36     	; 0x27fe <modf+0x42>
    27da:	ab 2f       	mov	r26, r27
    27dc:	00 24       	eor	r0, r0
    27de:	46 95       	lsr	r20
    27e0:	37 95       	ror	r19
    27e2:	27 95       	ror	r18
    27e4:	01 1c       	adc	r0, r1
    27e6:	a3 95       	inc	r26
    27e8:	d2 f3       	brmi	.-12     	; 0x27de <modf+0x22>
    27ea:	00 20       	and	r0, r0
    27ec:	71 f0       	breq	.+28     	; 0x280a <modf+0x4e>
    27ee:	22 0f       	add	r18, r18
    27f0:	33 1f       	adc	r19, r19
    27f2:	44 1f       	adc	r20, r20
    27f4:	b3 95       	inc	r27
    27f6:	da f3       	brmi	.-10     	; 0x27ee <modf+0x32>
    27f8:	0e d0       	rcall	.+28     	; 0x2816 <modf+0x5a>
    27fa:	0c 94 02 10 	jmp	0x2004	; 0x2004 <__subsf3>
    27fe:	61 30       	cpi	r22, 0x01	; 1
    2800:	71 05       	cpc	r23, r1
    2802:	a0 e8       	ldi	r26, 0x80	; 128
    2804:	8a 07       	cpc	r24, r26
    2806:	b9 46       	sbci	r27, 0x69	; 105
    2808:	30 f4       	brcc	.+12     	; 0x2816 <modf+0x5a>
    280a:	9b 01       	movw	r18, r22
    280c:	ac 01       	movw	r20, r24
    280e:	66 27       	eor	r22, r22
    2810:	77 27       	eor	r23, r23
    2812:	88 27       	eor	r24, r24
    2814:	90 78       	andi	r25, 0x80	; 128
    2816:	30 96       	adiw	r30, 0x00	; 0
    2818:	21 f0       	breq	.+8      	; 0x2822 <modf+0x66>
    281a:	20 83       	st	Z, r18
    281c:	31 83       	std	Z+1, r19	; 0x01
    281e:	42 83       	std	Z+2, r20	; 0x02
    2820:	53 83       	std	Z+3, r21	; 0x03
    2822:	08 95       	ret

00002824 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    2824:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    2826:	91 8d       	ldd	r25, Z+25	; 0x19
    2828:	22 8d       	ldd	r18, Z+26	; 0x1a
    282a:	89 2f       	mov	r24, r25
    282c:	90 e0       	ldi	r25, 0x00	; 0
    282e:	80 5c       	subi	r24, 0xC0	; 192
    2830:	9f 4f       	sbci	r25, 0xFF	; 255
    2832:	82 1b       	sub	r24, r18
    2834:	91 09       	sbc	r25, r1
}
    2836:	8f 73       	andi	r24, 0x3F	; 63
    2838:	99 27       	eor	r25, r25
    283a:	08 95       	ret

0000283c <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    283c:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    283e:	91 8d       	ldd	r25, Z+25	; 0x19
    2840:	82 8d       	ldd	r24, Z+26	; 0x1a
    2842:	98 17       	cp	r25, r24
    2844:	31 f0       	breq	.+12     	; 0x2852 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    2846:	82 8d       	ldd	r24, Z+26	; 0x1a
    2848:	e8 0f       	add	r30, r24
    284a:	f1 1d       	adc	r31, r1
    284c:	85 8d       	ldd	r24, Z+29	; 0x1d
    284e:	90 e0       	ldi	r25, 0x00	; 0
    2850:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    2852:	8f ef       	ldi	r24, 0xFF	; 255
    2854:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    2856:	08 95       	ret

00002858 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    2858:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    285a:	91 8d       	ldd	r25, Z+25	; 0x19
    285c:	82 8d       	ldd	r24, Z+26	; 0x1a
    285e:	98 17       	cp	r25, r24
    2860:	61 f0       	breq	.+24     	; 0x287a <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    2862:	82 8d       	ldd	r24, Z+26	; 0x1a
    2864:	df 01       	movw	r26, r30
    2866:	a8 0f       	add	r26, r24
    2868:	b1 1d       	adc	r27, r1
    286a:	5d 96       	adiw	r26, 0x1d	; 29
    286c:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    286e:	92 8d       	ldd	r25, Z+26	; 0x1a
    2870:	9f 5f       	subi	r25, 0xFF	; 255
    2872:	9f 73       	andi	r25, 0x3F	; 63
    2874:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    2876:	90 e0       	ldi	r25, 0x00	; 0
    2878:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    287a:	8f ef       	ldi	r24, 0xFF	; 255
    287c:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    287e:	08 95       	ret

00002880 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    2880:	fc 01       	movw	r30, r24
    2882:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    2884:	44 8d       	ldd	r20, Z+28	; 0x1c
    2886:	25 2f       	mov	r18, r21
    2888:	30 e0       	ldi	r19, 0x00	; 0
    288a:	84 2f       	mov	r24, r20
    288c:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    288e:	82 1b       	sub	r24, r18
    2890:	93 0b       	sbc	r25, r19
    2892:	54 17       	cp	r21, r20
    2894:	10 f0       	brcs	.+4      	; 0x289a <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    2896:	cf 96       	adiw	r24, 0x3f	; 63
    2898:	08 95       	ret
  return tail - head - 1;
    289a:	01 97       	sbiw	r24, 0x01	; 1
}
    289c:	08 95       	ret

0000289e <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    289e:	86 ea       	ldi	r24, 0xA6	; 166
    28a0:	95 e1       	ldi	r25, 0x15	; 21
    28a2:	89 2b       	or	r24, r25
    28a4:	49 f0       	breq	.+18     	; 0x28b8 <_Z14serialEventRunv+0x1a>
    28a6:	80 e0       	ldi	r24, 0x00	; 0
    28a8:	90 e0       	ldi	r25, 0x00	; 0
    28aa:	89 2b       	or	r24, r25
    28ac:	29 f0       	breq	.+10     	; 0x28b8 <_Z14serialEventRunv+0x1a>
    28ae:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <_Z17Serial0_availablev>
    28b2:	81 11       	cpse	r24, r1
    28b4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    28b8:	08 95       	ret

000028ba <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    28ba:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    28bc:	84 8d       	ldd	r24, Z+28	; 0x1c
    28be:	df 01       	movw	r26, r30
    28c0:	a8 0f       	add	r26, r24
    28c2:	b1 1d       	adc	r27, r1
    28c4:	a3 5a       	subi	r26, 0xA3	; 163
    28c6:	bf 4f       	sbci	r27, 0xFF	; 255
    28c8:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    28ca:	84 8d       	ldd	r24, Z+28	; 0x1c
    28cc:	90 e0       	ldi	r25, 0x00	; 0
    28ce:	01 96       	adiw	r24, 0x01	; 1
    28d0:	8f 73       	andi	r24, 0x3F	; 63
    28d2:	99 27       	eor	r25, r25
    28d4:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    28d6:	a6 89       	ldd	r26, Z+22	; 0x16
    28d8:	b7 89       	ldd	r27, Z+23	; 0x17
    28da:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    28dc:	a0 89       	ldd	r26, Z+16	; 0x10
    28de:	b1 89       	ldd	r27, Z+17	; 0x11
    28e0:	8c 91       	ld	r24, X
    28e2:	83 70       	andi	r24, 0x03	; 3
    28e4:	80 64       	ori	r24, 0x40	; 64
    28e6:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    28e8:	93 8d       	ldd	r25, Z+27	; 0x1b
    28ea:	84 8d       	ldd	r24, Z+28	; 0x1c
    28ec:	98 13       	cpse	r25, r24
    28ee:	06 c0       	rjmp	.+12     	; 0x28fc <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    28f0:	02 88       	ldd	r0, Z+18	; 0x12
    28f2:	f3 89       	ldd	r31, Z+19	; 0x13
    28f4:	e0 2d       	mov	r30, r0
    28f6:	80 81       	ld	r24, Z
    28f8:	8f 7d       	andi	r24, 0xDF	; 223
    28fa:	80 83       	st	Z, r24
    28fc:	08 95       	ret

000028fe <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    28fe:	ef 92       	push	r14
    2900:	ff 92       	push	r15
    2902:	0f 93       	push	r16
    2904:	1f 93       	push	r17
    2906:	cf 93       	push	r28
    2908:	df 93       	push	r29
    290a:	ec 01       	movw	r28, r24
  _written = true;
    290c:	81 e0       	ldi	r24, 0x01	; 1
    290e:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    2910:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2912:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2914:	98 13       	cpse	r25, r24
    2916:	05 c0       	rjmp	.+10     	; 0x2922 <_ZN14HardwareSerial5writeEh+0x24>
    2918:	e8 89       	ldd	r30, Y+16	; 0x10
    291a:	f9 89       	ldd	r31, Y+17	; 0x11
    291c:	80 81       	ld	r24, Z
    291e:	85 fd       	sbrc	r24, 5
    2920:	26 c0       	rjmp	.+76     	; 0x296e <_ZN14HardwareSerial5writeEh+0x70>
    2922:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    2924:	0b 8d       	ldd	r16, Y+27	; 0x1b
    2926:	10 e0       	ldi	r17, 0x00	; 0
    2928:	0f 5f       	subi	r16, 0xFF	; 255
    292a:	1f 4f       	sbci	r17, 0xFF	; 255
    292c:	0f 73       	andi	r16, 0x3F	; 63
    292e:	11 27       	eor	r17, r17
    2930:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    2932:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2934:	e8 12       	cpse	r14, r24
    2936:	0c c0       	rjmp	.+24     	; 0x2950 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    2938:	0f b6       	in	r0, 0x3f	; 63
    293a:	07 fc       	sbrc	r0, 7
    293c:	fa cf       	rjmp	.-12     	; 0x2932 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    293e:	e8 89       	ldd	r30, Y+16	; 0x10
    2940:	f9 89       	ldd	r31, Y+17	; 0x11
    2942:	80 81       	ld	r24, Z
    2944:	85 ff       	sbrs	r24, 5
    2946:	f5 cf       	rjmp	.-22     	; 0x2932 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    2948:	ce 01       	movw	r24, r28
    294a:	0e 94 5d 14 	call	0x28ba	; 0x28ba <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    294e:	f1 cf       	rjmp	.-30     	; 0x2932 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    2950:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2952:	fe 01       	movw	r30, r28
    2954:	e8 0f       	add	r30, r24
    2956:	f1 1d       	adc	r31, r1
    2958:	e3 5a       	subi	r30, 0xA3	; 163
    295a:	ff 4f       	sbci	r31, 0xFF	; 255
    295c:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    295e:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2960:	f8 94       	cli
    _tx_buffer_head = i;
    2962:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    2964:	ea 89       	ldd	r30, Y+18	; 0x12
    2966:	fb 89       	ldd	r31, Y+19	; 0x13
    2968:	80 81       	ld	r24, Z
    296a:	80 62       	ori	r24, 0x20	; 32
    296c:	0a c0       	rjmp	.+20     	; 0x2982 <_ZN14HardwareSerial5writeEh+0x84>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    296e:	9f b7       	in	r25, 0x3f	; 63
    2970:	f8 94       	cli
      *_udr = c;
    2972:	ee 89       	ldd	r30, Y+22	; 0x16
    2974:	ff 89       	ldd	r31, Y+23	; 0x17
    2976:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    2978:	e8 89       	ldd	r30, Y+16	; 0x10
    297a:	f9 89       	ldd	r31, Y+17	; 0x11
    297c:	80 81       	ld	r24, Z
    297e:	83 70       	andi	r24, 0x03	; 3
    2980:	80 64       	ori	r24, 0x40	; 64
    2982:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2984:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    2986:	81 e0       	ldi	r24, 0x01	; 1
    2988:	90 e0       	ldi	r25, 0x00	; 0
    298a:	df 91       	pop	r29
    298c:	cf 91       	pop	r28
    298e:	1f 91       	pop	r17
    2990:	0f 91       	pop	r16
    2992:	ff 90       	pop	r15
    2994:	ef 90       	pop	r14
    2996:	08 95       	ret

00002998 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    2998:	cf 93       	push	r28
    299a:	df 93       	push	r29
    299c:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    299e:	88 8d       	ldd	r24, Y+24	; 0x18
    29a0:	88 23       	and	r24, r24
    29a2:	c9 f0       	breq	.+50     	; 0x29d6 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    29a4:	ea 89       	ldd	r30, Y+18	; 0x12
    29a6:	fb 89       	ldd	r31, Y+19	; 0x13
    29a8:	80 81       	ld	r24, Z
    29aa:	85 fd       	sbrc	r24, 5
    29ac:	05 c0       	rjmp	.+10     	; 0x29b8 <_ZN14HardwareSerial5flushEv+0x20>
    29ae:	a8 89       	ldd	r26, Y+16	; 0x10
    29b0:	b9 89       	ldd	r27, Y+17	; 0x11
    29b2:	8c 91       	ld	r24, X
    29b4:	86 fd       	sbrc	r24, 6
    29b6:	0f c0       	rjmp	.+30     	; 0x29d6 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    29b8:	0f b6       	in	r0, 0x3f	; 63
    29ba:	07 fc       	sbrc	r0, 7
    29bc:	f5 cf       	rjmp	.-22     	; 0x29a8 <_ZN14HardwareSerial5flushEv+0x10>
    29be:	80 81       	ld	r24, Z
    29c0:	85 ff       	sbrs	r24, 5
    29c2:	f2 cf       	rjmp	.-28     	; 0x29a8 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    29c4:	a8 89       	ldd	r26, Y+16	; 0x10
    29c6:	b9 89       	ldd	r27, Y+17	; 0x11
    29c8:	8c 91       	ld	r24, X
    29ca:	85 ff       	sbrs	r24, 5
    29cc:	ed cf       	rjmp	.-38     	; 0x29a8 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    29ce:	ce 01       	movw	r24, r28
    29d0:	0e 94 5d 14 	call	0x28ba	; 0x28ba <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    29d4:	e7 cf       	rjmp	.-50     	; 0x29a4 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    29d6:	df 91       	pop	r29
    29d8:	cf 91       	pop	r28
    29da:	08 95       	ret

000029dc <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    29dc:	cf 92       	push	r12
    29de:	df 92       	push	r13
    29e0:	ef 92       	push	r14
    29e2:	ff 92       	push	r15
    29e4:	1f 93       	push	r17
    29e6:	cf 93       	push	r28
    29e8:	df 93       	push	r29
    29ea:	ec 01       	movw	r28, r24
    29ec:	6a 01       	movw	r12, r20
    29ee:	7b 01       	movw	r14, r22
    29f0:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    29f2:	60 e8       	ldi	r22, 0x80	; 128
    29f4:	74 e8       	ldi	r23, 0x84	; 132
    29f6:	8e e1       	ldi	r24, 0x1E	; 30
    29f8:	90 e0       	ldi	r25, 0x00	; 0
    29fa:	a7 01       	movw	r20, r14
    29fc:	96 01       	movw	r18, r12
    29fe:	0e 94 67 24 	call	0x48ce	; 0x48ce <__udivmodsi4>
    2a02:	da 01       	movw	r26, r20
    2a04:	c9 01       	movw	r24, r18
    2a06:	01 97       	sbiw	r24, 0x01	; 1
    2a08:	a1 09       	sbc	r26, r1
    2a0a:	b1 09       	sbc	r27, r1
    2a0c:	b6 95       	lsr	r27
    2a0e:	a7 95       	ror	r26
    2a10:	97 95       	ror	r25
    2a12:	87 95       	ror	r24
    2a14:	9c 01       	movw	r18, r24
  *_ucsra = 1 << U2X0;
    2a16:	e8 89       	ldd	r30, Y+16	; 0x10
    2a18:	f9 89       	ldd	r31, Y+17	; 0x11
    2a1a:	82 e0       	ldi	r24, 0x02	; 2
    2a1c:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    2a1e:	21 15       	cp	r18, r1
    2a20:	80 e1       	ldi	r24, 0x10	; 16
    2a22:	38 07       	cpc	r19, r24
    2a24:	a8 f0       	brcs	.+42     	; 0x2a50 <_ZN14HardwareSerial5beginEmh+0x74>
  {
    *_ucsra = 0;
    2a26:	e8 89       	ldd	r30, Y+16	; 0x10
    2a28:	f9 89       	ldd	r31, Y+17	; 0x11
    2a2a:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    2a2c:	60 e4       	ldi	r22, 0x40	; 64
    2a2e:	72 e4       	ldi	r23, 0x42	; 66
    2a30:	8f e0       	ldi	r24, 0x0F	; 15
    2a32:	90 e0       	ldi	r25, 0x00	; 0
    2a34:	a7 01       	movw	r20, r14
    2a36:	96 01       	movw	r18, r12
    2a38:	0e 94 67 24 	call	0x48ce	; 0x48ce <__udivmodsi4>
    2a3c:	da 01       	movw	r26, r20
    2a3e:	c9 01       	movw	r24, r18
    2a40:	01 97       	sbiw	r24, 0x01	; 1
    2a42:	a1 09       	sbc	r26, r1
    2a44:	b1 09       	sbc	r27, r1
    2a46:	b6 95       	lsr	r27
    2a48:	a7 95       	ror	r26
    2a4a:	97 95       	ror	r25
    2a4c:	87 95       	ror	r24
    2a4e:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    2a50:	ec 85       	ldd	r30, Y+12	; 0x0c
    2a52:	fd 85       	ldd	r31, Y+13	; 0x0d
    2a54:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    2a56:	ee 85       	ldd	r30, Y+14	; 0x0e
    2a58:	ff 85       	ldd	r31, Y+15	; 0x0f
    2a5a:	20 83       	st	Z, r18

  _written = false;
    2a5c:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    2a5e:	ec 89       	ldd	r30, Y+20	; 0x14
    2a60:	fd 89       	ldd	r31, Y+21	; 0x15
    2a62:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    2a64:	ea 89       	ldd	r30, Y+18	; 0x12
    2a66:	fb 89       	ldd	r31, Y+19	; 0x13
    2a68:	80 81       	ld	r24, Z
    2a6a:	80 61       	ori	r24, 0x10	; 16
    2a6c:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    2a6e:	ea 89       	ldd	r30, Y+18	; 0x12
    2a70:	fb 89       	ldd	r31, Y+19	; 0x13
    2a72:	80 81       	ld	r24, Z
    2a74:	88 60       	ori	r24, 0x08	; 8
    2a76:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    2a78:	ea 89       	ldd	r30, Y+18	; 0x12
    2a7a:	fb 89       	ldd	r31, Y+19	; 0x13
    2a7c:	80 81       	ld	r24, Z
    2a7e:	80 68       	ori	r24, 0x80	; 128
    2a80:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    2a82:	ea 89       	ldd	r30, Y+18	; 0x12
    2a84:	fb 89       	ldd	r31, Y+19	; 0x13
    2a86:	80 81       	ld	r24, Z
    2a88:	8f 7d       	andi	r24, 0xDF	; 223
    2a8a:	80 83       	st	Z, r24
}
    2a8c:	df 91       	pop	r29
    2a8e:	cf 91       	pop	r28
    2a90:	1f 91       	pop	r17
    2a92:	ff 90       	pop	r15
    2a94:	ef 90       	pop	r14
    2a96:	df 90       	pop	r13
    2a98:	cf 90       	pop	r12
    2a9a:	08 95       	ret

00002a9c <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    2a9c:	1f 92       	push	r1
    2a9e:	0f 92       	push	r0
    2aa0:	0f b6       	in	r0, 0x3f	; 63
    2aa2:	0f 92       	push	r0
    2aa4:	11 24       	eor	r1, r1
    2aa6:	2f 93       	push	r18
    2aa8:	8f 93       	push	r24
    2aaa:	9f 93       	push	r25
    2aac:	ef 93       	push	r30
    2aae:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    2ab0:	e0 91 d1 06 	lds	r30, 0x06D1	; 0x8006d1 <Serial+0x10>
    2ab4:	f0 91 d2 06 	lds	r31, 0x06D2	; 0x8006d2 <Serial+0x11>
    2ab8:	80 81       	ld	r24, Z
    2aba:	e0 91 d7 06 	lds	r30, 0x06D7	; 0x8006d7 <Serial+0x16>
    2abe:	f0 91 d8 06 	lds	r31, 0x06D8	; 0x8006d8 <Serial+0x17>
    2ac2:	82 fd       	sbrc	r24, 2
    2ac4:	12 c0       	rjmp	.+36     	; 0x2aea <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    2ac6:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    2ac8:	80 91 da 06 	lds	r24, 0x06DA	; 0x8006da <Serial+0x19>
    2acc:	8f 5f       	subi	r24, 0xFF	; 255
    2ace:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    2ad0:	20 91 db 06 	lds	r18, 0x06DB	; 0x8006db <Serial+0x1a>
    2ad4:	82 17       	cp	r24, r18
    2ad6:	51 f0       	breq	.+20     	; 0x2aec <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    2ad8:	e0 91 da 06 	lds	r30, 0x06DA	; 0x8006da <Serial+0x19>
    2adc:	f0 e0       	ldi	r31, 0x00	; 0
    2ade:	ef 53       	subi	r30, 0x3F	; 63
    2ae0:	f9 4f       	sbci	r31, 0xF9	; 249
    2ae2:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    2ae4:	80 93 da 06 	sts	0x06DA, r24	; 0x8006da <Serial+0x19>
    2ae8:	01 c0       	rjmp	.+2      	; 0x2aec <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    2aea:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    2aec:	ff 91       	pop	r31
    2aee:	ef 91       	pop	r30
    2af0:	9f 91       	pop	r25
    2af2:	8f 91       	pop	r24
    2af4:	2f 91       	pop	r18
    2af6:	0f 90       	pop	r0
    2af8:	0f be       	out	0x3f, r0	; 63
    2afa:	0f 90       	pop	r0
    2afc:	1f 90       	pop	r1
    2afe:	18 95       	reti

00002b00 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    2b00:	1f 92       	push	r1
    2b02:	0f 92       	push	r0
    2b04:	0f b6       	in	r0, 0x3f	; 63
    2b06:	0f 92       	push	r0
    2b08:	11 24       	eor	r1, r1
    2b0a:	2f 93       	push	r18
    2b0c:	3f 93       	push	r19
    2b0e:	4f 93       	push	r20
    2b10:	5f 93       	push	r21
    2b12:	6f 93       	push	r22
    2b14:	7f 93       	push	r23
    2b16:	8f 93       	push	r24
    2b18:	9f 93       	push	r25
    2b1a:	af 93       	push	r26
    2b1c:	bf 93       	push	r27
    2b1e:	ef 93       	push	r30
    2b20:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    2b22:	81 ec       	ldi	r24, 0xC1	; 193
    2b24:	96 e0       	ldi	r25, 0x06	; 6
    2b26:	0e 94 5d 14 	call	0x28ba	; 0x28ba <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    2b2a:	ff 91       	pop	r31
    2b2c:	ef 91       	pop	r30
    2b2e:	bf 91       	pop	r27
    2b30:	af 91       	pop	r26
    2b32:	9f 91       	pop	r25
    2b34:	8f 91       	pop	r24
    2b36:	7f 91       	pop	r23
    2b38:	6f 91       	pop	r22
    2b3a:	5f 91       	pop	r21
    2b3c:	4f 91       	pop	r20
    2b3e:	3f 91       	pop	r19
    2b40:	2f 91       	pop	r18
    2b42:	0f 90       	pop	r0
    2b44:	0f be       	out	0x3f, r0	; 63
    2b46:	0f 90       	pop	r0
    2b48:	1f 90       	pop	r1
    2b4a:	18 95       	reti

00002b4c <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    2b4c:	81 ec       	ldi	r24, 0xC1	; 193
    2b4e:	96 e0       	ldi	r25, 0x06	; 6
    2b50:	0e 94 12 14 	call	0x2824	; 0x2824 <_ZN14HardwareSerial9availableEv>
    2b54:	21 e0       	ldi	r18, 0x01	; 1
    2b56:	89 2b       	or	r24, r25
    2b58:	09 f4       	brne	.+2      	; 0x2b5c <_Z17Serial0_availablev+0x10>
    2b5a:	20 e0       	ldi	r18, 0x00	; 0
}
    2b5c:	82 2f       	mov	r24, r18
    2b5e:	08 95       	ret

00002b60 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    2b60:	e1 ec       	ldi	r30, 0xC1	; 193
    2b62:	f6 e0       	ldi	r31, 0x06	; 6
    2b64:	13 82       	std	Z+3, r1	; 0x03
    2b66:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    2b68:	88 ee       	ldi	r24, 0xE8	; 232
    2b6a:	93 e0       	ldi	r25, 0x03	; 3
    2b6c:	a0 e0       	ldi	r26, 0x00	; 0
    2b6e:	b0 e0       	ldi	r27, 0x00	; 0
    2b70:	84 83       	std	Z+4, r24	; 0x04
    2b72:	95 83       	std	Z+5, r25	; 0x05
    2b74:	a6 83       	std	Z+6, r26	; 0x06
    2b76:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    2b78:	8b ee       	ldi	r24, 0xEB	; 235
    2b7a:	91 e0       	ldi	r25, 0x01	; 1
    2b7c:	91 83       	std	Z+1, r25	; 0x01
    2b7e:	80 83       	st	Z, r24
    2b80:	85 ec       	ldi	r24, 0xC5	; 197
    2b82:	90 e0       	ldi	r25, 0x00	; 0
    2b84:	95 87       	std	Z+13, r25	; 0x0d
    2b86:	84 87       	std	Z+12, r24	; 0x0c
    2b88:	84 ec       	ldi	r24, 0xC4	; 196
    2b8a:	90 e0       	ldi	r25, 0x00	; 0
    2b8c:	97 87       	std	Z+15, r25	; 0x0f
    2b8e:	86 87       	std	Z+14, r24	; 0x0e
    2b90:	80 ec       	ldi	r24, 0xC0	; 192
    2b92:	90 e0       	ldi	r25, 0x00	; 0
    2b94:	91 8b       	std	Z+17, r25	; 0x11
    2b96:	80 8b       	std	Z+16, r24	; 0x10
    2b98:	81 ec       	ldi	r24, 0xC1	; 193
    2b9a:	90 e0       	ldi	r25, 0x00	; 0
    2b9c:	93 8b       	std	Z+19, r25	; 0x13
    2b9e:	82 8b       	std	Z+18, r24	; 0x12
    2ba0:	82 ec       	ldi	r24, 0xC2	; 194
    2ba2:	90 e0       	ldi	r25, 0x00	; 0
    2ba4:	95 8b       	std	Z+21, r25	; 0x15
    2ba6:	84 8b       	std	Z+20, r24	; 0x14
    2ba8:	86 ec       	ldi	r24, 0xC6	; 198
    2baa:	90 e0       	ldi	r25, 0x00	; 0
    2bac:	97 8b       	std	Z+23, r25	; 0x17
    2bae:	86 8b       	std	Z+22, r24	; 0x16
    2bb0:	11 8e       	std	Z+25, r1	; 0x19
    2bb2:	12 8e       	std	Z+26, r1	; 0x1a
    2bb4:	13 8e       	std	Z+27, r1	; 0x1b
    2bb6:	14 8e       	std	Z+28, r1	; 0x1c
    2bb8:	08 95       	ret

00002bba <initVariant>:
    2bba:	08 95       	ret

00002bbc <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    2bbc:	0e 94 0d 19 	call	0x321a	; 0x321a <init>

	initVariant();
    2bc0:	0e 94 dd 15 	call	0x2bba	; 0x2bba <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    2bc4:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    2bc8:	cf e4       	ldi	r28, 0x4F	; 79
    2bca:	d4 e1       	ldi	r29, 0x14	; 20
#endif
	
	setup();
    
	for (;;) {
		loop();
    2bcc:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <loop>
		if (serialEventRun) serialEventRun();
    2bd0:	20 97       	sbiw	r28, 0x00	; 0
    2bd2:	e1 f3       	breq	.-8      	; 0x2bcc <main+0x10>
    2bd4:	0e 94 4f 14 	call	0x289e	; 0x289e <_Z14serialEventRunv>
    2bd8:	f9 cf       	rjmp	.-14     	; 0x2bcc <main+0x10>

00002bda <_ZN5Print5writeEPKhj>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    2bda:	cf 92       	push	r12
    2bdc:	df 92       	push	r13
    2bde:	ef 92       	push	r14
    2be0:	ff 92       	push	r15
    2be2:	0f 93       	push	r16
    2be4:	1f 93       	push	r17
    2be6:	cf 93       	push	r28
    2be8:	df 93       	push	r29
    2bea:	6c 01       	movw	r12, r24
    2bec:	7a 01       	movw	r14, r20
    2bee:	8b 01       	movw	r16, r22
    2bf0:	c0 e0       	ldi	r28, 0x00	; 0
    2bf2:	d0 e0       	ldi	r29, 0x00	; 0
    2bf4:	ce 15       	cp	r28, r14
    2bf6:	df 05       	cpc	r29, r15
    2bf8:	81 f0       	breq	.+32     	; 0x2c1a <_ZN5Print5writeEPKhj+0x40>
    2bfa:	d8 01       	movw	r26, r16
    2bfc:	6d 91       	ld	r22, X+
    2bfe:	8d 01       	movw	r16, r26
    2c00:	d6 01       	movw	r26, r12
    2c02:	ed 91       	ld	r30, X+
    2c04:	fc 91       	ld	r31, X
    2c06:	01 90       	ld	r0, Z+
    2c08:	f0 81       	ld	r31, Z
    2c0a:	e0 2d       	mov	r30, r0
    2c0c:	c6 01       	movw	r24, r12
    2c0e:	09 95       	icall
    2c10:	89 2b       	or	r24, r25
    2c12:	11 f0       	breq	.+4      	; 0x2c18 <_ZN5Print5writeEPKhj+0x3e>
    2c14:	21 96       	adiw	r28, 0x01	; 1
    2c16:	ee cf       	rjmp	.-36     	; 0x2bf4 <_ZN5Print5writeEPKhj+0x1a>
    2c18:	7e 01       	movw	r14, r28
    2c1a:	c7 01       	movw	r24, r14
    2c1c:	df 91       	pop	r29
    2c1e:	cf 91       	pop	r28
    2c20:	1f 91       	pop	r17
    2c22:	0f 91       	pop	r16
    2c24:	ff 90       	pop	r15
    2c26:	ef 90       	pop	r14
    2c28:	df 90       	pop	r13
    2c2a:	cf 90       	pop	r12
    2c2c:	08 95       	ret

00002c2e <_ZN5Print5writeEPKc>:
    2c2e:	61 15       	cp	r22, r1
    2c30:	71 05       	cpc	r23, r1
    2c32:	79 f0       	breq	.+30     	; 0x2c52 <_ZN5Print5writeEPKc+0x24>
    2c34:	fb 01       	movw	r30, r22
    2c36:	01 90       	ld	r0, Z+
    2c38:	00 20       	and	r0, r0
    2c3a:	e9 f7       	brne	.-6      	; 0x2c36 <_ZN5Print5writeEPKc+0x8>
    2c3c:	31 97       	sbiw	r30, 0x01	; 1
    2c3e:	af 01       	movw	r20, r30
    2c40:	46 1b       	sub	r20, r22
    2c42:	57 0b       	sbc	r21, r23
    2c44:	dc 01       	movw	r26, r24
    2c46:	ed 91       	ld	r30, X+
    2c48:	fc 91       	ld	r31, X
    2c4a:	02 80       	ldd	r0, Z+2	; 0x02
    2c4c:	f3 81       	ldd	r31, Z+3	; 0x03
    2c4e:	e0 2d       	mov	r30, r0
    2c50:	09 94       	ijmp
    2c52:	80 e0       	ldi	r24, 0x00	; 0
    2c54:	90 e0       	ldi	r25, 0x00	; 0
    2c56:	08 95       	ret

00002c58 <_ZN5Print5printEPK19__FlashStringHelper>:
    2c58:	ef 92       	push	r14
    2c5a:	ff 92       	push	r15
    2c5c:	0f 93       	push	r16
    2c5e:	1f 93       	push	r17
    2c60:	cf 93       	push	r28
    2c62:	df 93       	push	r29
    2c64:	8c 01       	movw	r16, r24
    2c66:	7b 01       	movw	r14, r22
    2c68:	c0 e0       	ldi	r28, 0x00	; 0
    2c6a:	d0 e0       	ldi	r29, 0x00	; 0
    2c6c:	f7 01       	movw	r30, r14
    2c6e:	ec 0f       	add	r30, r28
    2c70:	fd 1f       	adc	r31, r29
    2c72:	64 91       	lpm	r22, Z
    2c74:	66 23       	and	r22, r22
    2c76:	61 f0       	breq	.+24     	; 0x2c90 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    2c78:	d8 01       	movw	r26, r16
    2c7a:	ed 91       	ld	r30, X+
    2c7c:	fc 91       	ld	r31, X
    2c7e:	01 90       	ld	r0, Z+
    2c80:	f0 81       	ld	r31, Z
    2c82:	e0 2d       	mov	r30, r0
    2c84:	c8 01       	movw	r24, r16
    2c86:	09 95       	icall
    2c88:	89 2b       	or	r24, r25
    2c8a:	11 f0       	breq	.+4      	; 0x2c90 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    2c8c:	21 96       	adiw	r28, 0x01	; 1
    2c8e:	ee cf       	rjmp	.-36     	; 0x2c6c <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    2c90:	ce 01       	movw	r24, r28
    2c92:	df 91       	pop	r29
    2c94:	cf 91       	pop	r28
    2c96:	1f 91       	pop	r17
    2c98:	0f 91       	pop	r16
    2c9a:	ff 90       	pop	r15
    2c9c:	ef 90       	pop	r14
    2c9e:	08 95       	ret

00002ca0 <_ZN5Print5printEPKc>:
    2ca0:	0c 94 17 16 	jmp	0x2c2e	; 0x2c2e <_ZN5Print5writeEPKc>

00002ca4 <_ZN5Print5printEc>:
    2ca4:	dc 01       	movw	r26, r24
    2ca6:	ed 91       	ld	r30, X+
    2ca8:	fc 91       	ld	r31, X
    2caa:	01 90       	ld	r0, Z+
    2cac:	f0 81       	ld	r31, Z
    2cae:	e0 2d       	mov	r30, r0
    2cb0:	09 94       	ijmp

00002cb2 <_ZN5Print7printlnEv>:
    2cb2:	69 ef       	ldi	r22, 0xF9	; 249
    2cb4:	71 e0       	ldi	r23, 0x01	; 1
    2cb6:	0c 94 17 16 	jmp	0x2c2e	; 0x2c2e <_ZN5Print5writeEPKc>

00002cba <_ZN5Print7printlnEPK19__FlashStringHelper>:
    2cba:	0f 93       	push	r16
    2cbc:	1f 93       	push	r17
    2cbe:	cf 93       	push	r28
    2cc0:	df 93       	push	r29
    2cc2:	ec 01       	movw	r28, r24
    2cc4:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <_ZN5Print5printEPK19__FlashStringHelper>
    2cc8:	8c 01       	movw	r16, r24
    2cca:	ce 01       	movw	r24, r28
    2ccc:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <_ZN5Print7printlnEv>
    2cd0:	80 0f       	add	r24, r16
    2cd2:	91 1f       	adc	r25, r17
    2cd4:	df 91       	pop	r29
    2cd6:	cf 91       	pop	r28
    2cd8:	1f 91       	pop	r17
    2cda:	0f 91       	pop	r16
    2cdc:	08 95       	ret

00002cde <_ZN5Print7printlnEPKc>:
    2cde:	0f 93       	push	r16
    2ce0:	1f 93       	push	r17
    2ce2:	cf 93       	push	r28
    2ce4:	df 93       	push	r29
    2ce6:	ec 01       	movw	r28, r24
    2ce8:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <_ZN5Print5writeEPKc>
    2cec:	8c 01       	movw	r16, r24
    2cee:	ce 01       	movw	r24, r28
    2cf0:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <_ZN5Print7printlnEv>
    2cf4:	80 0f       	add	r24, r16
    2cf6:	91 1f       	adc	r25, r17
    2cf8:	df 91       	pop	r29
    2cfa:	cf 91       	pop	r28
    2cfc:	1f 91       	pop	r17
    2cfe:	0f 91       	pop	r16
    2d00:	08 95       	ret

00002d02 <_ZN5Print11printNumberEmh>:
    2d02:	8f 92       	push	r8
    2d04:	9f 92       	push	r9
    2d06:	af 92       	push	r10
    2d08:	bf 92       	push	r11
    2d0a:	ef 92       	push	r14
    2d0c:	ff 92       	push	r15
    2d0e:	0f 93       	push	r16
    2d10:	1f 93       	push	r17
    2d12:	cf 93       	push	r28
    2d14:	df 93       	push	r29
    2d16:	cd b7       	in	r28, 0x3d	; 61
    2d18:	de b7       	in	r29, 0x3e	; 62
    2d1a:	a1 97       	sbiw	r28, 0x21	; 33
    2d1c:	0f b6       	in	r0, 0x3f	; 63
    2d1e:	f8 94       	cli
    2d20:	de bf       	out	0x3e, r29	; 62
    2d22:	0f be       	out	0x3f, r0	; 63
    2d24:	cd bf       	out	0x3d, r28	; 61
    2d26:	7c 01       	movw	r14, r24
    2d28:	fa 01       	movw	r30, r20
    2d2a:	cb 01       	movw	r24, r22
    2d2c:	19 a2       	std	Y+33, r1	; 0x21
    2d2e:	22 30       	cpi	r18, 0x02	; 2
    2d30:	08 f4       	brcc	.+2      	; 0x2d34 <_ZN5Print11printNumberEmh+0x32>
    2d32:	2a e0       	ldi	r18, 0x0A	; 10
    2d34:	8e 01       	movw	r16, r28
    2d36:	0f 5d       	subi	r16, 0xDF	; 223
    2d38:	1f 4f       	sbci	r17, 0xFF	; 255
    2d3a:	82 2e       	mov	r8, r18
    2d3c:	91 2c       	mov	r9, r1
    2d3e:	a1 2c       	mov	r10, r1
    2d40:	b1 2c       	mov	r11, r1
    2d42:	bf 01       	movw	r22, r30
    2d44:	a5 01       	movw	r20, r10
    2d46:	94 01       	movw	r18, r8
    2d48:	0e 94 67 24 	call	0x48ce	; 0x48ce <__udivmodsi4>
    2d4c:	f9 01       	movw	r30, r18
    2d4e:	ca 01       	movw	r24, r20
    2d50:	01 50       	subi	r16, 0x01	; 1
    2d52:	11 09       	sbc	r17, r1
    2d54:	6a 30       	cpi	r22, 0x0A	; 10
    2d56:	10 f4       	brcc	.+4      	; 0x2d5c <_ZN5Print11printNumberEmh+0x5a>
    2d58:	60 5d       	subi	r22, 0xD0	; 208
    2d5a:	01 c0       	rjmp	.+2      	; 0x2d5e <_ZN5Print11printNumberEmh+0x5c>
    2d5c:	69 5c       	subi	r22, 0xC9	; 201
    2d5e:	d8 01       	movw	r26, r16
    2d60:	6c 93       	st	X, r22
    2d62:	23 2b       	or	r18, r19
    2d64:	24 2b       	or	r18, r20
    2d66:	25 2b       	or	r18, r21
    2d68:	61 f7       	brne	.-40     	; 0x2d42 <_ZN5Print11printNumberEmh+0x40>
    2d6a:	b8 01       	movw	r22, r16
    2d6c:	c7 01       	movw	r24, r14
    2d6e:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <_ZN5Print5writeEPKc>
    2d72:	a1 96       	adiw	r28, 0x21	; 33
    2d74:	0f b6       	in	r0, 0x3f	; 63
    2d76:	f8 94       	cli
    2d78:	de bf       	out	0x3e, r29	; 62
    2d7a:	0f be       	out	0x3f, r0	; 63
    2d7c:	cd bf       	out	0x3d, r28	; 61
    2d7e:	df 91       	pop	r29
    2d80:	cf 91       	pop	r28
    2d82:	1f 91       	pop	r17
    2d84:	0f 91       	pop	r16
    2d86:	ff 90       	pop	r15
    2d88:	ef 90       	pop	r14
    2d8a:	bf 90       	pop	r11
    2d8c:	af 90       	pop	r10
    2d8e:	9f 90       	pop	r9
    2d90:	8f 90       	pop	r8
    2d92:	08 95       	ret

00002d94 <_ZN5Print5printEmi>:
    2d94:	21 15       	cp	r18, r1
    2d96:	31 05       	cpc	r19, r1
    2d98:	41 f4       	brne	.+16     	; 0x2daa <_ZN5Print5printEmi+0x16>
    2d9a:	dc 01       	movw	r26, r24
    2d9c:	ed 91       	ld	r30, X+
    2d9e:	fc 91       	ld	r31, X
    2da0:	01 90       	ld	r0, Z+
    2da2:	f0 81       	ld	r31, Z
    2da4:	e0 2d       	mov	r30, r0
    2da6:	64 2f       	mov	r22, r20
    2da8:	09 94       	ijmp
    2daa:	0c 94 81 16 	jmp	0x2d02	; 0x2d02 <_ZN5Print11printNumberEmh>

00002dae <_ZN5Print5printEhi>:
    2dae:	9a 01       	movw	r18, r20
    2db0:	46 2f       	mov	r20, r22
    2db2:	50 e0       	ldi	r21, 0x00	; 0
    2db4:	60 e0       	ldi	r22, 0x00	; 0
    2db6:	70 e0       	ldi	r23, 0x00	; 0
    2db8:	0c 94 ca 16 	jmp	0x2d94	; 0x2d94 <_ZN5Print5printEmi>

00002dbc <_ZN5Print7printlnEhi>:
    2dbc:	0f 93       	push	r16
    2dbe:	1f 93       	push	r17
    2dc0:	cf 93       	push	r28
    2dc2:	df 93       	push	r29
    2dc4:	ec 01       	movw	r28, r24
    2dc6:	0e 94 d7 16 	call	0x2dae	; 0x2dae <_ZN5Print5printEhi>
    2dca:	8c 01       	movw	r16, r24
    2dcc:	ce 01       	movw	r24, r28
    2dce:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <_ZN5Print7printlnEv>
    2dd2:	80 0f       	add	r24, r16
    2dd4:	91 1f       	adc	r25, r17
    2dd6:	df 91       	pop	r29
    2dd8:	cf 91       	pop	r28
    2dda:	1f 91       	pop	r17
    2ddc:	0f 91       	pop	r16
    2dde:	08 95       	ret

00002de0 <_ZN5Print5printEji>:
    2de0:	9a 01       	movw	r18, r20
    2de2:	ab 01       	movw	r20, r22
    2de4:	60 e0       	ldi	r22, 0x00	; 0
    2de6:	70 e0       	ldi	r23, 0x00	; 0
    2de8:	0c 94 ca 16 	jmp	0x2d94	; 0x2d94 <_ZN5Print5printEmi>

00002dec <_ZN5Print7printlnEji>:
    2dec:	0f 93       	push	r16
    2dee:	1f 93       	push	r17
    2df0:	cf 93       	push	r28
    2df2:	df 93       	push	r29
    2df4:	ec 01       	movw	r28, r24
    2df6:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <_ZN5Print5printEji>
    2dfa:	8c 01       	movw	r16, r24
    2dfc:	ce 01       	movw	r24, r28
    2dfe:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <_ZN5Print7printlnEv>
    2e02:	80 0f       	add	r24, r16
    2e04:	91 1f       	adc	r25, r17
    2e06:	df 91       	pop	r29
    2e08:	cf 91       	pop	r28
    2e0a:	1f 91       	pop	r17
    2e0c:	0f 91       	pop	r16
    2e0e:	08 95       	ret

00002e10 <_ZN5Print5printEli>:
    2e10:	cf 92       	push	r12
    2e12:	df 92       	push	r13
    2e14:	ef 92       	push	r14
    2e16:	ff 92       	push	r15
    2e18:	0f 93       	push	r16
    2e1a:	1f 93       	push	r17
    2e1c:	cf 93       	push	r28
    2e1e:	df 93       	push	r29
    2e20:	21 15       	cp	r18, r1
    2e22:	31 05       	cpc	r19, r1
    2e24:	81 f4       	brne	.+32     	; 0x2e46 <_ZN5Print5printEli+0x36>
    2e26:	dc 01       	movw	r26, r24
    2e28:	ed 91       	ld	r30, X+
    2e2a:	fc 91       	ld	r31, X
    2e2c:	01 90       	ld	r0, Z+
    2e2e:	f0 81       	ld	r31, Z
    2e30:	e0 2d       	mov	r30, r0
    2e32:	64 2f       	mov	r22, r20
    2e34:	df 91       	pop	r29
    2e36:	cf 91       	pop	r28
    2e38:	1f 91       	pop	r17
    2e3a:	0f 91       	pop	r16
    2e3c:	ff 90       	pop	r15
    2e3e:	ef 90       	pop	r14
    2e40:	df 90       	pop	r13
    2e42:	cf 90       	pop	r12
    2e44:	09 94       	ijmp
    2e46:	2a 30       	cpi	r18, 0x0A	; 10
    2e48:	31 05       	cpc	r19, r1
    2e4a:	01 f5       	brne	.+64     	; 0x2e8c <_ZN5Print5printEli+0x7c>
    2e4c:	77 ff       	sbrs	r23, 7
    2e4e:	1d c0       	rjmp	.+58     	; 0x2e8a <_ZN5Print5printEli+0x7a>
    2e50:	6a 01       	movw	r12, r20
    2e52:	7b 01       	movw	r14, r22
    2e54:	ec 01       	movw	r28, r24
    2e56:	6d e2       	ldi	r22, 0x2D	; 45
    2e58:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <_ZN5Print5printEc>
    2e5c:	8c 01       	movw	r16, r24
    2e5e:	44 27       	eor	r20, r20
    2e60:	55 27       	eor	r21, r21
    2e62:	ba 01       	movw	r22, r20
    2e64:	4c 19       	sub	r20, r12
    2e66:	5d 09       	sbc	r21, r13
    2e68:	6e 09       	sbc	r22, r14
    2e6a:	7f 09       	sbc	r23, r15
    2e6c:	2a e0       	ldi	r18, 0x0A	; 10
    2e6e:	ce 01       	movw	r24, r28
    2e70:	0e 94 81 16 	call	0x2d02	; 0x2d02 <_ZN5Print11printNumberEmh>
    2e74:	80 0f       	add	r24, r16
    2e76:	91 1f       	adc	r25, r17
    2e78:	df 91       	pop	r29
    2e7a:	cf 91       	pop	r28
    2e7c:	1f 91       	pop	r17
    2e7e:	0f 91       	pop	r16
    2e80:	ff 90       	pop	r15
    2e82:	ef 90       	pop	r14
    2e84:	df 90       	pop	r13
    2e86:	cf 90       	pop	r12
    2e88:	08 95       	ret
    2e8a:	2a e0       	ldi	r18, 0x0A	; 10
    2e8c:	df 91       	pop	r29
    2e8e:	cf 91       	pop	r28
    2e90:	1f 91       	pop	r17
    2e92:	0f 91       	pop	r16
    2e94:	ff 90       	pop	r15
    2e96:	ef 90       	pop	r14
    2e98:	df 90       	pop	r13
    2e9a:	cf 90       	pop	r12
    2e9c:	0c 94 81 16 	jmp	0x2d02	; 0x2d02 <_ZN5Print11printNumberEmh>

00002ea0 <_ZN5Print5printEii>:
    2ea0:	9a 01       	movw	r18, r20
    2ea2:	ab 01       	movw	r20, r22
    2ea4:	77 0f       	add	r23, r23
    2ea6:	66 0b       	sbc	r22, r22
    2ea8:	77 0b       	sbc	r23, r23
    2eaa:	0c 94 08 17 	jmp	0x2e10	; 0x2e10 <_ZN5Print5printEli>

00002eae <_ZN5Print7printlnEii>:
    2eae:	0f 93       	push	r16
    2eb0:	1f 93       	push	r17
    2eb2:	cf 93       	push	r28
    2eb4:	df 93       	push	r29
    2eb6:	ec 01       	movw	r28, r24
    2eb8:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <_ZN5Print5printEii>
    2ebc:	8c 01       	movw	r16, r24
    2ebe:	ce 01       	movw	r24, r28
    2ec0:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <_ZN5Print7printlnEv>
    2ec4:	80 0f       	add	r24, r16
    2ec6:	91 1f       	adc	r25, r17
    2ec8:	df 91       	pop	r29
    2eca:	cf 91       	pop	r28
    2ecc:	1f 91       	pop	r17
    2ece:	0f 91       	pop	r16
    2ed0:	08 95       	ret

00002ed2 <_ZN5Print10printFloatEdh>:
    2ed2:	7f 92       	push	r7
    2ed4:	8f 92       	push	r8
    2ed6:	9f 92       	push	r9
    2ed8:	af 92       	push	r10
    2eda:	bf 92       	push	r11
    2edc:	cf 92       	push	r12
    2ede:	df 92       	push	r13
    2ee0:	ef 92       	push	r14
    2ee2:	ff 92       	push	r15
    2ee4:	0f 93       	push	r16
    2ee6:	1f 93       	push	r17
    2ee8:	cf 93       	push	r28
    2eea:	df 93       	push	r29
    2eec:	8c 01       	movw	r16, r24
    2eee:	6a 01       	movw	r12, r20
    2ef0:	7b 01       	movw	r14, r22
    2ef2:	72 2e       	mov	r7, r18
    2ef4:	9a 01       	movw	r18, r20
    2ef6:	ab 01       	movw	r20, r22
    2ef8:	c7 01       	movw	r24, r14
    2efa:	b6 01       	movw	r22, r12
    2efc:	0e 94 3a 24 	call	0x4874	; 0x4874 <__unordsf2>
    2f00:	88 23       	and	r24, r24
    2f02:	19 f0       	breq	.+6      	; 0x2f0a <_ZN5Print10printFloatEdh+0x38>
    2f04:	6c ef       	ldi	r22, 0xFC	; 252
    2f06:	71 e0       	ldi	r23, 0x01	; 1
    2f08:	27 c0       	rjmp	.+78     	; 0x2f58 <_ZN5Print10printFloatEdh+0x86>
    2f0a:	46 01       	movw	r8, r12
    2f0c:	57 01       	movw	r10, r14
    2f0e:	e8 94       	clt
    2f10:	b7 f8       	bld	r11, 7
    2f12:	2f ef       	ldi	r18, 0xFF	; 255
    2f14:	3f ef       	ldi	r19, 0xFF	; 255
    2f16:	4f e7       	ldi	r20, 0x7F	; 127
    2f18:	5f e7       	ldi	r21, 0x7F	; 127
    2f1a:	c5 01       	movw	r24, r10
    2f1c:	b4 01       	movw	r22, r8
    2f1e:	0e 94 3a 24 	call	0x4874	; 0x4874 <__unordsf2>
    2f22:	81 11       	cpse	r24, r1
    2f24:	0d c0       	rjmp	.+26     	; 0x2f40 <_ZN5Print10printFloatEdh+0x6e>
    2f26:	2f ef       	ldi	r18, 0xFF	; 255
    2f28:	3f ef       	ldi	r19, 0xFF	; 255
    2f2a:	4f e7       	ldi	r20, 0x7F	; 127
    2f2c:	5f e7       	ldi	r21, 0x7F	; 127
    2f2e:	c5 01       	movw	r24, r10
    2f30:	b4 01       	movw	r22, r8
    2f32:	0e 94 6f 10 	call	0x20de	; 0x20de <__cmpsf2>
    2f36:	18 16       	cp	r1, r24
    2f38:	1c f4       	brge	.+6      	; 0x2f40 <_ZN5Print10printFloatEdh+0x6e>
    2f3a:	60 e0       	ldi	r22, 0x00	; 0
    2f3c:	72 e0       	ldi	r23, 0x02	; 2
    2f3e:	0c c0       	rjmp	.+24     	; 0x2f58 <_ZN5Print10printFloatEdh+0x86>
    2f40:	2f ef       	ldi	r18, 0xFF	; 255
    2f42:	3f ef       	ldi	r19, 0xFF	; 255
    2f44:	4f e7       	ldi	r20, 0x7F	; 127
    2f46:	5f e4       	ldi	r21, 0x4F	; 79
    2f48:	c7 01       	movw	r24, r14
    2f4a:	b6 01       	movw	r22, r12
    2f4c:	0e 94 ce 11 	call	0x239c	; 0x239c <__gesf2>
    2f50:	18 16       	cp	r1, r24
    2f52:	94 f4       	brge	.+36     	; 0x2f78 <_ZN5Print10printFloatEdh+0xa6>
    2f54:	64 e0       	ldi	r22, 0x04	; 4
    2f56:	72 e0       	ldi	r23, 0x02	; 2
    2f58:	c8 01       	movw	r24, r16
    2f5a:	df 91       	pop	r29
    2f5c:	cf 91       	pop	r28
    2f5e:	1f 91       	pop	r17
    2f60:	0f 91       	pop	r16
    2f62:	ff 90       	pop	r15
    2f64:	ef 90       	pop	r14
    2f66:	df 90       	pop	r13
    2f68:	cf 90       	pop	r12
    2f6a:	bf 90       	pop	r11
    2f6c:	af 90       	pop	r10
    2f6e:	9f 90       	pop	r9
    2f70:	8f 90       	pop	r8
    2f72:	7f 90       	pop	r7
    2f74:	0c 94 17 16 	jmp	0x2c2e	; 0x2c2e <_ZN5Print5writeEPKc>
    2f78:	2f ef       	ldi	r18, 0xFF	; 255
    2f7a:	3f ef       	ldi	r19, 0xFF	; 255
    2f7c:	4f e7       	ldi	r20, 0x7F	; 127
    2f7e:	5f ec       	ldi	r21, 0xCF	; 207
    2f80:	c7 01       	movw	r24, r14
    2f82:	b6 01       	movw	r22, r12
    2f84:	0e 94 6f 10 	call	0x20de	; 0x20de <__cmpsf2>
    2f88:	87 fd       	sbrc	r24, 7
    2f8a:	e4 cf       	rjmp	.-56     	; 0x2f54 <_ZN5Print10printFloatEdh+0x82>
    2f8c:	20 e0       	ldi	r18, 0x00	; 0
    2f8e:	30 e0       	ldi	r19, 0x00	; 0
    2f90:	a9 01       	movw	r20, r18
    2f92:	c7 01       	movw	r24, r14
    2f94:	b6 01       	movw	r22, r12
    2f96:	0e 94 6f 10 	call	0x20de	; 0x20de <__cmpsf2>
    2f9a:	87 ff       	sbrs	r24, 7
    2f9c:	0a c0       	rjmp	.+20     	; 0x2fb2 <_ZN5Print10printFloatEdh+0xe0>
    2f9e:	6d e2       	ldi	r22, 0x2D	; 45
    2fa0:	c8 01       	movw	r24, r16
    2fa2:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <_ZN5Print5printEc>
    2fa6:	ec 01       	movw	r28, r24
    2fa8:	f7 fa       	bst	r15, 7
    2faa:	f0 94       	com	r15
    2fac:	f7 f8       	bld	r15, 7
    2fae:	f0 94       	com	r15
    2fb0:	02 c0       	rjmp	.+4      	; 0x2fb6 <_ZN5Print10printFloatEdh+0xe4>
    2fb2:	c0 e0       	ldi	r28, 0x00	; 0
    2fb4:	d0 e0       	ldi	r29, 0x00	; 0
    2fb6:	b1 2c       	mov	r11, r1
    2fb8:	60 e0       	ldi	r22, 0x00	; 0
    2fba:	70 e0       	ldi	r23, 0x00	; 0
    2fbc:	80 e0       	ldi	r24, 0x00	; 0
    2fbe:	9f e3       	ldi	r25, 0x3F	; 63
    2fc0:	7b 14       	cp	r7, r11
    2fc2:	41 f0       	breq	.+16     	; 0x2fd4 <_ZN5Print10printFloatEdh+0x102>
    2fc4:	20 e0       	ldi	r18, 0x00	; 0
    2fc6:	30 e0       	ldi	r19, 0x00	; 0
    2fc8:	40 e2       	ldi	r20, 0x20	; 32
    2fca:	51 e4       	ldi	r21, 0x41	; 65
    2fcc:	0e 94 74 10 	call	0x20e8	; 0x20e8 <__divsf3>
    2fd0:	b3 94       	inc	r11
    2fd2:	f6 cf       	rjmp	.-20     	; 0x2fc0 <_ZN5Print10printFloatEdh+0xee>
    2fd4:	a7 01       	movw	r20, r14
    2fd6:	96 01       	movw	r18, r12
    2fd8:	0e 94 03 10 	call	0x2006	; 0x2006 <__addsf3>
    2fdc:	6b 01       	movw	r12, r22
    2fde:	7c 01       	movw	r14, r24
    2fe0:	0e 94 ed 10 	call	0x21da	; 0x21da <__fixunssfsi>
    2fe4:	4b 01       	movw	r8, r22
    2fe6:	5c 01       	movw	r10, r24
    2fe8:	2a e0       	ldi	r18, 0x0A	; 10
    2fea:	ab 01       	movw	r20, r22
    2fec:	bc 01       	movw	r22, r24
    2fee:	c8 01       	movw	r24, r16
    2ff0:	0e 94 81 16 	call	0x2d02	; 0x2d02 <_ZN5Print11printNumberEmh>
    2ff4:	c8 0f       	add	r28, r24
    2ff6:	d9 1f       	adc	r29, r25
    2ff8:	77 20       	and	r7, r7
    2ffa:	b9 f1       	breq	.+110    	; 0x306a <_ZN5Print10printFloatEdh+0x198>
    2ffc:	c5 01       	movw	r24, r10
    2ffe:	b4 01       	movw	r22, r8
    3000:	0e 94 1c 11 	call	0x2238	; 0x2238 <__floatunsisf>
    3004:	9b 01       	movw	r18, r22
    3006:	ac 01       	movw	r20, r24
    3008:	c7 01       	movw	r24, r14
    300a:	b6 01       	movw	r22, r12
    300c:	0e 94 02 10 	call	0x2004	; 0x2004 <__subsf3>
    3010:	6b 01       	movw	r12, r22
    3012:	7c 01       	movw	r14, r24
    3014:	6e e2       	ldi	r22, 0x2E	; 46
    3016:	c8 01       	movw	r24, r16
    3018:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <_ZN5Print5printEc>
    301c:	c8 0f       	add	r28, r24
    301e:	d9 1f       	adc	r29, r25
    3020:	20 e0       	ldi	r18, 0x00	; 0
    3022:	30 e0       	ldi	r19, 0x00	; 0
    3024:	40 e2       	ldi	r20, 0x20	; 32
    3026:	51 e4       	ldi	r21, 0x41	; 65
    3028:	c7 01       	movw	r24, r14
    302a:	b6 01       	movw	r22, r12
    302c:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <__mulsf3>
    3030:	4b 01       	movw	r8, r22
    3032:	5c 01       	movw	r10, r24
    3034:	0e 94 ed 10 	call	0x21da	; 0x21da <__fixunssfsi>
    3038:	6b 01       	movw	r12, r22
    303a:	7c 01       	movw	r14, r24
    303c:	4a e0       	ldi	r20, 0x0A	; 10
    303e:	50 e0       	ldi	r21, 0x00	; 0
    3040:	c8 01       	movw	r24, r16
    3042:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <_ZN5Print5printEji>
    3046:	c8 0f       	add	r28, r24
    3048:	d9 1f       	adc	r29, r25
    304a:	b6 01       	movw	r22, r12
    304c:	80 e0       	ldi	r24, 0x00	; 0
    304e:	90 e0       	ldi	r25, 0x00	; 0
    3050:	0e 94 1c 11 	call	0x2238	; 0x2238 <__floatunsisf>
    3054:	9b 01       	movw	r18, r22
    3056:	ac 01       	movw	r20, r24
    3058:	c5 01       	movw	r24, r10
    305a:	b4 01       	movw	r22, r8
    305c:	0e 94 02 10 	call	0x2004	; 0x2004 <__subsf3>
    3060:	6b 01       	movw	r12, r22
    3062:	7c 01       	movw	r14, r24
    3064:	7a 94       	dec	r7
    3066:	71 10       	cpse	r7, r1
    3068:	db cf       	rjmp	.-74     	; 0x3020 <_ZN5Print10printFloatEdh+0x14e>
    306a:	ce 01       	movw	r24, r28
    306c:	df 91       	pop	r29
    306e:	cf 91       	pop	r28
    3070:	1f 91       	pop	r17
    3072:	0f 91       	pop	r16
    3074:	ff 90       	pop	r15
    3076:	ef 90       	pop	r14
    3078:	df 90       	pop	r13
    307a:	cf 90       	pop	r12
    307c:	bf 90       	pop	r11
    307e:	af 90       	pop	r10
    3080:	9f 90       	pop	r9
    3082:	8f 90       	pop	r8
    3084:	7f 90       	pop	r7
    3086:	08 95       	ret

00003088 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
    3088:	0f 93       	push	r16
    308a:	1f 93       	push	r17
    308c:	cf 93       	push	r28
    308e:	df 93       	push	r29
    3090:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    3092:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <_ZN5Print10printFloatEdh>
    3096:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
    3098:	ce 01       	movw	r24, r28
    309a:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <_ZN5Print7printlnEv>
  return n;
}
    309e:	80 0f       	add	r24, r16
    30a0:	91 1f       	adc	r25, r17
    30a2:	df 91       	pop	r29
    30a4:	cf 91       	pop	r28
    30a6:	1f 91       	pop	r17
    30a8:	0f 91       	pop	r16
    30aa:	08 95       	ret

000030ac <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    30ac:	1f 92       	push	r1
    30ae:	0f 92       	push	r0
    30b0:	0f b6       	in	r0, 0x3f	; 63
    30b2:	0f 92       	push	r0
    30b4:	11 24       	eor	r1, r1
    30b6:	2f 93       	push	r18
    30b8:	3f 93       	push	r19
    30ba:	8f 93       	push	r24
    30bc:	9f 93       	push	r25
    30be:	af 93       	push	r26
    30c0:	bf 93       	push	r27
    30c2:	80 91 5f 07 	lds	r24, 0x075F	; 0x80075f <timer0_millis>
    30c6:	90 91 60 07 	lds	r25, 0x0760	; 0x800760 <timer0_millis+0x1>
    30ca:	a0 91 61 07 	lds	r26, 0x0761	; 0x800761 <timer0_millis+0x2>
    30ce:	b0 91 62 07 	lds	r27, 0x0762	; 0x800762 <timer0_millis+0x3>
    30d2:	30 91 5e 07 	lds	r19, 0x075E	; 0x80075e <timer0_fract>
    30d6:	26 e0       	ldi	r18, 0x06	; 6
    30d8:	23 0f       	add	r18, r19
    30da:	2d 37       	cpi	r18, 0x7D	; 125
    30dc:	20 f4       	brcc	.+8      	; 0x30e6 <__vector_16+0x3a>
    30de:	02 96       	adiw	r24, 0x02	; 2
    30e0:	a1 1d       	adc	r26, r1
    30e2:	b1 1d       	adc	r27, r1
    30e4:	05 c0       	rjmp	.+10     	; 0x30f0 <__vector_16+0x44>
    30e6:	29 e8       	ldi	r18, 0x89	; 137
    30e8:	23 0f       	add	r18, r19
    30ea:	03 96       	adiw	r24, 0x03	; 3
    30ec:	a1 1d       	adc	r26, r1
    30ee:	b1 1d       	adc	r27, r1
    30f0:	20 93 5e 07 	sts	0x075E, r18	; 0x80075e <timer0_fract>
    30f4:	80 93 5f 07 	sts	0x075F, r24	; 0x80075f <timer0_millis>
    30f8:	90 93 60 07 	sts	0x0760, r25	; 0x800760 <timer0_millis+0x1>
    30fc:	a0 93 61 07 	sts	0x0761, r26	; 0x800761 <timer0_millis+0x2>
    3100:	b0 93 62 07 	sts	0x0762, r27	; 0x800762 <timer0_millis+0x3>
    3104:	80 91 63 07 	lds	r24, 0x0763	; 0x800763 <timer0_overflow_count>
    3108:	90 91 64 07 	lds	r25, 0x0764	; 0x800764 <timer0_overflow_count+0x1>
    310c:	a0 91 65 07 	lds	r26, 0x0765	; 0x800765 <timer0_overflow_count+0x2>
    3110:	b0 91 66 07 	lds	r27, 0x0766	; 0x800766 <timer0_overflow_count+0x3>
    3114:	01 96       	adiw	r24, 0x01	; 1
    3116:	a1 1d       	adc	r26, r1
    3118:	b1 1d       	adc	r27, r1
    311a:	80 93 63 07 	sts	0x0763, r24	; 0x800763 <timer0_overflow_count>
    311e:	90 93 64 07 	sts	0x0764, r25	; 0x800764 <timer0_overflow_count+0x1>
    3122:	a0 93 65 07 	sts	0x0765, r26	; 0x800765 <timer0_overflow_count+0x2>
    3126:	b0 93 66 07 	sts	0x0766, r27	; 0x800766 <timer0_overflow_count+0x3>
    312a:	bf 91       	pop	r27
    312c:	af 91       	pop	r26
    312e:	9f 91       	pop	r25
    3130:	8f 91       	pop	r24
    3132:	3f 91       	pop	r19
    3134:	2f 91       	pop	r18
    3136:	0f 90       	pop	r0
    3138:	0f be       	out	0x3f, r0	; 63
    313a:	0f 90       	pop	r0
    313c:	1f 90       	pop	r1
    313e:	18 95       	reti

00003140 <millis>:
    3140:	2f b7       	in	r18, 0x3f	; 63
    3142:	f8 94       	cli
    3144:	60 91 5f 07 	lds	r22, 0x075F	; 0x80075f <timer0_millis>
    3148:	70 91 60 07 	lds	r23, 0x0760	; 0x800760 <timer0_millis+0x1>
    314c:	80 91 61 07 	lds	r24, 0x0761	; 0x800761 <timer0_millis+0x2>
    3150:	90 91 62 07 	lds	r25, 0x0762	; 0x800762 <timer0_millis+0x3>
    3154:	2f bf       	out	0x3f, r18	; 63
    3156:	08 95       	ret

00003158 <micros>:
    3158:	3f b7       	in	r19, 0x3f	; 63
    315a:	f8 94       	cli
    315c:	80 91 63 07 	lds	r24, 0x0763	; 0x800763 <timer0_overflow_count>
    3160:	90 91 64 07 	lds	r25, 0x0764	; 0x800764 <timer0_overflow_count+0x1>
    3164:	a0 91 65 07 	lds	r26, 0x0765	; 0x800765 <timer0_overflow_count+0x2>
    3168:	b0 91 66 07 	lds	r27, 0x0766	; 0x800766 <timer0_overflow_count+0x3>
    316c:	26 b5       	in	r18, 0x26	; 38
    316e:	a8 9b       	sbis	0x15, 0	; 21
    3170:	05 c0       	rjmp	.+10     	; 0x317c <micros+0x24>
    3172:	2f 3f       	cpi	r18, 0xFF	; 255
    3174:	19 f0       	breq	.+6      	; 0x317c <micros+0x24>
    3176:	01 96       	adiw	r24, 0x01	; 1
    3178:	a1 1d       	adc	r26, r1
    317a:	b1 1d       	adc	r27, r1
    317c:	3f bf       	out	0x3f, r19	; 63
    317e:	ba 2f       	mov	r27, r26
    3180:	a9 2f       	mov	r26, r25
    3182:	98 2f       	mov	r25, r24
    3184:	88 27       	eor	r24, r24
    3186:	82 0f       	add	r24, r18
    3188:	91 1d       	adc	r25, r1
    318a:	a1 1d       	adc	r26, r1
    318c:	b1 1d       	adc	r27, r1
    318e:	bc 01       	movw	r22, r24
    3190:	cd 01       	movw	r24, r26
    3192:	43 e0       	ldi	r20, 0x03	; 3
    3194:	66 0f       	add	r22, r22
    3196:	77 1f       	adc	r23, r23
    3198:	88 1f       	adc	r24, r24
    319a:	99 1f       	adc	r25, r25
    319c:	4a 95       	dec	r20
    319e:	d1 f7       	brne	.-12     	; 0x3194 <micros+0x3c>
    31a0:	08 95       	ret

000031a2 <delay>:
    31a2:	8f 92       	push	r8
    31a4:	9f 92       	push	r9
    31a6:	af 92       	push	r10
    31a8:	bf 92       	push	r11
    31aa:	cf 92       	push	r12
    31ac:	df 92       	push	r13
    31ae:	ef 92       	push	r14
    31b0:	ff 92       	push	r15
    31b2:	6b 01       	movw	r12, r22
    31b4:	7c 01       	movw	r14, r24
    31b6:	0e 94 ac 18 	call	0x3158	; 0x3158 <micros>
    31ba:	4b 01       	movw	r8, r22
    31bc:	5c 01       	movw	r10, r24
    31be:	c1 14       	cp	r12, r1
    31c0:	d1 04       	cpc	r13, r1
    31c2:	e1 04       	cpc	r14, r1
    31c4:	f1 04       	cpc	r15, r1
    31c6:	01 f1       	breq	.+64     	; 0x3208 <delay+0x66>
    31c8:	0e 94 e3 21 	call	0x43c6	; 0x43c6 <yield>
    31cc:	0e 94 ac 18 	call	0x3158	; 0x3158 <micros>
    31d0:	dc 01       	movw	r26, r24
    31d2:	cb 01       	movw	r24, r22
    31d4:	88 19       	sub	r24, r8
    31d6:	99 09       	sbc	r25, r9
    31d8:	aa 09       	sbc	r26, r10
    31da:	bb 09       	sbc	r27, r11
    31dc:	88 3e       	cpi	r24, 0xE8	; 232
    31de:	93 40       	sbci	r25, 0x03	; 3
    31e0:	a1 05       	cpc	r26, r1
    31e2:	b1 05       	cpc	r27, r1
    31e4:	60 f3       	brcs	.-40     	; 0x31be <delay+0x1c>
    31e6:	21 e0       	ldi	r18, 0x01	; 1
    31e8:	c2 1a       	sub	r12, r18
    31ea:	d1 08       	sbc	r13, r1
    31ec:	e1 08       	sbc	r14, r1
    31ee:	f1 08       	sbc	r15, r1
    31f0:	88 ee       	ldi	r24, 0xE8	; 232
    31f2:	88 0e       	add	r8, r24
    31f4:	83 e0       	ldi	r24, 0x03	; 3
    31f6:	98 1e       	adc	r9, r24
    31f8:	a1 1c       	adc	r10, r1
    31fa:	b1 1c       	adc	r11, r1
    31fc:	c1 14       	cp	r12, r1
    31fe:	d1 04       	cpc	r13, r1
    3200:	e1 04       	cpc	r14, r1
    3202:	f1 04       	cpc	r15, r1
    3204:	19 f7       	brne	.-58     	; 0x31cc <delay+0x2a>
    3206:	db cf       	rjmp	.-74     	; 0x31be <delay+0x1c>
    3208:	ff 90       	pop	r15
    320a:	ef 90       	pop	r14
    320c:	df 90       	pop	r13
    320e:	cf 90       	pop	r12
    3210:	bf 90       	pop	r11
    3212:	af 90       	pop	r10
    3214:	9f 90       	pop	r9
    3216:	8f 90       	pop	r8
    3218:	08 95       	ret

0000321a <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    321a:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    321c:	84 b5       	in	r24, 0x24	; 36
    321e:	82 60       	ori	r24, 0x02	; 2
    3220:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    3222:	84 b5       	in	r24, 0x24	; 36
    3224:	81 60       	ori	r24, 0x01	; 1
    3226:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    3228:	85 b5       	in	r24, 0x25	; 37
    322a:	82 60       	ori	r24, 0x02	; 2
    322c:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    322e:	85 b5       	in	r24, 0x25	; 37
    3230:	81 60       	ori	r24, 0x01	; 1
    3232:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    3234:	ee e6       	ldi	r30, 0x6E	; 110
    3236:	f0 e0       	ldi	r31, 0x00	; 0
    3238:	80 81       	ld	r24, Z
    323a:	81 60       	ori	r24, 0x01	; 1
    323c:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    323e:	e1 e8       	ldi	r30, 0x81	; 129
    3240:	f0 e0       	ldi	r31, 0x00	; 0
    3242:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    3244:	80 81       	ld	r24, Z
    3246:	82 60       	ori	r24, 0x02	; 2
    3248:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    324a:	80 81       	ld	r24, Z
    324c:	81 60       	ori	r24, 0x01	; 1
    324e:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    3250:	e0 e8       	ldi	r30, 0x80	; 128
    3252:	f0 e0       	ldi	r31, 0x00	; 0
    3254:	80 81       	ld	r24, Z
    3256:	81 60       	ori	r24, 0x01	; 1
    3258:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    325a:	e1 eb       	ldi	r30, 0xB1	; 177
    325c:	f0 e0       	ldi	r31, 0x00	; 0
    325e:	80 81       	ld	r24, Z
    3260:	84 60       	ori	r24, 0x04	; 4
    3262:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    3264:	e0 eb       	ldi	r30, 0xB0	; 176
    3266:	f0 e0       	ldi	r31, 0x00	; 0
    3268:	80 81       	ld	r24, Z
    326a:	81 60       	ori	r24, 0x01	; 1
    326c:	80 83       	st	Z, r24
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
		sbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#elif F_CPU >= 8000000 // 8 MHz / 64 = 125 KHz
		sbi(ADCSRA, ADPS2);
    326e:	ea e7       	ldi	r30, 0x7A	; 122
    3270:	f0 e0       	ldi	r31, 0x00	; 0
    3272:	80 81       	ld	r24, Z
    3274:	84 60       	ori	r24, 0x04	; 4
    3276:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    3278:	80 81       	ld	r24, Z
    327a:	82 60       	ori	r24, 0x02	; 2
    327c:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS0);
    327e:	80 81       	ld	r24, Z
    3280:	8e 7f       	andi	r24, 0xFE	; 254
    3282:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    3284:	80 81       	ld	r24, Z
    3286:	80 68       	ori	r24, 0x80	; 128
    3288:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    328a:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    328e:	08 95       	ret

00003290 <analogReference>:
void analogReference(uint8_t mode)
{
	// can't actually set the register here because the default setting
	// will connect AVCC and the AREF pin, which would cause a short if
	// there's something connected to AREF.
	analog_reference = mode;
    3290:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <analog_reference>
    3294:	08 95       	ret

00003296 <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    3296:	8e 30       	cpi	r24, 0x0E	; 14
    3298:	08 f0       	brcs	.+2      	; 0x329c <analogRead+0x6>
    329a:	8e 50       	subi	r24, 0x0E	; 14
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    329c:	20 91 0f 01 	lds	r18, 0x010F	; 0x80010f <analog_reference>
    32a0:	90 e4       	ldi	r25, 0x40	; 64
    32a2:	29 9f       	mul	r18, r25
    32a4:	90 01       	movw	r18, r0
    32a6:	11 24       	eor	r1, r1
    32a8:	87 70       	andi	r24, 0x07	; 7
    32aa:	82 2b       	or	r24, r18
    32ac:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    32b0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    32b4:	80 64       	ori	r24, 0x40	; 64
    32b6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    32ba:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    32be:	86 fd       	sbrc	r24, 6
    32c0:	fc cf       	rjmp	.-8      	; 0x32ba <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    32c2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
	high = ADCH;
    32c6:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    32ca:	90 e0       	ldi	r25, 0x00	; 0
}
    32cc:	92 2b       	or	r25, r18
    32ce:	08 95       	ret

000032d0 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    32d0:	83 30       	cpi	r24, 0x03	; 3
    32d2:	81 f0       	breq	.+32     	; 0x32f4 <turnOffPWM+0x24>
    32d4:	28 f4       	brcc	.+10     	; 0x32e0 <turnOffPWM+0x10>
    32d6:	81 30       	cpi	r24, 0x01	; 1
    32d8:	99 f0       	breq	.+38     	; 0x3300 <turnOffPWM+0x30>
    32da:	82 30       	cpi	r24, 0x02	; 2
    32dc:	a1 f0       	breq	.+40     	; 0x3306 <turnOffPWM+0x36>
    32de:	08 95       	ret
    32e0:	87 30       	cpi	r24, 0x07	; 7
    32e2:	a9 f0       	breq	.+42     	; 0x330e <turnOffPWM+0x3e>
    32e4:	88 30       	cpi	r24, 0x08	; 8
    32e6:	b9 f0       	breq	.+46     	; 0x3316 <turnOffPWM+0x46>
    32e8:	84 30       	cpi	r24, 0x04	; 4
    32ea:	d1 f4       	brne	.+52     	; 0x3320 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    32ec:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    32f0:	8f 7d       	andi	r24, 0xDF	; 223
    32f2:	03 c0       	rjmp	.+6      	; 0x32fa <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    32f4:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    32f8:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    32fa:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    32fe:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    3300:	84 b5       	in	r24, 0x24	; 36
    3302:	8f 77       	andi	r24, 0x7F	; 127
    3304:	02 c0       	rjmp	.+4      	; 0x330a <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    3306:	84 b5       	in	r24, 0x24	; 36
    3308:	8f 7d       	andi	r24, 0xDF	; 223
    330a:	84 bd       	out	0x24, r24	; 36
    330c:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    330e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    3312:	8f 77       	andi	r24, 0x7F	; 127
    3314:	03 c0       	rjmp	.+6      	; 0x331c <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    3316:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    331a:	8f 7d       	andi	r24, 0xDF	; 223
    331c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    3320:	08 95       	ret

00003322 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    3322:	cf 93       	push	r28
    3324:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    3326:	90 e0       	ldi	r25, 0x00	; 0
    3328:	fc 01       	movw	r30, r24
    332a:	e3 53       	subi	r30, 0x33	; 51
    332c:	fc 4f       	sbci	r31, 0xFC	; 252
    332e:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    3330:	fc 01       	movw	r30, r24
    3332:	ef 51       	subi	r30, 0x1F	; 31
    3334:	fc 4f       	sbci	r31, 0xFC	; 252
    3336:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    3338:	88 23       	and	r24, r24
    333a:	61 f1       	breq	.+88     	; 0x3394 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    333c:	90 e0       	ldi	r25, 0x00	; 0
    333e:	88 0f       	add	r24, r24
    3340:	99 1f       	adc	r25, r25
    3342:	fc 01       	movw	r30, r24
    3344:	e7 5f       	subi	r30, 0xF7	; 247
    3346:	fb 4f       	sbci	r31, 0xFB	; 251
    3348:	c5 91       	lpm	r28, Z+
    334a:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    334c:	fc 01       	movw	r30, r24
    334e:	e1 50       	subi	r30, 0x01	; 1
    3350:	fc 4f       	sbci	r31, 0xFC	; 252
    3352:	a5 91       	lpm	r26, Z+
    3354:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    3356:	61 11       	cpse	r22, r1
    3358:	09 c0       	rjmp	.+18     	; 0x336c <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    335a:	9f b7       	in	r25, 0x3f	; 63
                cli();
    335c:	f8 94       	cli
		*reg &= ~bit;
    335e:	88 81       	ld	r24, Y
    3360:	20 95       	com	r18
    3362:	82 23       	and	r24, r18
    3364:	88 83       	st	Y, r24
		*out &= ~bit;
    3366:	ec 91       	ld	r30, X
    3368:	2e 23       	and	r18, r30
    336a:	0b c0       	rjmp	.+22     	; 0x3382 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    336c:	62 30       	cpi	r22, 0x02	; 2
    336e:	61 f4       	brne	.+24     	; 0x3388 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    3370:	9f b7       	in	r25, 0x3f	; 63
                cli();
    3372:	f8 94       	cli
		*reg &= ~bit;
    3374:	88 81       	ld	r24, Y
    3376:	32 2f       	mov	r19, r18
    3378:	30 95       	com	r19
    337a:	83 23       	and	r24, r19
    337c:	88 83       	st	Y, r24
		*out |= bit;
    337e:	ec 91       	ld	r30, X
    3380:	2e 2b       	or	r18, r30
    3382:	2c 93       	st	X, r18
		SREG = oldSREG;
    3384:	9f bf       	out	0x3f, r25	; 63
    3386:	06 c0       	rjmp	.+12     	; 0x3394 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    3388:	8f b7       	in	r24, 0x3f	; 63
                cli();
    338a:	f8 94       	cli
		*reg |= bit;
    338c:	e8 81       	ld	r30, Y
    338e:	2e 2b       	or	r18, r30
    3390:	28 83       	st	Y, r18
		SREG = oldSREG;
    3392:	8f bf       	out	0x3f, r24	; 63
	}
}
    3394:	df 91       	pop	r29
    3396:	cf 91       	pop	r28
    3398:	08 95       	ret

0000339a <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    339a:	1f 93       	push	r17
    339c:	cf 93       	push	r28
    339e:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    33a0:	28 2f       	mov	r18, r24
    33a2:	30 e0       	ldi	r19, 0x00	; 0
    33a4:	f9 01       	movw	r30, r18
    33a6:	e7 54       	subi	r30, 0x47	; 71
    33a8:	fc 4f       	sbci	r31, 0xFC	; 252
    33aa:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    33ac:	f9 01       	movw	r30, r18
    33ae:	e3 53       	subi	r30, 0x33	; 51
    33b0:	fc 4f       	sbci	r31, 0xFC	; 252
    33b2:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    33b4:	f9 01       	movw	r30, r18
    33b6:	ef 51       	subi	r30, 0x1F	; 31
    33b8:	fc 4f       	sbci	r31, 0xFC	; 252
    33ba:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    33bc:	cc 23       	and	r28, r28
    33be:	c1 f0       	breq	.+48     	; 0x33f0 <digitalWrite+0x56>
    33c0:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    33c2:	81 11       	cpse	r24, r1
    33c4:	0e 94 68 19 	call	0x32d0	; 0x32d0 <turnOffPWM>

	out = portOutputRegister(port);
    33c8:	ec 2f       	mov	r30, r28
    33ca:	f0 e0       	ldi	r31, 0x00	; 0
    33cc:	ee 0f       	add	r30, r30
    33ce:	ff 1f       	adc	r31, r31
    33d0:	e1 50       	subi	r30, 0x01	; 1
    33d2:	fc 4f       	sbci	r31, 0xFC	; 252
    33d4:	a5 91       	lpm	r26, Z+
    33d6:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    33d8:	9f b7       	in	r25, 0x3f	; 63
	cli();
    33da:	f8 94       	cli

	if (val == LOW) {
    33dc:	11 11       	cpse	r17, r1
    33de:	04 c0       	rjmp	.+8      	; 0x33e8 <digitalWrite+0x4e>
		*out &= ~bit;
    33e0:	8c 91       	ld	r24, X
    33e2:	d0 95       	com	r29
    33e4:	d8 23       	and	r29, r24
    33e6:	02 c0       	rjmp	.+4      	; 0x33ec <digitalWrite+0x52>
	} else {
		*out |= bit;
    33e8:	ec 91       	ld	r30, X
    33ea:	de 2b       	or	r29, r30
    33ec:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    33ee:	9f bf       	out	0x3f, r25	; 63
}
    33f0:	df 91       	pop	r29
    33f2:	cf 91       	pop	r28
    33f4:	1f 91       	pop	r17
    33f6:	08 95       	ret

000033f8 <digitalRead>:

int digitalRead(uint8_t pin)
{
    33f8:	cf 93       	push	r28
    33fa:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    33fc:	28 2f       	mov	r18, r24
    33fe:	30 e0       	ldi	r19, 0x00	; 0
    3400:	f9 01       	movw	r30, r18
    3402:	e7 54       	subi	r30, 0x47	; 71
    3404:	fc 4f       	sbci	r31, 0xFC	; 252
    3406:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    3408:	f9 01       	movw	r30, r18
    340a:	e3 53       	subi	r30, 0x33	; 51
    340c:	fc 4f       	sbci	r31, 0xFC	; 252
    340e:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    3410:	f9 01       	movw	r30, r18
    3412:	ef 51       	subi	r30, 0x1F	; 31
    3414:	fc 4f       	sbci	r31, 0xFC	; 252
    3416:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    3418:	cc 23       	and	r28, r28
    341a:	91 f0       	breq	.+36     	; 0x3440 <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    341c:	81 11       	cpse	r24, r1
    341e:	0e 94 68 19 	call	0x32d0	; 0x32d0 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    3422:	ec 2f       	mov	r30, r28
    3424:	f0 e0       	ldi	r31, 0x00	; 0
    3426:	ee 0f       	add	r30, r30
    3428:	ff 1f       	adc	r31, r31
    342a:	eb 50       	subi	r30, 0x0B	; 11
    342c:	fc 4f       	sbci	r31, 0xFC	; 252
    342e:	a5 91       	lpm	r26, Z+
    3430:	b4 91       	lpm	r27, Z
    3432:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    3434:	ed 23       	and	r30, r29
    3436:	81 e0       	ldi	r24, 0x01	; 1
    3438:	90 e0       	ldi	r25, 0x00	; 0
    343a:	21 f4       	brne	.+8      	; 0x3444 <digitalRead+0x4c>
    343c:	80 e0       	ldi	r24, 0x00	; 0
    343e:	02 c0       	rjmp	.+4      	; 0x3444 <digitalRead+0x4c>
    3440:	80 e0       	ldi	r24, 0x00	; 0
    3442:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    3444:	df 91       	pop	r29
    3446:	cf 91       	pop	r28
    3448:	08 95       	ret

0000344a <_ZN13EnergyMonitor7currentEjd>:
    //    - every 2 crosses we will have sampled 1 wavelength
    //    - so this method allows us to sample an integer number of half wavelengths which increases accuracy
    //-----------------------------------------------------------------------------
    lastVCross = checkVCross;
    if (sampleV > startV) checkVCross = true;
                     else checkVCross = false;
    344a:	fc 01       	movw	r30, r24
    344c:	77 8b       	std	Z+23, r23	; 0x17
    344e:	66 8b       	std	Z+22, r22	; 0x16
    3450:	24 8f       	std	Z+28, r18	; 0x1c
    3452:	35 8f       	std	Z+29, r19	; 0x1d
    3454:	46 8f       	std	Z+30, r20	; 0x1e
    3456:	57 8f       	std	Z+31, r21	; 0x1f
    3458:	80 e0       	ldi	r24, 0x00	; 0
    345a:	90 e0       	ldi	r25, 0x00	; 0
    345c:	a0 e0       	ldi	r26, 0x00	; 0
    345e:	b4 e4       	ldi	r27, 0x44	; 68
    3460:	80 af       	std	Z+56, r24	; 0x38
    3462:	91 af       	std	Z+57, r25	; 0x39
    3464:	a2 af       	std	Z+58, r26	; 0x3a
    3466:	b3 af       	std	Z+59, r27	; 0x3b
    3468:	08 95       	ret

0000346a <_ZN13EnergyMonitor7readVccEv>:
    346a:	8e e4       	ldi	r24, 0x4E	; 78
    346c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    3470:	62 e0       	ldi	r22, 0x02	; 2
    3472:	70 e0       	ldi	r23, 0x00	; 0
    3474:	80 e0       	ldi	r24, 0x00	; 0
    3476:	90 e0       	ldi	r25, 0x00	; 0
    3478:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <delay>
    347c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    3480:	80 64       	ori	r24, 0x40	; 64
    3482:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    3486:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    348a:	86 fd       	sbrc	r24, 6
    348c:	fc cf       	rjmp	.-8      	; 0x3486 <_ZN13EnergyMonitor7readVccEv+0x1c>
    348e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
    3492:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
    3496:	30 e0       	ldi	r19, 0x00	; 0
    3498:	32 2f       	mov	r19, r18
    349a:	22 27       	eor	r18, r18
    349c:	a9 01       	movw	r20, r18
    349e:	33 0f       	add	r19, r19
    34a0:	66 0b       	sbc	r22, r22
    34a2:	77 0b       	sbc	r23, r23
    34a4:	9a 01       	movw	r18, r20
    34a6:	ab 01       	movw	r20, r22
    34a8:	28 2b       	or	r18, r24
    34aa:	60 e0       	ldi	r22, 0x00	; 0
    34ac:	70 e3       	ldi	r23, 0x30	; 48
    34ae:	81 e1       	ldi	r24, 0x11	; 17
    34b0:	90 e0       	ldi	r25, 0x00	; 0
    34b2:	0e 94 89 24 	call	0x4912	; 0x4912 <__divmodsi4>
    34b6:	ca 01       	movw	r24, r20
    34b8:	b9 01       	movw	r22, r18
    34ba:	08 95       	ret

000034bc <_ZN13EnergyMonitor8calcIrmsEj>:
//--------------------------------------------------------------------------------------
}

//--------------------------------------------------------------------------------------
double EnergyMonitor::calcIrms(unsigned int Number_of_Samples)
{
    34bc:	2f 92       	push	r2
    34be:	3f 92       	push	r3
    34c0:	4f 92       	push	r4
    34c2:	5f 92       	push	r5
    34c4:	6f 92       	push	r6
    34c6:	7f 92       	push	r7
    34c8:	8f 92       	push	r8
    34ca:	9f 92       	push	r9
    34cc:	af 92       	push	r10
    34ce:	bf 92       	push	r11
    34d0:	cf 92       	push	r12
    34d2:	df 92       	push	r13
    34d4:	ef 92       	push	r14
    34d6:	ff 92       	push	r15
    34d8:	0f 93       	push	r16
    34da:	1f 93       	push	r17
    34dc:	cf 93       	push	r28
    34de:	df 93       	push	r29
    34e0:	00 d0       	rcall	.+0      	; 0x34e2 <_ZN13EnergyMonitor8calcIrmsEj+0x26>
    34e2:	00 d0       	rcall	.+0      	; 0x34e4 <_ZN13EnergyMonitor8calcIrmsEj+0x28>
    34e4:	00 d0       	rcall	.+0      	; 0x34e6 <_ZN13EnergyMonitor8calcIrmsEj+0x2a>
    34e6:	cd b7       	in	r28, 0x3d	; 61
    34e8:	de b7       	in	r29, 0x3e	; 62
    34ea:	9e 83       	std	Y+6, r25	; 0x06
    34ec:	8d 83       	std	Y+5, r24	; 0x05
    34ee:	7a 83       	std	Y+2, r23	; 0x02
    34f0:	69 83       	std	Y+1, r22	; 0x01

  #if defined emonTxV3
    int SupplyVoltage=3300;
  #else
    int SupplyVoltage = readVcc();
    34f2:	0e 94 35 1a 	call	0x346a	; 0x346a <_ZN13EnergyMonitor7readVccEv>
    34f6:	6b 01       	movw	r12, r22
    34f8:	7c 01       	movw	r14, r24
  #endif


  for (unsigned int n = 0; n < Number_of_Samples; n++)
    34fa:	00 e0       	ldi	r16, 0x00	; 0
    34fc:	10 e0       	ldi	r17, 0x00	; 0
    34fe:	8d 81       	ldd	r24, Y+5	; 0x05
    3500:	9e 81       	ldd	r25, Y+6	; 0x06
    3502:	84 5b       	subi	r24, 0xB4	; 180
    3504:	9f 4f       	sbci	r25, 0xFF	; 255
    3506:	1c 01       	movw	r2, r24
    offsetI = (offsetI + (sampleI-offsetI)/1024);
    filteredI = sampleI - offsetI;

    // Root-mean-square method current
    // 1) square current values
    sqI = filteredI * filteredI;
    3508:	ed 81       	ldd	r30, Y+5	; 0x05
    350a:	fe 81       	ldd	r31, Y+6	; 0x06
    350c:	e8 5b       	subi	r30, 0xB8	; 184
    350e:	ff 4f       	sbci	r31, 0xFF	; 255
    3510:	fc 83       	std	Y+4, r31	; 0x04
    3512:	eb 83       	std	Y+3, r30	; 0x03
  #else
    int SupplyVoltage = readVcc();
  #endif


  for (unsigned int n = 0; n < Number_of_Samples; n++)
    3514:	89 81       	ldd	r24, Y+1	; 0x01
    3516:	9a 81       	ldd	r25, Y+2	; 0x02
    3518:	08 17       	cp	r16, r24
    351a:	19 07       	cpc	r17, r25
    351c:	09 f4       	brne	.+2      	; 0x3520 <_ZN13EnergyMonitor8calcIrmsEj+0x64>
    351e:	52 c0       	rjmp	.+164    	; 0x35c4 <_ZN13EnergyMonitor8calcIrmsEj+0x108>
  {
    sampleI = analogRead(inPinI);
    3520:	ed 81       	ldd	r30, Y+5	; 0x05
    3522:	fe 81       	ldd	r31, Y+6	; 0x06
    3524:	86 89       	ldd	r24, Z+22	; 0x16
    3526:	0e 94 4b 19 	call	0x3296	; 0x3296 <analogRead>
    352a:	ed 81       	ldd	r30, Y+5	; 0x05
    352c:	fe 81       	ldd	r31, Y+6	; 0x06
    352e:	97 a3       	std	Z+39, r25	; 0x27
    3530:	86 a3       	std	Z+38, r24	; 0x26

    // Digital low pass filter extracts the 2.5 V or 1.65 V dc offset,
    //  then subtract this - signal is now centered on 0 counts.
    offsetI = (offsetI + (sampleI-offsetI)/1024);
    3532:	bc 01       	movw	r22, r24
    3534:	99 0f       	add	r25, r25
    3536:	88 0b       	sbc	r24, r24
    3538:	99 0b       	sbc	r25, r25
    353a:	0e 94 1e 11 	call	0x223c	; 0x223c <__floatsisf>
    353e:	4b 01       	movw	r8, r22
    3540:	5c 01       	movw	r10, r24
    3542:	ed 81       	ldd	r30, Y+5	; 0x05
    3544:	fe 81       	ldd	r31, Y+6	; 0x06
    3546:	40 ac       	ldd	r4, Z+56	; 0x38
    3548:	51 ac       	ldd	r5, Z+57	; 0x39
    354a:	62 ac       	ldd	r6, Z+58	; 0x3a
    354c:	73 ac       	ldd	r7, Z+59	; 0x3b
    354e:	a3 01       	movw	r20, r6
    3550:	92 01       	movw	r18, r4
    3552:	0e 94 02 10 	call	0x2004	; 0x2004 <__subsf3>
    3556:	20 e0       	ldi	r18, 0x00	; 0
    3558:	30 e0       	ldi	r19, 0x00	; 0
    355a:	40 e8       	ldi	r20, 0x80	; 128
    355c:	5a e3       	ldi	r21, 0x3A	; 58
    355e:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <__mulsf3>
    3562:	a3 01       	movw	r20, r6
    3564:	92 01       	movw	r18, r4
    3566:	0e 94 03 10 	call	0x2006	; 0x2006 <__addsf3>
    356a:	9b 01       	movw	r18, r22
    356c:	ac 01       	movw	r20, r24
    356e:	ed 81       	ldd	r30, Y+5	; 0x05
    3570:	fe 81       	ldd	r31, Y+6	; 0x06
    3572:	60 af       	std	Z+56, r22	; 0x38
    3574:	71 af       	std	Z+57, r23	; 0x39
    3576:	82 af       	std	Z+58, r24	; 0x3a
    3578:	93 af       	std	Z+59, r25	; 0x3b
    filteredI = sampleI - offsetI;
    357a:	c5 01       	movw	r24, r10
    357c:	b4 01       	movw	r22, r8
    357e:	0e 94 02 10 	call	0x2004	; 0x2004 <__subsf3>
    3582:	ed 81       	ldd	r30, Y+5	; 0x05
    3584:	fe 81       	ldd	r31, Y+6	; 0x06
    3586:	60 ab       	std	Z+48, r22	; 0x30
    3588:	71 ab       	std	Z+49, r23	; 0x31
    358a:	82 ab       	std	Z+50, r24	; 0x32
    358c:	93 ab       	std	Z+51, r25	; 0x33

    // Root-mean-square method current
    // 1) square current values
    sqI = filteredI * filteredI;
    358e:	9b 01       	movw	r18, r22
    3590:	ac 01       	movw	r20, r24
    3592:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <__mulsf3>
    3596:	9b 01       	movw	r18, r22
    3598:	ac 01       	movw	r20, r24
    359a:	eb 81       	ldd	r30, Y+3	; 0x03
    359c:	fc 81       	ldd	r31, Y+4	; 0x04
    359e:	60 83       	st	Z, r22
    35a0:	71 83       	std	Z+1, r23	; 0x01
    35a2:	82 83       	std	Z+2, r24	; 0x02
    35a4:	93 83       	std	Z+3, r25	; 0x03
    // 2) sum
    sumI += sqI;
    35a6:	f1 01       	movw	r30, r2
    35a8:	60 81       	ld	r22, Z
    35aa:	71 81       	ldd	r23, Z+1	; 0x01
    35ac:	82 81       	ldd	r24, Z+2	; 0x02
    35ae:	93 81       	ldd	r25, Z+3	; 0x03
    35b0:	0e 94 03 10 	call	0x2006	; 0x2006 <__addsf3>
    35b4:	f1 01       	movw	r30, r2
    35b6:	60 83       	st	Z, r22
    35b8:	71 83       	std	Z+1, r23	; 0x01
    35ba:	82 83       	std	Z+2, r24	; 0x02
    35bc:	93 83       	std	Z+3, r25	; 0x03
  #else
    int SupplyVoltage = readVcc();
  #endif


  for (unsigned int n = 0; n < Number_of_Samples; n++)
    35be:	0f 5f       	subi	r16, 0xFF	; 255
    35c0:	1f 4f       	sbci	r17, 0xFF	; 255
    35c2:	a8 cf       	rjmp	.-176    	; 0x3514 <_ZN13EnergyMonitor8calcIrmsEj+0x58>
    // 2) sum
    sumI += sqI;
  }

  double I_RATIO = ICAL *((SupplyVoltage/1000.0) / (ADC_COUNTS));
  Irms = I_RATIO * sqrt(sumI / Number_of_Samples);
    35c4:	b8 01       	movw	r22, r16
    35c6:	80 e0       	ldi	r24, 0x00	; 0
    35c8:	90 e0       	ldi	r25, 0x00	; 0
    35ca:	0e 94 1c 11 	call	0x2238	; 0x2238 <__floatunsisf>
    35ce:	9b 01       	movw	r18, r22
    35d0:	ac 01       	movw	r20, r24
    35d2:	f1 01       	movw	r30, r2
    35d4:	60 81       	ld	r22, Z
    35d6:	71 81       	ldd	r23, Z+1	; 0x01
    35d8:	82 81       	ldd	r24, Z+2	; 0x02
    35da:	93 81       	ldd	r25, Z+3	; 0x03
    35dc:	0e 94 74 10 	call	0x20e8	; 0x20e8 <__divsf3>
    35e0:	0e 94 96 12 	call	0x252c	; 0x252c <sqrt>
    35e4:	4b 01       	movw	r8, r22
    35e6:	5c 01       	movw	r10, r24
    35e8:	b6 01       	movw	r22, r12
    35ea:	dd 0c       	add	r13, r13
    35ec:	88 0b       	sbc	r24, r24
    35ee:	99 0b       	sbc	r25, r25
    35f0:	0e 94 1e 11 	call	0x223c	; 0x223c <__floatsisf>
    35f4:	20 e0       	ldi	r18, 0x00	; 0
    35f6:	30 e0       	ldi	r19, 0x00	; 0
    35f8:	4a e7       	ldi	r20, 0x7A	; 122
    35fa:	54 e4       	ldi	r21, 0x44	; 68
    35fc:	0e 94 74 10 	call	0x20e8	; 0x20e8 <__divsf3>
    3600:	20 e0       	ldi	r18, 0x00	; 0
    3602:	30 e0       	ldi	r19, 0x00	; 0
    3604:	40 e8       	ldi	r20, 0x80	; 128
    3606:	5a e3       	ldi	r21, 0x3A	; 58
    3608:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <__mulsf3>
    360c:	ed 81       	ldd	r30, Y+5	; 0x05
    360e:	fe 81       	ldd	r31, Y+6	; 0x06
    3610:	24 8d       	ldd	r18, Z+28	; 0x1c
    3612:	35 8d       	ldd	r19, Z+29	; 0x1d
    3614:	46 8d       	ldd	r20, Z+30	; 0x1e
    3616:	57 8d       	ldd	r21, Z+31	; 0x1f
    3618:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <__mulsf3>
    361c:	a5 01       	movw	r20, r10
    361e:	94 01       	movw	r18, r8
    3620:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <__mulsf3>
    3624:	ed 81       	ldd	r30, Y+5	; 0x05
    3626:	fe 81       	ldd	r31, Y+6	; 0x06
    3628:	60 8b       	std	Z+16, r22	; 0x10
    362a:	71 8b       	std	Z+17, r23	; 0x11
    362c:	82 8b       	std	Z+18, r24	; 0x12
    362e:	93 8b       	std	Z+19, r25	; 0x13

  //Reset accumulators
  sumI = 0;
    3630:	f1 01       	movw	r30, r2
    3632:	10 82       	st	Z, r1
    3634:	11 82       	std	Z+1, r1	; 0x01
    3636:	12 82       	std	Z+2, r1	; 0x02
    3638:	13 82       	std	Z+3, r1	; 0x03
  //--------------------------------------------------------------------------------------

  return Irms;
}
    363a:	26 96       	adiw	r28, 0x06	; 6
    363c:	0f b6       	in	r0, 0x3f	; 63
    363e:	f8 94       	cli
    3640:	de bf       	out	0x3e, r29	; 62
    3642:	0f be       	out	0x3f, r0	; 63
    3644:	cd bf       	out	0x3d, r28	; 61
    3646:	df 91       	pop	r29
    3648:	cf 91       	pop	r28
    364a:	1f 91       	pop	r17
    364c:	0f 91       	pop	r16
    364e:	ff 90       	pop	r15
    3650:	ef 90       	pop	r14
    3652:	df 90       	pop	r13
    3654:	cf 90       	pop	r12
    3656:	bf 90       	pop	r11
    3658:	af 90       	pop	r10
    365a:	9f 90       	pop	r9
    365c:	8f 90       	pop	r8
    365e:	7f 90       	pop	r7
    3660:	6f 90       	pop	r6
    3662:	5f 90       	pop	r5
    3664:	4f 90       	pop	r4
    3666:	3f 90       	pop	r3
    3668:	2f 90       	pop	r2
    366a:	08 95       	ret

0000366c <_ZN15RHGenericDriver4initEv>:
}

bool RHGenericDriver::init()
{
    return true;
}
    366c:	81 e0       	ldi	r24, 0x01	; 1
    366e:	08 95       	ret

00003670 <_ZN15RHGenericDriver14setPromiscuousEb>:
    return false;
}

void RHGenericDriver::setPromiscuous(bool promiscuous)
{
    _promiscuous = promiscuous;
    3670:	fc 01       	movw	r30, r24
    3672:	64 83       	std	Z+4, r22	; 0x04
    3674:	08 95       	ret

00003676 <_ZN15RHGenericDriver14setThisAddressEh>:
}

void RHGenericDriver::setThisAddress(uint8_t address)
{
    _thisAddress = address;
    3676:	fc 01       	movw	r30, r24
    3678:	63 83       	std	Z+3, r22	; 0x03
    367a:	08 95       	ret

0000367c <_ZN15RHGenericDriver11setHeaderToEh>:
}

void RHGenericDriver::setHeaderTo(uint8_t to)
{
    _txHeaderTo = to;
    367c:	fc 01       	movw	r30, r24
    367e:	61 87       	std	Z+9, r22	; 0x09
    3680:	08 95       	ret

00003682 <_ZN15RHGenericDriver13setHeaderFromEh>:
}

void RHGenericDriver::setHeaderFrom(uint8_t from)
{
    _txHeaderFrom = from;
    3682:	fc 01       	movw	r30, r24
    3684:	62 87       	std	Z+10, r22	; 0x0a
    3686:	08 95       	ret

00003688 <_ZN15RHGenericDriver11setHeaderIdEh>:
}

void RHGenericDriver::setHeaderId(uint8_t id)
{
    _txHeaderId = id;
    3688:	fc 01       	movw	r30, r24
    368a:	63 87       	std	Z+11, r22	; 0x0b
    368c:	08 95       	ret

0000368e <_ZN15RHGenericDriver14setHeaderFlagsEhh>:
}

void RHGenericDriver::setHeaderFlags(uint8_t set, uint8_t clear)
{
    368e:	fc 01       	movw	r30, r24
    _txHeaderFlags &= ~clear;
    _txHeaderFlags |= set;
    3690:	40 95       	com	r20
    3692:	94 85       	ldd	r25, Z+12	; 0x0c
    3694:	49 23       	and	r20, r25
    3696:	64 2b       	or	r22, r20
    3698:	64 87       	std	Z+12, r22	; 0x0c
    369a:	08 95       	ret

0000369c <_ZN15RHGenericDriver8headerToEv>:
}

uint8_t RHGenericDriver::headerTo()
{
    return _rxHeaderTo;
    369c:	fc 01       	movw	r30, r24
    369e:	85 81       	ldd	r24, Z+5	; 0x05
}
    36a0:	08 95       	ret

000036a2 <_ZN15RHGenericDriver10headerFromEv>:

uint8_t RHGenericDriver::headerFrom()
{
    return _rxHeaderFrom;
    36a2:	fc 01       	movw	r30, r24
    36a4:	86 81       	ldd	r24, Z+6	; 0x06
}
    36a6:	08 95       	ret

000036a8 <_ZN15RHGenericDriver8headerIdEv>:

uint8_t RHGenericDriver::headerId()
{
    return _rxHeaderId;
    36a8:	fc 01       	movw	r30, r24
    36aa:	87 81       	ldd	r24, Z+7	; 0x07
}
    36ac:	08 95       	ret

000036ae <_ZN15RHGenericDriver11headerFlagsEv>:

uint8_t RHGenericDriver::headerFlags()
{
    return _rxHeaderFlags;
    36ae:	fc 01       	movw	r30, r24
    36b0:	80 85       	ldd	r24, Z+8	; 0x08
}
    36b2:	08 95       	ret

000036b4 <_ZN15RHGenericDriver8lastRssiEv>:

int16_t RHGenericDriver::lastRssi()
{
    return _lastRssi;
    36b4:	fc 01       	movw	r30, r24
    36b6:	85 85       	ldd	r24, Z+13	; 0x0d
    36b8:	96 85       	ldd	r25, Z+14	; 0x0e
}
    36ba:	08 95       	ret

000036bc <_ZN15RHGenericDriver4modeEv>:

RHGenericDriver::RHMode  RHGenericDriver::mode()
{
    return _mode;
    36bc:	fc 01       	movw	r30, r24
    36be:	82 81       	ldd	r24, Z+2	; 0x02
}
    36c0:	08 95       	ret

000036c2 <_ZN15RHGenericDriver7setModeENS_6RHModeE>:

void  RHGenericDriver::setMode(RHMode mode)
{
    _mode = mode;
    36c2:	fc 01       	movw	r30, r24
    36c4:	62 83       	std	Z+2, r22	; 0x02
    36c6:	08 95       	ret

000036c8 <_ZN15RHGenericDriver15isChannelActiveEv>:
}

bool  RHGenericDriver::sleep()
{
    return false;
}
    36c8:	80 e0       	ldi	r24, 0x00	; 0
    36ca:	08 95       	ret

000036cc <_ZN15RHGenericDriver5rxBadEv>:
#endif
}

uint16_t RHGenericDriver::rxBad()
{
    return _rxBad;
    36cc:	fc 01       	movw	r30, r24
    36ce:	87 85       	ldd	r24, Z+15	; 0x0f
    36d0:	90 89       	ldd	r25, Z+16	; 0x10
}
    36d2:	08 95       	ret

000036d4 <_ZN15RHGenericDriver6rxGoodEv>:

uint16_t RHGenericDriver::rxGood()
{
    return _rxGood;
    36d4:	fc 01       	movw	r30, r24
    36d6:	81 89       	ldd	r24, Z+17	; 0x11
    36d8:	92 89       	ldd	r25, Z+18	; 0x12
}
    36da:	08 95       	ret

000036dc <_ZN15RHGenericDriver6txGoodEv>:

uint16_t RHGenericDriver::txGood()
{
    return _txGood;
    36dc:	fc 01       	movw	r30, r24
    36de:	83 89       	ldd	r24, Z+19	; 0x13
    36e0:	94 89       	ldd	r25, Z+20	; 0x14
}
    36e2:	08 95       	ret

000036e4 <_ZN15RHGenericDriver13waitAvailableEv>:
    return true;
}

// Blocks until a valid message is received
void RHGenericDriver::waitAvailable()
{
    36e4:	cf 93       	push	r28
    36e6:	df 93       	push	r29
    36e8:	ec 01       	movw	r28, r24
    while (!available())
    36ea:	e8 81       	ld	r30, Y
    36ec:	f9 81       	ldd	r31, Y+1	; 0x01
    36ee:	06 80       	ldd	r0, Z+6	; 0x06
    36f0:	f7 81       	ldd	r31, Z+7	; 0x07
    36f2:	e0 2d       	mov	r30, r0
    36f4:	ce 01       	movw	r24, r28
    36f6:	09 95       	icall
    36f8:	81 11       	cpse	r24, r1
    36fa:	03 c0       	rjmp	.+6      	; 0x3702 <_ZN15RHGenericDriver13waitAvailableEv+0x1e>
	YIELD;
    36fc:	0e 94 e3 21 	call	0x43c6	; 0x43c6 <yield>
}

// Blocks until a valid message is received
void RHGenericDriver::waitAvailable()
{
    while (!available())
    3700:	f4 cf       	rjmp	.-24     	; 0x36ea <_ZN15RHGenericDriver13waitAvailableEv+0x6>
	YIELD;
}
    3702:	df 91       	pop	r29
    3704:	cf 91       	pop	r28
    3706:	08 95       	ret

00003708 <_ZN15RHGenericDriver14waitPacketSentEv>:
    }
    return false;
}

bool RHGenericDriver::waitPacketSent()
{
    3708:	cf 93       	push	r28
    370a:	df 93       	push	r29
    370c:	ec 01       	movw	r28, r24
    while (_mode == RHModeTx)
    370e:	8a 81       	ldd	r24, Y+2	; 0x02
    3710:	83 30       	cpi	r24, 0x03	; 3
    3712:	19 f4       	brne	.+6      	; 0x371a <_ZN15RHGenericDriver14waitPacketSentEv+0x12>
	YIELD; // Wait for any previous transmit to finish
    3714:	0e 94 e3 21 	call	0x43c6	; 0x43c6 <yield>
    return false;
}

bool RHGenericDriver::waitPacketSent()
{
    while (_mode == RHModeTx)
    3718:	fa cf       	rjmp	.-12     	; 0x370e <_ZN15RHGenericDriver14waitPacketSentEv+0x6>
	YIELD; // Wait for any previous transmit to finish
    return true;
}
    371a:	81 e0       	ldi	r24, 0x01	; 1
    371c:	df 91       	pop	r29
    371e:	cf 91       	pop	r28
    3720:	08 95       	ret

00003722 <_ZN15RHGenericDriver20waitAvailableTimeoutEj>:

// Blocks until a valid message is received or timeout expires
// Return true if there is a message available
// Works correctly even on millis() rollover
bool RHGenericDriver::waitAvailableTimeout(uint16_t timeout)
{
    3722:	8f 92       	push	r8
    3724:	9f 92       	push	r9
    3726:	af 92       	push	r10
    3728:	bf 92       	push	r11
    372a:	cf 92       	push	r12
    372c:	df 92       	push	r13
    372e:	ef 92       	push	r14
    3730:	ff 92       	push	r15
    3732:	cf 93       	push	r28
    3734:	df 93       	push	r29
    3736:	ec 01       	movw	r28, r24
    3738:	6b 01       	movw	r12, r22
    unsigned long starttime = millis();
    373a:	0e 94 a0 18 	call	0x3140	; 0x3140 <millis>
    373e:	4b 01       	movw	r8, r22
    3740:	5c 01       	movw	r10, r24
    while ((millis() - starttime) < timeout)
    3742:	e1 2c       	mov	r14, r1
    3744:	f1 2c       	mov	r15, r1
    3746:	0e 94 a0 18 	call	0x3140	; 0x3140 <millis>
    374a:	dc 01       	movw	r26, r24
    374c:	cb 01       	movw	r24, r22
    374e:	88 19       	sub	r24, r8
    3750:	99 09       	sbc	r25, r9
    3752:	aa 09       	sbc	r26, r10
    3754:	bb 09       	sbc	r27, r11
    3756:	8c 15       	cp	r24, r12
    3758:	9d 05       	cpc	r25, r13
    375a:	ae 05       	cpc	r26, r14
    375c:	bf 05       	cpc	r27, r15
    375e:	60 f4       	brcc	.+24     	; 0x3778 <_ZN15RHGenericDriver20waitAvailableTimeoutEj+0x56>
    {
        if (available())
    3760:	e8 81       	ld	r30, Y
    3762:	f9 81       	ldd	r31, Y+1	; 0x01
    3764:	06 80       	ldd	r0, Z+6	; 0x06
    3766:	f7 81       	ldd	r31, Z+7	; 0x07
    3768:	e0 2d       	mov	r30, r0
    376a:	ce 01       	movw	r24, r28
    376c:	09 95       	icall
    376e:	81 11       	cpse	r24, r1
    3770:	04 c0       	rjmp	.+8      	; 0x377a <_ZN15RHGenericDriver20waitAvailableTimeoutEj+0x58>
	{
           return true;
	}
	YIELD;
    3772:	0e 94 e3 21 	call	0x43c6	; 0x43c6 <yield>
// Return true if there is a message available
// Works correctly even on millis() rollover
bool RHGenericDriver::waitAvailableTimeout(uint16_t timeout)
{
    unsigned long starttime = millis();
    while ((millis() - starttime) < timeout)
    3776:	e7 cf       	rjmp	.-50     	; 0x3746 <_ZN15RHGenericDriver20waitAvailableTimeoutEj+0x24>
	{
           return true;
	}
	YIELD;
    }
    return false;
    3778:	80 e0       	ldi	r24, 0x00	; 0
}
    377a:	df 91       	pop	r29
    377c:	cf 91       	pop	r28
    377e:	ff 90       	pop	r15
    3780:	ef 90       	pop	r14
    3782:	df 90       	pop	r13
    3784:	cf 90       	pop	r12
    3786:	bf 90       	pop	r11
    3788:	af 90       	pop	r10
    378a:	9f 90       	pop	r9
    378c:	8f 90       	pop	r8
    378e:	08 95       	ret

00003790 <_ZN15RHGenericDriver14waitPacketSentEj>:
	YIELD; // Wait for any previous transmit to finish
    return true;
}

bool RHGenericDriver::waitPacketSent(uint16_t timeout)
{
    3790:	8f 92       	push	r8
    3792:	9f 92       	push	r9
    3794:	af 92       	push	r10
    3796:	bf 92       	push	r11
    3798:	cf 92       	push	r12
    379a:	df 92       	push	r13
    379c:	ef 92       	push	r14
    379e:	ff 92       	push	r15
    37a0:	cf 93       	push	r28
    37a2:	df 93       	push	r29
    37a4:	ec 01       	movw	r28, r24
    37a6:	6b 01       	movw	r12, r22
    unsigned long starttime = millis();
    37a8:	0e 94 a0 18 	call	0x3140	; 0x3140 <millis>
    37ac:	4b 01       	movw	r8, r22
    37ae:	5c 01       	movw	r10, r24
    while ((millis() - starttime) < timeout)
    37b0:	e1 2c       	mov	r14, r1
    37b2:	f1 2c       	mov	r15, r1
    37b4:	0e 94 a0 18 	call	0x3140	; 0x3140 <millis>
    37b8:	dc 01       	movw	r26, r24
    37ba:	cb 01       	movw	r24, r22
    37bc:	88 19       	sub	r24, r8
    37be:	99 09       	sbc	r25, r9
    37c0:	aa 09       	sbc	r26, r10
    37c2:	bb 09       	sbc	r27, r11
    37c4:	8c 15       	cp	r24, r12
    37c6:	9d 05       	cpc	r25, r13
    37c8:	ae 05       	cpc	r26, r14
    37ca:	bf 05       	cpc	r27, r15
    37cc:	30 f4       	brcc	.+12     	; 0x37da <_ZN15RHGenericDriver14waitPacketSentEj+0x4a>
    {
        if (_mode != RHModeTx) // Any previous transmit finished?
    37ce:	8a 81       	ldd	r24, Y+2	; 0x02
    37d0:	83 30       	cpi	r24, 0x03	; 3
    37d2:	29 f4       	brne	.+10     	; 0x37de <_ZN15RHGenericDriver14waitPacketSentEj+0x4e>
           return true;
	YIELD;
    37d4:	0e 94 e3 21 	call	0x43c6	; 0x43c6 <yield>
}

bool RHGenericDriver::waitPacketSent(uint16_t timeout)
{
    unsigned long starttime = millis();
    while ((millis() - starttime) < timeout)
    37d8:	ed cf       	rjmp	.-38     	; 0x37b4 <_ZN15RHGenericDriver14waitPacketSentEj+0x24>
    {
        if (_mode != RHModeTx) // Any previous transmit finished?
           return true;
	YIELD;
    }
    return false;
    37da:	80 e0       	ldi	r24, 0x00	; 0
    37dc:	01 c0       	rjmp	.+2      	; 0x37e0 <_ZN15RHGenericDriver14waitPacketSentEj+0x50>
{
    unsigned long starttime = millis();
    while ((millis() - starttime) < timeout)
    {
        if (_mode != RHModeTx) // Any previous transmit finished?
           return true;
    37de:	81 e0       	ldi	r24, 0x01	; 1
	YIELD;
    }
    return false;
}
    37e0:	df 91       	pop	r29
    37e2:	cf 91       	pop	r28
    37e4:	ff 90       	pop	r15
    37e6:	ef 90       	pop	r14
    37e8:	df 90       	pop	r13
    37ea:	cf 90       	pop	r12
    37ec:	bf 90       	pop	r11
    37ee:	af 90       	pop	r10
    37f0:	9f 90       	pop	r9
    37f2:	8f 90       	pop	r8
    37f4:	08 95       	ret

000037f6 <_ZN15RHGenericDriver7waitCADEv>:

// Wait until no channel activity detected or timeout
bool RHGenericDriver::waitCAD()
{
    37f6:	cf 92       	push	r12
    37f8:	df 92       	push	r13
    37fa:	ef 92       	push	r14
    37fc:	ff 92       	push	r15
    37fe:	cf 93       	push	r28
    3800:	df 93       	push	r29
    if (!_cad_timeout)
    3802:	fc 01       	movw	r30, r24
    3804:	26 89       	ldd	r18, Z+22	; 0x16
    3806:	37 89       	ldd	r19, Z+23	; 0x17
    3808:	23 2b       	or	r18, r19
    380a:	91 f1       	breq	.+100    	; 0x3870 <_ZN15RHGenericDriver7waitCADEv+0x7a>
    380c:	ec 01       	movw	r28, r24
    // Wait for any channel activity to finish or timeout
    // Sophisticated DCF function...
    // DCF : BackoffTime = random() x aSlotTime
    // 100 - 1000 ms
    // 10 sec timeout
    unsigned long t = millis();
    380e:	0e 94 a0 18 	call	0x3140	; 0x3140 <millis>
    3812:	6b 01       	movw	r12, r22
    3814:	7c 01       	movw	r14, r24
    while (isChannelActive())
    3816:	e8 81       	ld	r30, Y
    3818:	f9 81       	ldd	r31, Y+1	; 0x01
    381a:	00 8c       	ldd	r0, Z+24	; 0x18
    381c:	f1 8d       	ldd	r31, Z+25	; 0x19
    381e:	e0 2d       	mov	r30, r0
    3820:	ce 01       	movw	r24, r28
    3822:	09 95       	icall
    3824:	88 23       	and	r24, r24
    3826:	21 f1       	breq	.+72     	; 0x3870 <_ZN15RHGenericDriver7waitCADEv+0x7a>
    {
         if (millis() - t > _cad_timeout) 
    3828:	0e 94 a0 18 	call	0x3140	; 0x3140 <millis>
    382c:	ab 01       	movw	r20, r22
    382e:	bc 01       	movw	r22, r24
    3830:	4c 19       	sub	r20, r12
    3832:	5d 09       	sbc	r21, r13
    3834:	6e 09       	sbc	r22, r14
    3836:	7f 09       	sbc	r23, r15
    3838:	8e 89       	ldd	r24, Y+22	; 0x16
    383a:	9f 89       	ldd	r25, Y+23	; 0x17
    383c:	a0 e0       	ldi	r26, 0x00	; 0
    383e:	b0 e0       	ldi	r27, 0x00	; 0
    3840:	84 17       	cp	r24, r20
    3842:	95 07       	cpc	r25, r21
    3844:	a6 07       	cpc	r26, r22
    3846:	b7 07       	cpc	r27, r23
    3848:	a8 f0       	brcs	.+42     	; 0x3874 <_ZN15RHGenericDriver7waitCADEv+0x7e>
	     return false;
#if (RH_PLATFORM == RH_PLATFORM_STM32) // stdlib on STMF103 gets confused if random is redefined
	 delay(_random(1, 10) * 100);
#else
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
    384a:	2a e0       	ldi	r18, 0x0A	; 10
    384c:	30 e0       	ldi	r19, 0x00	; 0
    384e:	40 e0       	ldi	r20, 0x00	; 0
    3850:	50 e0       	ldi	r21, 0x00	; 0
    3852:	61 e0       	ldi	r22, 0x01	; 1
    3854:	70 e0       	ldi	r23, 0x00	; 0
    3856:	80 e0       	ldi	r24, 0x00	; 0
    3858:	90 e0       	ldi	r25, 0x00	; 0
    385a:	0e 94 6f 22 	call	0x44de	; 0x44de <_Z6randomll>
    385e:	9b 01       	movw	r18, r22
    3860:	ac 01       	movw	r20, r24
    3862:	a4 e6       	ldi	r26, 0x64	; 100
    3864:	b0 e0       	ldi	r27, 0x00	; 0
    3866:	0e 94 a8 24 	call	0x4950	; 0x4950 <__muluhisi3>
    386a:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <delay>
    386e:	d3 cf       	rjmp	.-90     	; 0x3816 <_ZN15RHGenericDriver7waitCADEv+0x20>

// Wait until no channel activity detected or timeout
bool RHGenericDriver::waitCAD()
{
    if (!_cad_timeout)
	return true;
    3870:	81 e0       	ldi	r24, 0x01	; 1
    3872:	01 c0       	rjmp	.+2      	; 0x3876 <_ZN15RHGenericDriver7waitCADEv+0x80>
    // 10 sec timeout
    unsigned long t = millis();
    while (isChannelActive())
    {
         if (millis() - t > _cad_timeout) 
	     return false;
    3874:	80 e0       	ldi	r24, 0x00	; 0
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
#endif
    }

    return true;
}
    3876:	df 91       	pop	r29
    3878:	cf 91       	pop	r28
    387a:	ff 90       	pop	r15
    387c:	ef 90       	pop	r14
    387e:	df 90       	pop	r13
    3880:	cf 90       	pop	r12
    3882:	08 95       	ret

00003884 <_ZN15RHGenericDriverC1Ev>:
// Copyright (C) 2014 Mike McCauley
// $Id: RHGenericDriver.cpp,v 1.24 2020/01/07 23:35:02 mikem Exp $

#include <RHGenericDriver.h>

RHGenericDriver::RHGenericDriver()
    3884:	fc 01       	movw	r30, r24
    _txHeaderId(0),
    _txHeaderFlags(0),
    _rxBad(0),
    _rxGood(0),
    _txGood(0),
    _cad_timeout(0)
    3886:	8c e0       	ldi	r24, 0x0C	; 12
    3888:	92 e0       	ldi	r25, 0x02	; 2
    388a:	91 83       	std	Z+1, r25	; 0x01
    388c:	80 83       	st	Z, r24
    388e:	12 82       	std	Z+2, r1	; 0x02
    3890:	8f ef       	ldi	r24, 0xFF	; 255
    3892:	83 83       	std	Z+3, r24	; 0x03
    3894:	81 87       	std	Z+9, r24	; 0x09
    3896:	82 87       	std	Z+10, r24	; 0x0a
    3898:	13 86       	std	Z+11, r1	; 0x0b
    389a:	14 86       	std	Z+12, r1	; 0x0c
    389c:	10 8a       	std	Z+16, r1	; 0x10
    389e:	17 86       	std	Z+15, r1	; 0x0f
    38a0:	12 8a       	std	Z+18, r1	; 0x12
    38a2:	11 8a       	std	Z+17, r1	; 0x11
    38a4:	14 8a       	std	Z+20, r1	; 0x14
    38a6:	13 8a       	std	Z+19, r1	; 0x13
    38a8:	17 8a       	std	Z+23, r1	; 0x17
    38aa:	16 8a       	std	Z+22, r1	; 0x16
    38ac:	08 95       	ret

000038ae <_ZN13RHHardwareSPI8transferEh>:
    SPSR = settings.spsr;
  }

  // Write to the SPI bus (MOSI pin) and also receive (MISO pin)
  inline static uint8_t transfer(uint8_t data) {
    SPDR = data;
    38ae:	6e bd       	out	0x2e, r22	; 46
     * The following NOP introduces a small delay that can prevent the wait
     * loop form iterating when running at the maximum speed. This gives
     * about 10% more speed, even if it seems counter-intuitive. At lower
     * speeds it is unnoticed.
     */
    asm volatile("nop");
    38b0:	00 00       	nop
    while (!(SPSR & _BV(SPIF))) ; // wait
    38b2:	0d b4       	in	r0, 0x2d	; 45
    38b4:	07 fe       	sbrs	r0, 7
    38b6:	fd cf       	rjmp	.-6      	; 0x38b2 <_ZN13RHHardwareSPI8transferEh+0x4>
    return SPDR;
    38b8:	8e b5       	in	r24, 0x2e	; 46
}

uint8_t RHHardwareSPI::transfer(uint8_t data) 
{
    return SPI.transfer(data);
}
    38ba:	08 95       	ret

000038bc <_ZN13RHHardwareSPI15attachInterruptEv>:
    SPSR = (SPSR & ~SPI_2XCLOCK_MASK) | ((clockDiv >> 2) & SPI_2XCLOCK_MASK);
  }
  // These undocumented functions should not be used.  SPI.transfer()
  // polls the hardware flag which is automatically cleared as the
  // AVR responds to SPI's interrupt
  inline static void attachInterrupt() { SPCR |= _BV(SPIE); }
    38bc:	8c b5       	in	r24, 0x2c	; 44
    38be:	80 68       	ori	r24, 0x80	; 128
    38c0:	8c bd       	out	0x2c, r24	; 44
    38c2:	08 95       	ret

000038c4 <_ZN13RHHardwareSPI15detachInterruptEv>:
  inline static void detachInterrupt() { SPCR &= ~_BV(SPIE); }
    38c4:	8c b5       	in	r24, 0x2c	; 44
    38c6:	8f 77       	andi	r24, 0x7F	; 127
    38c8:	8c bd       	out	0x2c, r24	; 44
    38ca:	08 95       	ret

000038cc <_ZN13RHHardwareSPI16beginTransactionEv>:
{
    return SPI.end();
}

void RHHardwareSPI::beginTransaction()
{
    38cc:	fc 01       	movw	r30, r24
    38ce:	45 81       	ldd	r20, Z+5	; 0x05
    38d0:	36 81       	ldd	r19, Z+6	; 0x06

  // Before using SPI.transfer() or asserting chip select pins,
  // this function is used to gain exclusive access to the SPI bus
  // and configure the correct settings.
  inline static void beginTransaction(SPISettings settings) {
    if (interruptMode > 0) {
    38d2:	80 91 77 07 	lds	r24, 0x0777	; 0x800777 <_ZN8SPIClass13interruptModeE>
    38d6:	88 23       	and	r24, r24
    38d8:	99 f0       	breq	.+38     	; 0x3900 <_ZN13RHHardwareSPI16beginTransactionEv+0x34>
      uint8_t sreg = SREG;
    38da:	2f b7       	in	r18, 0x3f	; 63
      noInterrupts();
    38dc:	f8 94       	cli

      #ifdef SPI_AVR_EIMSK
      if (interruptMode == 1) {
    38de:	80 91 77 07 	lds	r24, 0x0777	; 0x800777 <_ZN8SPIClass13interruptModeE>
    38e2:	81 30       	cpi	r24, 0x01	; 1
    38e4:	59 f4       	brne	.+22     	; 0x38fc <_ZN13RHHardwareSPI16beginTransactionEv+0x30>
        interruptSave = SPI_AVR_EIMSK;
    38e6:	8d b3       	in	r24, 0x1d	; 29
    38e8:	80 93 75 07 	sts	0x0775, r24	; 0x800775 <_ZN8SPIClass13interruptSaveE>
        SPI_AVR_EIMSK &= ~interruptMask;
    38ec:	9d b3       	in	r25, 0x1d	; 29
    38ee:	80 91 76 07 	lds	r24, 0x0776	; 0x800776 <_ZN8SPIClass13interruptMaskE>
    38f2:	80 95       	com	r24
    38f4:	89 23       	and	r24, r25
    38f6:	8d bb       	out	0x1d, r24	; 29
        SREG = sreg;
    38f8:	2f bf       	out	0x3f, r18	; 63
    38fa:	02 c0       	rjmp	.+4      	; 0x3900 <_ZN13RHHardwareSPI16beginTransactionEv+0x34>
      } else
      #endif
      {
        interruptSave = sreg;
    38fc:	20 93 75 07 	sts	0x0775, r18	; 0x800775 <_ZN8SPIClass13interruptSaveE>
      digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
    }
    inTransactionFlag = 1;
    #endif

    SPCR = settings.spcr;
    3900:	4c bd       	out	0x2c, r20	; 44
    SPSR = settings.spsr;
    3902:	3d bd       	out	0x2d, r19	; 45
    3904:	08 95       	ret

00003906 <_ZN13RHHardwareSPI5beginEv>:
    SPI.detachInterrupt();
#endif
}
    
void RHHardwareSPI::begin() 
{
    3906:	0f 93       	push	r16
    3908:	1f 93       	push	r17
    390a:	fc 01       	movw	r30, r24
#if defined(SPI_HAS_TRANSACTION)
    // Perhaps this is a uniform interface for SPI?
    // Currently Teensy and ESP32 only
   uint32_t frequency;
   if (_frequency == Frequency16MHz)
    390c:	82 81       	ldd	r24, Z+2	; 0x02
    390e:	84 30       	cpi	r24, 0x04	; 4
    3910:	59 f0       	breq	.+22     	; 0x3928 <_ZN13RHHardwareSPI5beginEv+0x22>
       frequency = 16000000;
   else if (_frequency == Frequency8MHz)
    3912:	83 30       	cpi	r24, 0x03	; 3
    3914:	71 f0       	breq	.+28     	; 0x3932 <_ZN13RHHardwareSPI5beginEv+0x2c>
       frequency = 8000000;
   else if (_frequency == Frequency4MHz)
    3916:	82 30       	cpi	r24, 0x02	; 2
    3918:	89 f0       	breq	.+34     	; 0x393c <_ZN13RHHardwareSPI5beginEv+0x36>
       frequency = 4000000;
   else if (_frequency == Frequency2MHz)
    391a:	81 30       	cpi	r24, 0x01	; 1
    391c:	a1 f0       	breq	.+40     	; 0x3946 <_ZN13RHHardwareSPI5beginEv+0x40>
       frequency = 2000000;
   else
       frequency = 1000000;
    391e:	40 e4       	ldi	r20, 0x40	; 64
    3920:	52 e4       	ldi	r21, 0x42	; 66
    3922:	6f e0       	ldi	r22, 0x0F	; 15
    3924:	70 e0       	ldi	r23, 0x00	; 0
    3926:	13 c0       	rjmp	.+38     	; 0x394e <_ZN13RHHardwareSPI5beginEv+0x48>
#if defined(SPI_HAS_TRANSACTION)
    // Perhaps this is a uniform interface for SPI?
    // Currently Teensy and ESP32 only
   uint32_t frequency;
   if (_frequency == Frequency16MHz)
       frequency = 16000000;
    3928:	40 e0       	ldi	r20, 0x00	; 0
    392a:	54 e2       	ldi	r21, 0x24	; 36
    392c:	64 ef       	ldi	r22, 0xF4	; 244
    392e:	70 e0       	ldi	r23, 0x00	; 0
    3930:	0e c0       	rjmp	.+28     	; 0x394e <_ZN13RHHardwareSPI5beginEv+0x48>
   else if (_frequency == Frequency8MHz)
       frequency = 8000000;
    3932:	40 e0       	ldi	r20, 0x00	; 0
    3934:	52 e1       	ldi	r21, 0x12	; 18
    3936:	6a e7       	ldi	r22, 0x7A	; 122
    3938:	70 e0       	ldi	r23, 0x00	; 0
    393a:	09 c0       	rjmp	.+18     	; 0x394e <_ZN13RHHardwareSPI5beginEv+0x48>
   else if (_frequency == Frequency4MHz)
       frequency = 4000000;
    393c:	40 e0       	ldi	r20, 0x00	; 0
    393e:	59 e0       	ldi	r21, 0x09	; 9
    3940:	6d e3       	ldi	r22, 0x3D	; 61
    3942:	70 e0       	ldi	r23, 0x00	; 0
    3944:	04 c0       	rjmp	.+8      	; 0x394e <_ZN13RHHardwareSPI5beginEv+0x48>
   else if (_frequency == Frequency2MHz)
       frequency = 2000000;
    3946:	40 e8       	ldi	r20, 0x80	; 128
    3948:	54 e8       	ldi	r21, 0x84	; 132
    394a:	6e e1       	ldi	r22, 0x1E	; 30
    394c:	70 e0       	ldi	r23, 0x00	; 0
       bitOrder = LSBFIRST;
   else
       bitOrder = MSBFIRST;
   
    uint8_t dataMode;
    if (_dataMode == DataMode0)
    394e:	84 81       	ldd	r24, Z+4	; 0x04
    3950:	88 23       	and	r24, r24
    3952:	61 f0       	breq	.+24     	; 0x396c <_ZN13RHHardwareSPI5beginEv+0x66>
	dataMode = SPI_MODE0;
    else if (_dataMode == DataMode1)
    3954:	81 30       	cpi	r24, 0x01	; 1
    3956:	31 f0       	breq	.+12     	; 0x3964 <_ZN13RHHardwareSPI5beginEv+0x5e>
	dataMode = SPI_MODE1;
    else if (_dataMode == DataMode2)
    3958:	82 30       	cpi	r24, 0x02	; 2
    395a:	31 f0       	breq	.+12     	; 0x3968 <_ZN13RHHardwareSPI5beginEv+0x62>
	dataMode = SPI_MODE2;
    else if (_dataMode == DataMode3)
    395c:	83 30       	cpi	r24, 0x03	; 3
    395e:	31 f4       	brne	.+12     	; 0x396c <_ZN13RHHardwareSPI5beginEv+0x66>
	dataMode = SPI_MODE3;
    3960:	9c e0       	ldi	r25, 0x0C	; 12
    3962:	05 c0       	rjmp	.+10     	; 0x396e <_ZN13RHHardwareSPI5beginEv+0x68>
   
    uint8_t dataMode;
    if (_dataMode == DataMode0)
	dataMode = SPI_MODE0;
    else if (_dataMode == DataMode1)
	dataMode = SPI_MODE1;
    3964:	94 e0       	ldi	r25, 0x04	; 4
    3966:	03 c0       	rjmp	.+6      	; 0x396e <_ZN13RHHardwareSPI5beginEv+0x68>
    else if (_dataMode == DataMode2)
	dataMode = SPI_MODE2;
    3968:	98 e0       	ldi	r25, 0x08	; 8
    396a:	01 c0       	rjmp	.+2      	; 0x396e <_ZN13RHHardwareSPI5beginEv+0x68>
    else if (_dataMode == DataMode3)
	dataMode = SPI_MODE3;
    else
	dataMode = SPI_MODE0;
    396c:	90 e0       	ldi	r25, 0x00	; 0
    396e:	00 e0       	ldi	r16, 0x00	; 0
    3970:	19 e0       	ldi	r17, 0x09	; 9
    3972:	2d e3       	ldi	r18, 0x3D	; 61
    3974:	30 e0       	ldi	r19, 0x00	; 0
    3976:	80 e0       	ldi	r24, 0x00	; 0
        clockDiv = 6;
      }
    } else {
      uint32_t clockSetting = F_CPU / 2;
      clockDiv = 0;
      while (clockDiv < 6 && clock < clockSetting) {
    3978:	40 17       	cp	r20, r16
    397a:	51 07       	cpc	r21, r17
    397c:	62 07       	cpc	r22, r18
    397e:	73 07       	cpc	r23, r19
    3980:	40 f4       	brcc	.+16     	; 0x3992 <_ZN13RHHardwareSPI5beginEv+0x8c>
        clockSetting /= 2;
    3982:	36 95       	lsr	r19
    3984:	27 95       	ror	r18
    3986:	17 95       	ror	r17
    3988:	07 95       	ror	r16
        clockDiv++;
    398a:	8f 5f       	subi	r24, 0xFF	; 255
        clockDiv = 6;
      }
    } else {
      uint32_t clockSetting = F_CPU / 2;
      clockDiv = 0;
      while (clockDiv < 6 && clock < clockSetting) {
    398c:	86 30       	cpi	r24, 0x06	; 6
    398e:	a1 f7       	brne	.-24     	; 0x3978 <_ZN13RHHardwareSPI5beginEv+0x72>
      }
    }

    // Compensate for the duplicate fosc/64
    if (clockDiv == 6)
    clockDiv = 7;
    3990:	87 e0       	ldi	r24, 0x07	; 7

    // Invert the SPI2X bit
    clockDiv ^= 0x1;
    3992:	21 e0       	ldi	r18, 0x01	; 1
    3994:	28 27       	eor	r18, r24

    // Pack into the SPISettings class
    spcr = _BV(SPE) | _BV(MSTR) | ((bitOrder == LSBFIRST) ? _BV(DORD) : 0) |
      (dataMode & SPI_MODE_MASK) | ((clockDiv >> 1) & SPI_CLOCK_MASK);
    3996:	83 81       	ldd	r24, Z+3	; 0x03
    3998:	81 30       	cpi	r24, 0x01	; 1
    399a:	11 f0       	breq	.+4      	; 0x39a0 <_ZN13RHHardwareSPI5beginEv+0x9a>
    399c:	80 e5       	ldi	r24, 0x50	; 80
    399e:	01 c0       	rjmp	.+2      	; 0x39a2 <_ZN13RHHardwareSPI5beginEv+0x9c>
    39a0:	80 e7       	ldi	r24, 0x70	; 112

    // Save the settings for use in transactions
   _settings = SPISettings(frequency, bitOrder, dataMode);
    39a2:	32 2f       	mov	r19, r18
    39a4:	36 95       	lsr	r19
    39a6:	93 2b       	or	r25, r19
    39a8:	98 2b       	or	r25, r24
    39aa:	95 83       	std	Z+5, r25	; 0x05
    39ac:	21 70       	andi	r18, 0x01	; 1
    39ae:	26 83       	std	Z+6, r18	; 0x06
#else
 #warning RHHardwareSPI does not support this platform yet. Consider adding it and contributing a patch.
#endif

#endif // SPI_HAS_TRANSACTION
}
    39b0:	1f 91       	pop	r17
    39b2:	0f 91       	pop	r16
    else
	dataMode = SPI_MODE0;

    // Save the settings for use in transactions
   _settings = SPISettings(frequency, bitOrder, dataMode);
   SPI.begin();
    39b4:	0c 94 7b 21 	jmp	0x42f6	; 0x42f6 <_ZN8SPIClass5beginEv>

000039b8 <_ZN13RHHardwareSPI3endEv>:
#endif // SPI_HAS_TRANSACTION
}

void RHHardwareSPI::end() 
{
    return SPI.end();
    39b8:	0c 94 b1 21 	jmp	0x4362	; 0x4362 <_ZN8SPIClass3endEv>

000039bc <_ZN13RHHardwareSPI14usingInterruptEh>:
    SPI.endTransaction();
#endif
}

void RHHardwareSPI::usingInterrupt(uint8_t interrupt)
{
    39bc:	86 2f       	mov	r24, r22
#if defined(SPI_HAS_TRANSACTION) && !defined(RH_MISSING_SPIUSINGINTERRUPT)
    SPI.usingInterrupt(interrupt);
    39be:	0c 94 c5 21 	jmp	0x438a	; 0x438a <_ZN8SPIClass14usingInterruptEh>

000039c2 <_ZN13RHHardwareSPI14endTransactionEv>:
      digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
    }
    inTransactionFlag = 0;
    #endif

    if (interruptMode > 0) {
    39c2:	80 91 77 07 	lds	r24, 0x0777	; 0x800777 <_ZN8SPIClass13interruptModeE>
    39c6:	88 23       	and	r24, r24
    39c8:	61 f0       	breq	.+24     	; 0x39e2 <_ZN13RHHardwareSPI14endTransactionEv+0x20>
      #ifdef SPI_AVR_EIMSK
      uint8_t sreg = SREG;
    39ca:	9f b7       	in	r25, 0x3f	; 63
      #endif
      noInterrupts();
    39cc:	f8 94       	cli
      #ifdef SPI_AVR_EIMSK
      if (interruptMode == 1) {
    39ce:	20 91 77 07 	lds	r18, 0x0777	; 0x800777 <_ZN8SPIClass13interruptModeE>
    39d2:	80 91 75 07 	lds	r24, 0x0775	; 0x800775 <_ZN8SPIClass13interruptSaveE>
    39d6:	21 30       	cpi	r18, 0x01	; 1
    39d8:	19 f4       	brne	.+6      	; 0x39e0 <_ZN13RHHardwareSPI14endTransactionEv+0x1e>
        SPI_AVR_EIMSK = interruptSave;
    39da:	8d bb       	out	0x1d, r24	; 29
        SREG = sreg;
    39dc:	9f bf       	out	0x3f, r25	; 63
    39de:	08 95       	ret
      } else
      #endif
      {
        SREG = interruptSave;
    39e0:	8f bf       	out	0x3f, r24	; 63
    39e2:	08 95       	ret

000039e4 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>:
 #define SPI_CLOCK_DIV4  (VARIANT_MCK/21000000) // 4MHz
 #define SPI_CLOCK_DIV2  (VARIANT_MCK/10500000) // 8MHz
 #define SPI_CLOCK_DIV1  (VARIANT_MCK/5250000)  // 16MHz
#endif

RHHardwareSPI::RHHardwareSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
    39e4:	cf 93       	push	r28
    39e6:	df 93       	push	r29
    39e8:	ec 01       	movw	r28, r24
    :
    RHGenericSPI(frequency, bitOrder, dataMode)
    39ea:	0e 94 9f 22 	call	0x453e	; 0x453e <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>
    39ee:	8c e4       	ldi	r24, 0x4C	; 76
    39f0:	92 e0       	ldi	r25, 0x02	; 2
    39f2:	99 83       	std	Y+1, r25	; 0x01
    39f4:	88 83       	st	Y, r24
    // Invert the SPI2X bit
    clockDiv ^= 0x1;

    // Pack into the SPISettings class
    spcr = _BV(SPE) | _BV(MSTR) | ((bitOrder == LSBFIRST) ? _BV(DORD) : 0) |
      (dataMode & SPI_MODE_MASK) | ((clockDiv >> 1) & SPI_CLOCK_MASK);
    39f6:	80 e5       	ldi	r24, 0x50	; 80
    39f8:	8d 83       	std	Y+5, r24	; 0x05
    spsr = clockDiv & SPI_2XCLOCK_MASK;
    39fa:	81 e0       	ldi	r24, 0x01	; 1
    39fc:	8e 83       	std	Y+6, r24	; 0x06
{
}
    39fe:	df 91       	pop	r29
    3a00:	cf 91       	pop	r28
    3a02:	08 95       	ret

00003a04 <_GLOBAL__sub_I_hardware_spi>:
#include <RHHardwareSPI.h>

#ifdef RH_HAVE_HARDWARE_SPI

// Declare a single default instance of the hardware SPI interface class
RHHardwareSPI hardware_spi;
    3a04:	20 e0       	ldi	r18, 0x00	; 0
    3a06:	40 e0       	ldi	r20, 0x00	; 0
    3a08:	60 e0       	ldi	r22, 0x00	; 0
    3a0a:	87 e6       	ldi	r24, 0x67	; 103
    3a0c:	97 e0       	ldi	r25, 0x07	; 7
    3a0e:	0c 94 f2 1c 	jmp	0x39e4	; 0x39e4 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>

00003a12 <_ZN7RH_RF9514modeWillChangeEN15RHGenericDriver6RHModeE>:
	cr = RH_RF95_CODING_RATE_4_7;
    else if (denominator >= 8)
	cr = RH_RF95_CODING_RATE_4_8;
 
    // CR is bits 3..1 of RH_RF95_REG_1D_MODEM_CONFIG1
    spiWrite(RH_RF95_REG_1D_MODEM_CONFIG1, (spiRead(RH_RF95_REG_1D_MODEM_CONFIG1) & ~RH_RF95_CODING_RATE) | cr);
    3a12:	81 e0       	ldi	r24, 0x01	; 1
    3a14:	08 95       	ret

00003a16 <_ZN7RH_RF9516maxMessageLengthEv>:
    3a16:	8b ef       	ldi	r24, 0xFB	; 251
    3a18:	08 95       	ret

00003a1a <_ZN7RH_RF95D1Ev>:
    3a1a:	08 95       	ret

00003a1c <_ZN7RH_RF9515isChannelActiveEv>:
    3a1c:	cf 93       	push	r28
    3a1e:	df 93       	push	r29
    3a20:	ec 01       	movw	r28, r24
    3a22:	8a 81       	ldd	r24, Y+2	; 0x02
    3a24:	85 30       	cpi	r24, 0x05	; 5
    3a26:	b1 f0       	breq	.+44     	; 0x3a54 <_ZN7RH_RF9515isChannelActiveEv+0x38>
    3a28:	e8 81       	ld	r30, Y
    3a2a:	f9 81       	ldd	r31, Y+1	; 0x01
    3a2c:	e0 5c       	subi	r30, 0xC0	; 192
    3a2e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a30:	01 90       	ld	r0, Z+
    3a32:	f0 81       	ld	r31, Z
    3a34:	e0 2d       	mov	r30, r0
    3a36:	65 e0       	ldi	r22, 0x05	; 5
    3a38:	ce 01       	movw	r24, r28
    3a3a:	09 95       	icall
    3a3c:	47 e0       	ldi	r20, 0x07	; 7
    3a3e:	61 e0       	ldi	r22, 0x01	; 1
    3a40:	ce 01       	movw	r24, r28
    3a42:	0e 94 31 23 	call	0x4662	; 0x4662 <_ZN11RHSPIDriver8spiWriteEhh>
    3a46:	40 e8       	ldi	r20, 0x80	; 128
    3a48:	60 e4       	ldi	r22, 0x40	; 64
    3a4a:	ce 01       	movw	r24, r28
    3a4c:	0e 94 31 23 	call	0x4662	; 0x4662 <_ZN11RHSPIDriver8spiWriteEhh>
    3a50:	85 e0       	ldi	r24, 0x05	; 5
    3a52:	8a 83       	std	Y+2, r24	; 0x02
    3a54:	8a 81       	ldd	r24, Y+2	; 0x02
    3a56:	85 30       	cpi	r24, 0x05	; 5
    3a58:	19 f4       	brne	.+6      	; 0x3a60 <_ZN7RH_RF9515isChannelActiveEv+0x44>
    3a5a:	0e 94 e3 21 	call	0x43c6	; 0x43c6 <yield>
    3a5e:	fa cf       	rjmp	.-12     	; 0x3a54 <_ZN7RH_RF9515isChannelActiveEv+0x38>
    3a60:	8d 89       	ldd	r24, Y+21	; 0x15
    3a62:	df 91       	pop	r29
    3a64:	cf 91       	pop	r28
    3a66:	08 95       	ret

00003a68 <_ZN7RH_RF95D0Ev>:
    3a68:	0c 94 e4 21 	jmp	0x43c8	; 0x43c8 <_ZdlPv>

00003a6c <_ZN7RH_RF9510setTxPowerEab.part.8.constprop.10>:
    3a6c:	0f 93       	push	r16
    3a6e:	1f 93       	push	r17
    3a70:	cf 93       	push	r28
    3a72:	8c 01       	movw	r16, r24
    3a74:	c6 2f       	mov	r28, r22
    3a76:	65 31       	cpi	r22, 0x15	; 21
    3a78:	2c f4       	brge	.+10     	; 0x3a84 <_ZN7RH_RF9510setTxPowerEab.part.8.constprop.10+0x18>
    3a7a:	62 30       	cpi	r22, 0x02	; 2
    3a7c:	5c f0       	brlt	.+22     	; 0x3a94 <_ZN7RH_RF9510setTxPowerEab.part.8.constprop.10+0x28>
    3a7e:	62 31       	cpi	r22, 0x12	; 18
    3a80:	54 f0       	brlt	.+20     	; 0x3a96 <_ZN7RH_RF9510setTxPowerEab.part.8.constprop.10+0x2a>
    3a82:	01 c0       	rjmp	.+2      	; 0x3a86 <_ZN7RH_RF9510setTxPowerEab.part.8.constprop.10+0x1a>
    3a84:	c4 e1       	ldi	r28, 0x14	; 20
    3a86:	47 e0       	ldi	r20, 0x07	; 7
    3a88:	6d e4       	ldi	r22, 0x4D	; 77
    3a8a:	c8 01       	movw	r24, r16
    3a8c:	0e 94 31 23 	call	0x4662	; 0x4662 <_ZN11RHSPIDriver8spiWriteEhh>
    3a90:	c3 50       	subi	r28, 0x03	; 3
    3a92:	06 c0       	rjmp	.+12     	; 0x3aa0 <_ZN7RH_RF9510setTxPowerEab.part.8.constprop.10+0x34>
    3a94:	c2 e0       	ldi	r28, 0x02	; 2
    3a96:	44 e0       	ldi	r20, 0x04	; 4
    3a98:	6d e4       	ldi	r22, 0x4D	; 77
    3a9a:	c8 01       	movw	r24, r16
    3a9c:	0e 94 31 23 	call	0x4662	; 0x4662 <_ZN11RHSPIDriver8spiWriteEhh>
    3aa0:	4e ef       	ldi	r20, 0xFE	; 254
    3aa2:	4c 0f       	add	r20, r28
    3aa4:	40 68       	ori	r20, 0x80	; 128
    3aa6:	69 e0       	ldi	r22, 0x09	; 9
    3aa8:	c8 01       	movw	r24, r16
    3aaa:	cf 91       	pop	r28
    3aac:	1f 91       	pop	r17
    3aae:	0f 91       	pop	r16
    3ab0:	0c 94 31 23 	jmp	0x4662	; 0x4662 <_ZN11RHSPIDriver8spiWriteEhh>

00003ab4 <_ZN7RH_RF955sleepEv>:
    3ab4:	cf 93       	push	r28
    3ab6:	df 93       	push	r29
    3ab8:	fc 01       	movw	r30, r24
    3aba:	22 81       	ldd	r18, Z+2	; 0x02
    3abc:	21 30       	cpi	r18, 0x01	; 1
    3abe:	91 f0       	breq	.+36     	; 0x3ae4 <_ZN7RH_RF955sleepEv+0x30>
    3ac0:	ec 01       	movw	r28, r24
    3ac2:	01 90       	ld	r0, Z+
    3ac4:	f0 81       	ld	r31, Z
    3ac6:	e0 2d       	mov	r30, r0
    3ac8:	e0 5c       	subi	r30, 0xC0	; 192
    3aca:	ff 4f       	sbci	r31, 0xFF	; 255
    3acc:	01 90       	ld	r0, Z+
    3ace:	f0 81       	ld	r31, Z
    3ad0:	e0 2d       	mov	r30, r0
    3ad2:	61 e0       	ldi	r22, 0x01	; 1
    3ad4:	09 95       	icall
    3ad6:	40 e0       	ldi	r20, 0x00	; 0
    3ad8:	61 e0       	ldi	r22, 0x01	; 1
    3ada:	ce 01       	movw	r24, r28
    3adc:	0e 94 31 23 	call	0x4662	; 0x4662 <_ZN11RHSPIDriver8spiWriteEhh>
    3ae0:	81 e0       	ldi	r24, 0x01	; 1
    3ae2:	8a 83       	std	Y+2, r24	; 0x02
    3ae4:	81 e0       	ldi	r24, 0x01	; 1
    3ae6:	df 91       	pop	r29
    3ae8:	cf 91       	pop	r28
    3aea:	08 95       	ret

00003aec <_ZN7RH_RF95C1EhhR12RHGenericSPI>:
    3aec:	1f 93       	push	r17
    3aee:	cf 93       	push	r28
    3af0:	df 93       	push	r29
    3af2:	ec 01       	movw	r28, r24
    3af4:	14 2f       	mov	r17, r20
    3af6:	a9 01       	movw	r20, r18
    3af8:	0e 94 d5 22 	call	0x45aa	; 0x45aa <_ZN11RHSPIDriverC1EhR12RHGenericSPI>
    3afc:	86 e6       	ldi	r24, 0x66	; 102
    3afe:	92 e0       	ldi	r25, 0x02	; 2
    3b00:	99 83       	std	Y+1, r25	; 0x01
    3b02:	88 83       	st	Y, r24
    3b04:	fe 01       	movw	r30, r28
    3b06:	e2 5e       	subi	r30, 0xE2	; 226
    3b08:	fe 4f       	sbci	r31, 0xFE	; 254
    3b0a:	10 82       	st	Z, r1
    3b0c:	34 96       	adiw	r30, 0x04	; 4
    3b0e:	10 82       	st	Z, r1
    3b10:	1c 8f       	std	Y+28, r17	; 0x1c
    3b12:	8f ef       	ldi	r24, 0xFF	; 255
    3b14:	8d 8f       	std	Y+29, r24	; 0x1d
    3b16:	31 97       	sbiw	r30, 0x01	; 1
    3b18:	81 e0       	ldi	r24, 0x01	; 1
    3b1a:	80 83       	st	Z, r24
    3b1c:	1b 8e       	std	Y+27, r1	; 0x1b
    3b1e:	df 91       	pop	r29
    3b20:	cf 91       	pop	r28
    3b22:	1f 91       	pop	r17
    3b24:	08 95       	ret

00003b26 <_ZN7RH_RF9513validateRxBufEv>:
    3b26:	fc 01       	movw	r30, r24
    3b28:	86 8d       	ldd	r24, Z+30	; 0x1e
    3b2a:	84 30       	cpi	r24, 0x04	; 4
    3b2c:	d8 f0       	brcs	.+54     	; 0x3b64 <_ZN7RH_RF9513validateRxBufEv+0x3e>
    3b2e:	87 8d       	ldd	r24, Z+31	; 0x1f
    3b30:	85 83       	std	Z+5, r24	; 0x05
    3b32:	80 a1       	ldd	r24, Z+32	; 0x20
    3b34:	86 83       	std	Z+6, r24	; 0x06
    3b36:	81 a1       	ldd	r24, Z+33	; 0x21
    3b38:	87 83       	std	Z+7, r24	; 0x07
    3b3a:	82 a1       	ldd	r24, Z+34	; 0x22
    3b3c:	80 87       	std	Z+8, r24	; 0x08
    3b3e:	84 81       	ldd	r24, Z+4	; 0x04
    3b40:	81 11       	cpse	r24, r1
    3b42:	07 c0       	rjmp	.+14     	; 0x3b52 <_ZN7RH_RF9513validateRxBufEv+0x2c>
    3b44:	95 81       	ldd	r25, Z+5	; 0x05
    3b46:	83 81       	ldd	r24, Z+3	; 0x03
    3b48:	98 17       	cp	r25, r24
    3b4a:	19 f0       	breq	.+6      	; 0x3b52 <_ZN7RH_RF9513validateRxBufEv+0x2c>
    3b4c:	85 81       	ldd	r24, Z+5	; 0x05
    3b4e:	8f 3f       	cpi	r24, 0xFF	; 255
    3b50:	49 f4       	brne	.+18     	; 0x3b64 <_ZN7RH_RF9513validateRxBufEv+0x3e>
    3b52:	81 89       	ldd	r24, Z+17	; 0x11
    3b54:	92 89       	ldd	r25, Z+18	; 0x12
    3b56:	01 96       	adiw	r24, 0x01	; 1
    3b58:	92 8b       	std	Z+18, r25	; 0x12
    3b5a:	81 8b       	std	Z+17, r24	; 0x11
    3b5c:	e2 5e       	subi	r30, 0xE2	; 226
    3b5e:	fe 4f       	sbci	r31, 0xFE	; 254
    3b60:	81 e0       	ldi	r24, 0x01	; 1
    3b62:	80 83       	st	Z, r24
    3b64:	08 95       	ret

00003b66 <_ZN7RH_RF9510clearRxBufEv>:
    3b66:	2f b7       	in	r18, 0x3f	; 63
    3b68:	f8 94       	cli
    3b6a:	fc 01       	movw	r30, r24
    3b6c:	e2 5e       	subi	r30, 0xE2	; 226
    3b6e:	fe 4f       	sbci	r31, 0xFE	; 254
    3b70:	10 82       	st	Z, r1
    3b72:	fc 01       	movw	r30, r24
    3b74:	16 8e       	std	Z+30, r1	; 0x1e
    3b76:	2f bf       	out	0x3f, r18	; 63
    3b78:	08 95       	ret

00003b7a <_ZN7RH_RF954recvEPhS0_>:
    3b7a:	cf 92       	push	r12
    3b7c:	df 92       	push	r13
    3b7e:	ef 92       	push	r14
    3b80:	ff 92       	push	r15
    3b82:	0f 93       	push	r16
    3b84:	1f 93       	push	r17
    3b86:	cf 93       	push	r28
    3b88:	df 93       	push	r29
    3b8a:	ec 01       	movw	r28, r24
    3b8c:	7b 01       	movw	r14, r22
    3b8e:	8a 01       	movw	r16, r20
    3b90:	e8 81       	ld	r30, Y
    3b92:	f9 81       	ldd	r31, Y+1	; 0x01
    3b94:	06 80       	ldd	r0, Z+6	; 0x06
    3b96:	f7 81       	ldd	r31, Z+7	; 0x07
    3b98:	e0 2d       	mov	r30, r0
    3b9a:	09 95       	icall
    3b9c:	d8 2e       	mov	r13, r24
    3b9e:	88 23       	and	r24, r24
    3ba0:	09 f1       	breq	.+66     	; 0x3be4 <_ZN7RH_RF954recvEPhS0_+0x6a>
    3ba2:	e1 14       	cp	r14, r1
    3ba4:	f1 04       	cpc	r15, r1
    3ba6:	d9 f0       	breq	.+54     	; 0x3bde <_ZN7RH_RF954recvEPhS0_+0x64>
    3ba8:	01 15       	cp	r16, r1
    3baa:	11 05       	cpc	r17, r1
    3bac:	c1 f0       	breq	.+48     	; 0x3bde <_ZN7RH_RF954recvEPhS0_+0x64>
    3bae:	cf b6       	in	r12, 0x3f	; 63
    3bb0:	f8 94       	cli
    3bb2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3bb4:	90 e0       	ldi	r25, 0x00	; 0
    3bb6:	03 97       	sbiw	r24, 0x03	; 3
    3bb8:	f8 01       	movw	r30, r16
    3bba:	20 81       	ld	r18, Z
    3bbc:	30 e0       	ldi	r19, 0x00	; 0
    3bbe:	28 17       	cp	r18, r24
    3bc0:	39 07       	cpc	r19, r25
    3bc2:	1c f0       	brlt	.+6      	; 0x3bca <_ZN7RH_RF954recvEPhS0_+0x50>
    3bc4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3bc6:	84 50       	subi	r24, 0x04	; 4
    3bc8:	80 83       	st	Z, r24
    3bca:	f8 01       	movw	r30, r16
    3bcc:	40 81       	ld	r20, Z
    3bce:	50 e0       	ldi	r21, 0x00	; 0
    3bd0:	be 01       	movw	r22, r28
    3bd2:	6d 5d       	subi	r22, 0xDD	; 221
    3bd4:	7f 4f       	sbci	r23, 0xFF	; 255
    3bd6:	c7 01       	movw	r24, r14
    3bd8:	0e 94 99 26 	call	0x4d32	; 0x4d32 <memcpy>
    3bdc:	cf be       	out	0x3f, r12	; 63
    3bde:	ce 01       	movw	r24, r28
    3be0:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <_ZN7RH_RF9510clearRxBufEv>
    3be4:	8d 2d       	mov	r24, r13
    3be6:	df 91       	pop	r29
    3be8:	cf 91       	pop	r28
    3bea:	1f 91       	pop	r17
    3bec:	0f 91       	pop	r16
    3bee:	ff 90       	pop	r15
    3bf0:	ef 90       	pop	r14
    3bf2:	df 90       	pop	r13
    3bf4:	cf 90       	pop	r12
    3bf6:	08 95       	ret

00003bf8 <_ZN7RH_RF9512setFrequencyEf>:
    3bf8:	8f 92       	push	r8
    3bfa:	9f 92       	push	r9
    3bfc:	af 92       	push	r10
    3bfe:	bf 92       	push	r11
    3c00:	cf 92       	push	r12
    3c02:	df 92       	push	r13
    3c04:	ef 92       	push	r14
    3c06:	ff 92       	push	r15
    3c08:	1f 93       	push	r17
    3c0a:	cf 93       	push	r28
    3c0c:	df 93       	push	r29
    3c0e:	ec 01       	movw	r28, r24
    3c10:	4a 01       	movw	r8, r20
    3c12:	5b 01       	movw	r10, r22
    3c14:	20 e0       	ldi	r18, 0x00	; 0
    3c16:	34 e2       	ldi	r19, 0x24	; 36
    3c18:	44 e7       	ldi	r20, 0x74	; 116
    3c1a:	59 e4       	ldi	r21, 0x49	; 73
    3c1c:	c5 01       	movw	r24, r10
    3c1e:	b4 01       	movw	r22, r8
    3c20:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <__mulsf3>
    3c24:	20 e0       	ldi	r18, 0x00	; 0
    3c26:	34 e2       	ldi	r19, 0x24	; 36
    3c28:	44 e7       	ldi	r20, 0x74	; 116
    3c2a:	52 e4       	ldi	r21, 0x42	; 66
    3c2c:	0e 94 74 10 	call	0x20e8	; 0x20e8 <__divsf3>
    3c30:	0e 94 ed 10 	call	0x21da	; 0x21da <__fixunssfsi>
    3c34:	6b 01       	movw	r12, r22
    3c36:	7c 01       	movw	r14, r24
    3c38:	a7 01       	movw	r20, r14
    3c3a:	66 27       	eor	r22, r22
    3c3c:	77 27       	eor	r23, r23
    3c3e:	66 e0       	ldi	r22, 0x06	; 6
    3c40:	ce 01       	movw	r24, r28
    3c42:	0e 94 31 23 	call	0x4662	; 0x4662 <_ZN11RHSPIDriver8spiWriteEhh>
    3c46:	77 27       	eor	r23, r23
    3c48:	6f 2d       	mov	r22, r15
    3c4a:	5e 2d       	mov	r21, r14
    3c4c:	4d 2d       	mov	r20, r13
    3c4e:	67 e0       	ldi	r22, 0x07	; 7
    3c50:	ce 01       	movw	r24, r28
    3c52:	0e 94 31 23 	call	0x4662	; 0x4662 <_ZN11RHSPIDriver8spiWriteEhh>
    3c56:	4c 2d       	mov	r20, r12
    3c58:	68 e0       	ldi	r22, 0x08	; 8
    3c5a:	ce 01       	movw	r24, r28
    3c5c:	0e 94 31 23 	call	0x4662	; 0x4662 <_ZN11RHSPIDriver8spiWriteEhh>
    3c60:	c1 5e       	subi	r28, 0xE1	; 225
    3c62:	de 4f       	sbci	r29, 0xFE	; 254
    3c64:	11 e0       	ldi	r17, 0x01	; 1
    3c66:	20 e0       	ldi	r18, 0x00	; 0
    3c68:	30 ec       	ldi	r19, 0xC0	; 192
    3c6a:	42 e4       	ldi	r20, 0x42	; 66
    3c6c:	54 e4       	ldi	r21, 0x44	; 68
    3c6e:	c5 01       	movw	r24, r10
    3c70:	b4 01       	movw	r22, r8
    3c72:	0e 94 ce 11 	call	0x239c	; 0x239c <__gesf2>
    3c76:	87 fd       	sbrc	r24, 7
    3c78:	10 e0       	ldi	r17, 0x00	; 0
    3c7a:	18 83       	st	Y, r17
    3c7c:	81 e0       	ldi	r24, 0x01	; 1
    3c7e:	df 91       	pop	r29
    3c80:	cf 91       	pop	r28
    3c82:	1f 91       	pop	r17
    3c84:	ff 90       	pop	r15
    3c86:	ef 90       	pop	r14
    3c88:	df 90       	pop	r13
    3c8a:	cf 90       	pop	r12
    3c8c:	bf 90       	pop	r11
    3c8e:	af 90       	pop	r10
    3c90:	9f 90       	pop	r9
    3c92:	8f 90       	pop	r8
    3c94:	08 95       	ret

00003c96 <_ZN7RH_RF9511setModeIdleEv>:
    3c96:	cf 93       	push	r28
    3c98:	df 93       	push	r29
    3c9a:	fc 01       	movw	r30, r24
    3c9c:	22 81       	ldd	r18, Z+2	; 0x02
    3c9e:	22 30       	cpi	r18, 0x02	; 2
    3ca0:	91 f0       	breq	.+36     	; 0x3cc6 <_ZN7RH_RF9511setModeIdleEv+0x30>
    3ca2:	ec 01       	movw	r28, r24
    3ca4:	01 90       	ld	r0, Z+
    3ca6:	f0 81       	ld	r31, Z
    3ca8:	e0 2d       	mov	r30, r0
    3caa:	e0 5c       	subi	r30, 0xC0	; 192
    3cac:	ff 4f       	sbci	r31, 0xFF	; 255
    3cae:	01 90       	ld	r0, Z+
    3cb0:	f0 81       	ld	r31, Z
    3cb2:	e0 2d       	mov	r30, r0
    3cb4:	62 e0       	ldi	r22, 0x02	; 2
    3cb6:	09 95       	icall
    3cb8:	41 e0       	ldi	r20, 0x01	; 1
    3cba:	61 e0       	ldi	r22, 0x01	; 1
    3cbc:	ce 01       	movw	r24, r28
    3cbe:	0e 94 31 23 	call	0x4662	; 0x4662 <_ZN11RHSPIDriver8spiWriteEhh>
    3cc2:	82 e0       	ldi	r24, 0x02	; 2
    3cc4:	8a 83       	std	Y+2, r24	; 0x02
    3cc6:	df 91       	pop	r29
    3cc8:	cf 91       	pop	r28
    3cca:	08 95       	ret

00003ccc <_ZN7RH_RF9515handleInterruptEv>:
    3ccc:	0f 93       	push	r16
    3cce:	1f 93       	push	r17
    3cd0:	cf 93       	push	r28
    3cd2:	df 93       	push	r29
    3cd4:	ec 01       	movw	r28, r24
    3cd6:	62 e1       	ldi	r22, 0x12	; 18
    3cd8:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <_ZN11RHSPIDriver7spiReadEh>
    3cdc:	18 2f       	mov	r17, r24
    3cde:	6c e1       	ldi	r22, 0x1C	; 28
    3ce0:	ce 01       	movw	r24, r28
    3ce2:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <_ZN11RHSPIDriver7spiReadEh>
    3ce6:	08 2f       	mov	r16, r24
    3ce8:	4f ef       	ldi	r20, 0xFF	; 255
    3cea:	62 e1       	ldi	r22, 0x12	; 18
    3cec:	ce 01       	movw	r24, r28
    3cee:	0e 94 31 23 	call	0x4662	; 0x4662 <_ZN11RHSPIDriver8spiWriteEhh>
    3cf2:	8a 81       	ldd	r24, Y+2	; 0x02
    3cf4:	84 30       	cpi	r24, 0x04	; 4
    3cf6:	b9 f4       	brne	.+46     	; 0x3d26 <_ZN7RH_RF9515handleInterruptEv+0x5a>
    3cf8:	81 2f       	mov	r24, r17
    3cfa:	80 7a       	andi	r24, 0xA0	; 160
    3cfc:	41 f4       	brne	.+16     	; 0x3d0e <_ZN7RH_RF9515handleInterruptEv+0x42>
    3cfe:	fe 01       	movw	r30, r28
    3d00:	ef 5d       	subi	r30, 0xDF	; 223
    3d02:	fe 4f       	sbci	r31, 0xFE	; 254
    3d04:	80 81       	ld	r24, Z
    3d06:	88 23       	and	r24, r24
    3d08:	71 f0       	breq	.+28     	; 0x3d26 <_ZN7RH_RF9515handleInterruptEv+0x5a>
    3d0a:	06 fd       	sbrc	r16, 6
    3d0c:	0c c0       	rjmp	.+24     	; 0x3d26 <_ZN7RH_RF9515handleInterruptEv+0x5a>
    3d0e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3d10:	98 89       	ldd	r25, Y+16	; 0x10
    3d12:	01 96       	adiw	r24, 0x01	; 1
    3d14:	98 8b       	std	Y+16, r25	; 0x10
    3d16:	8f 87       	std	Y+15, r24	; 0x0f
    3d18:	ce 01       	movw	r24, r28
    3d1a:	df 91       	pop	r29
    3d1c:	cf 91       	pop	r28
    3d1e:	1f 91       	pop	r17
    3d20:	0f 91       	pop	r16
    3d22:	0c 94 b3 1d 	jmp	0x3b66	; 0x3b66 <_ZN7RH_RF9510clearRxBufEv>
    3d26:	8a 81       	ldd	r24, Y+2	; 0x02
    3d28:	84 30       	cpi	r24, 0x04	; 4
    3d2a:	11 f4       	brne	.+4      	; 0x3d30 <_ZN7RH_RF9515handleInterruptEv+0x64>
    3d2c:	16 fd       	sbrc	r17, 6
    3d2e:	0c c0       	rjmp	.+24     	; 0x3d48 <_ZN7RH_RF9515handleInterruptEv+0x7c>
    3d30:	8a 81       	ldd	r24, Y+2	; 0x02
    3d32:	83 30       	cpi	r24, 0x03	; 3
    3d34:	09 f0       	breq	.+2      	; 0x3d38 <_ZN7RH_RF9515handleInterruptEv+0x6c>
    3d36:	68 c0       	rjmp	.+208    	; 0x3e08 <_ZN7RH_RF9515handleInterruptEv+0x13c>
    3d38:	13 ff       	sbrs	r17, 3
    3d3a:	66 c0       	rjmp	.+204    	; 0x3e08 <_ZN7RH_RF9515handleInterruptEv+0x13c>
    3d3c:	8b 89       	ldd	r24, Y+19	; 0x13
    3d3e:	9c 89       	ldd	r25, Y+20	; 0x14
    3d40:	01 96       	adiw	r24, 0x01	; 1
    3d42:	9c 8b       	std	Y+20, r25	; 0x14
    3d44:	8b 8b       	std	Y+19, r24	; 0x13
    3d46:	67 c0       	rjmp	.+206    	; 0x3e16 <_ZN7RH_RF9515handleInterruptEv+0x14a>
    3d48:	63 e1       	ldi	r22, 0x13	; 19
    3d4a:	ce 01       	movw	r24, r28
    3d4c:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <_ZN11RHSPIDriver7spiReadEh>
    3d50:	18 2f       	mov	r17, r24
    3d52:	60 e1       	ldi	r22, 0x10	; 16
    3d54:	ce 01       	movw	r24, r28
    3d56:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <_ZN11RHSPIDriver7spiReadEh>
    3d5a:	48 2f       	mov	r20, r24
    3d5c:	6d e0       	ldi	r22, 0x0D	; 13
    3d5e:	ce 01       	movw	r24, r28
    3d60:	0e 94 31 23 	call	0x4662	; 0x4662 <_ZN11RHSPIDriver8spiWriteEhh>
    3d64:	21 2f       	mov	r18, r17
    3d66:	ae 01       	movw	r20, r28
    3d68:	41 5e       	subi	r20, 0xE1	; 225
    3d6a:	5f 4f       	sbci	r21, 0xFF	; 255
    3d6c:	60 e0       	ldi	r22, 0x00	; 0
    3d6e:	ce 01       	movw	r24, r28
    3d70:	0e 94 79 23 	call	0x46f2	; 0x46f2 <_ZN11RHSPIDriver12spiBurstReadEhPhh>
    3d74:	1e 8f       	std	Y+30, r17	; 0x1e
    3d76:	69 e1       	ldi	r22, 0x19	; 25
    3d78:	ce 01       	movw	r24, r28
    3d7a:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <_ZN11RHSPIDriver7spiReadEh>
    3d7e:	8e 01       	movw	r16, r28
    3d80:	00 5e       	subi	r16, 0xE0	; 224
    3d82:	1e 4f       	sbci	r17, 0xFE	; 254
    3d84:	87 fd       	sbrc	r24, 7
    3d86:	8d 5f       	subi	r24, 0xFD	; 253
    3d88:	85 95       	asr	r24
    3d8a:	85 95       	asr	r24
    3d8c:	f8 01       	movw	r30, r16
    3d8e:	80 83       	st	Z, r24
    3d90:	6a e1       	ldi	r22, 0x1A	; 26
    3d92:	ce 01       	movw	r24, r28
    3d94:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <_ZN11RHSPIDriver7spiReadEh>
    3d98:	90 e0       	ldi	r25, 0x00	; 0
    3d9a:	9e 87       	std	Y+14, r25	; 0x0e
    3d9c:	8d 87       	std	Y+13, r24	; 0x0d
    3d9e:	f8 01       	movw	r30, r16
    3da0:	20 81       	ld	r18, Z
    3da2:	27 ff       	sbrs	r18, 7
    3da4:	09 c0       	rjmp	.+18     	; 0x3db8 <_ZN7RH_RF9515handleInterruptEv+0xec>
    3da6:	8d 85       	ldd	r24, Y+13	; 0x0d
    3da8:	9e 85       	ldd	r25, Y+14	; 0x0e
    3daa:	82 0f       	add	r24, r18
    3dac:	91 1d       	adc	r25, r1
    3dae:	27 fd       	sbrc	r18, 7
    3db0:	9a 95       	dec	r25
    3db2:	9e 87       	std	Y+14, r25	; 0x0e
    3db4:	8d 87       	std	Y+13, r24	; 0x0d
    3db6:	0d c0       	rjmp	.+26     	; 0x3dd2 <_ZN7RH_RF9515handleInterruptEv+0x106>
    3db8:	8d 85       	ldd	r24, Y+13	; 0x0d
    3dba:	9e 85       	ldd	r25, Y+14	; 0x0e
    3dbc:	24 e0       	ldi	r18, 0x04	; 4
    3dbe:	88 0f       	add	r24, r24
    3dc0:	99 1f       	adc	r25, r25
    3dc2:	2a 95       	dec	r18
    3dc4:	e1 f7       	brne	.-8      	; 0x3dbe <_ZN7RH_RF9515handleInterruptEv+0xf2>
    3dc6:	6f e0       	ldi	r22, 0x0F	; 15
    3dc8:	70 e0       	ldi	r23, 0x00	; 0
    3dca:	0e 94 53 24 	call	0x48a6	; 0x48a6 <__divmodhi4>
    3dce:	7e 87       	std	Y+14, r23	; 0x0e
    3dd0:	6d 87       	std	Y+13, r22	; 0x0d
    3dd2:	fe 01       	movw	r30, r28
    3dd4:	e1 5e       	subi	r30, 0xE1	; 225
    3dd6:	fe 4f       	sbci	r31, 0xFE	; 254
    3dd8:	80 81       	ld	r24, Z
    3dda:	88 23       	and	r24, r24
    3ddc:	29 f0       	breq	.+10     	; 0x3de8 <_ZN7RH_RF9515handleInterruptEv+0x11c>
    3dde:	8d 85       	ldd	r24, Y+13	; 0x0d
    3de0:	9e 85       	ldd	r25, Y+14	; 0x0e
    3de2:	8d 59       	subi	r24, 0x9D	; 157
    3de4:	91 09       	sbc	r25, r1
    3de6:	04 c0       	rjmp	.+8      	; 0x3df0 <_ZN7RH_RF9515handleInterruptEv+0x124>
    3de8:	8d 85       	ldd	r24, Y+13	; 0x0d
    3dea:	9e 85       	ldd	r25, Y+14	; 0x0e
    3dec:	84 5a       	subi	r24, 0xA4	; 164
    3dee:	91 09       	sbc	r25, r1
    3df0:	9e 87       	std	Y+14, r25	; 0x0e
    3df2:	8d 87       	std	Y+13, r24	; 0x0d
    3df4:	ce 01       	movw	r24, r28
    3df6:	0e 94 93 1d 	call	0x3b26	; 0x3b26 <_ZN7RH_RF9513validateRxBufEv>
    3dfa:	fe 01       	movw	r30, r28
    3dfc:	e2 5e       	subi	r30, 0xE2	; 226
    3dfe:	fe 4f       	sbci	r31, 0xFE	; 254
    3e00:	80 81       	ld	r24, Z
    3e02:	88 23       	and	r24, r24
    3e04:	79 f0       	breq	.+30     	; 0x3e24 <_ZN7RH_RF9515handleInterruptEv+0x158>
    3e06:	07 c0       	rjmp	.+14     	; 0x3e16 <_ZN7RH_RF9515handleInterruptEv+0x14a>
    3e08:	8a 81       	ldd	r24, Y+2	; 0x02
    3e0a:	85 30       	cpi	r24, 0x05	; 5
    3e0c:	59 f4       	brne	.+22     	; 0x3e24 <_ZN7RH_RF9515handleInterruptEv+0x158>
    3e0e:	12 ff       	sbrs	r17, 2
    3e10:	09 c0       	rjmp	.+18     	; 0x3e24 <_ZN7RH_RF9515handleInterruptEv+0x158>
    3e12:	11 70       	andi	r17, 0x01	; 1
    3e14:	1d 8b       	std	Y+21, r17	; 0x15
    3e16:	ce 01       	movw	r24, r28
    3e18:	df 91       	pop	r29
    3e1a:	cf 91       	pop	r28
    3e1c:	1f 91       	pop	r17
    3e1e:	0f 91       	pop	r16
    3e20:	0c 94 4b 1e 	jmp	0x3c96	; 0x3c96 <_ZN7RH_RF9511setModeIdleEv>
    3e24:	df 91       	pop	r29
    3e26:	cf 91       	pop	r28
    3e28:	1f 91       	pop	r17
    3e2a:	0f 91       	pop	r16
    3e2c:	08 95       	ret

00003e2e <_ZN7RH_RF954isr0Ev>:
    3e2e:	80 91 6f 07 	lds	r24, 0x076F	; 0x80076f <_ZN7RH_RF9519_deviceForInterruptE>
    3e32:	90 91 70 07 	lds	r25, 0x0770	; 0x800770 <_ZN7RH_RF9519_deviceForInterruptE+0x1>
    3e36:	00 97       	sbiw	r24, 0x00	; 0
    3e38:	11 f0       	breq	.+4      	; 0x3e3e <_ZN7RH_RF954isr0Ev+0x10>
    3e3a:	0c 94 66 1e 	jmp	0x3ccc	; 0x3ccc <_ZN7RH_RF9515handleInterruptEv>
    3e3e:	08 95       	ret

00003e40 <_ZN7RH_RF954isr1Ev>:
    3e40:	80 91 71 07 	lds	r24, 0x0771	; 0x800771 <_ZN7RH_RF9519_deviceForInterruptE+0x2>
    3e44:	90 91 72 07 	lds	r25, 0x0772	; 0x800772 <_ZN7RH_RF9519_deviceForInterruptE+0x3>
    3e48:	00 97       	sbiw	r24, 0x00	; 0
    3e4a:	11 f0       	breq	.+4      	; 0x3e50 <_ZN7RH_RF954isr1Ev+0x10>
    3e4c:	0c 94 66 1e 	jmp	0x3ccc	; 0x3ccc <_ZN7RH_RF9515handleInterruptEv>
    3e50:	08 95       	ret

00003e52 <_ZN7RH_RF954isr2Ev>:
    3e52:	80 91 73 07 	lds	r24, 0x0773	; 0x800773 <_ZN7RH_RF9519_deviceForInterruptE+0x4>
    3e56:	90 91 74 07 	lds	r25, 0x0774	; 0x800774 <_ZN7RH_RF9519_deviceForInterruptE+0x5>
    3e5a:	00 97       	sbiw	r24, 0x00	; 0
    3e5c:	11 f0       	breq	.+4      	; 0x3e62 <_ZN7RH_RF954isr2Ev+0x10>
    3e5e:	0c 94 66 1e 	jmp	0x3ccc	; 0x3ccc <_ZN7RH_RF9515handleInterruptEv>
    3e62:	08 95       	ret

00003e64 <_ZN7RH_RF959setModeRxEv>:
    3e64:	cf 93       	push	r28
    3e66:	df 93       	push	r29
    3e68:	fc 01       	movw	r30, r24
    3e6a:	22 81       	ldd	r18, Z+2	; 0x02
    3e6c:	24 30       	cpi	r18, 0x04	; 4
    3e6e:	b9 f0       	breq	.+46     	; 0x3e9e <_ZN7RH_RF959setModeRxEv+0x3a>
    3e70:	ec 01       	movw	r28, r24
    3e72:	01 90       	ld	r0, Z+
    3e74:	f0 81       	ld	r31, Z
    3e76:	e0 2d       	mov	r30, r0
    3e78:	e0 5c       	subi	r30, 0xC0	; 192
    3e7a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e7c:	01 90       	ld	r0, Z+
    3e7e:	f0 81       	ld	r31, Z
    3e80:	e0 2d       	mov	r30, r0
    3e82:	64 e0       	ldi	r22, 0x04	; 4
    3e84:	09 95       	icall
    3e86:	45 e0       	ldi	r20, 0x05	; 5
    3e88:	61 e0       	ldi	r22, 0x01	; 1
    3e8a:	ce 01       	movw	r24, r28
    3e8c:	0e 94 31 23 	call	0x4662	; 0x4662 <_ZN11RHSPIDriver8spiWriteEhh>
    3e90:	40 e0       	ldi	r20, 0x00	; 0
    3e92:	60 e4       	ldi	r22, 0x40	; 64
    3e94:	ce 01       	movw	r24, r28
    3e96:	0e 94 31 23 	call	0x4662	; 0x4662 <_ZN11RHSPIDriver8spiWriteEhh>
    3e9a:	84 e0       	ldi	r24, 0x04	; 4
    3e9c:	8a 83       	std	Y+2, r24	; 0x02
    3e9e:	df 91       	pop	r29
    3ea0:	cf 91       	pop	r28
    3ea2:	08 95       	ret

00003ea4 <_ZN7RH_RF959availableEv>:
    3ea4:	cf 93       	push	r28
    3ea6:	df 93       	push	r29
    3ea8:	fc 01       	movw	r30, r24
    3eaa:	22 81       	ldd	r18, Z+2	; 0x02
    3eac:	23 30       	cpi	r18, 0x03	; 3
    3eae:	39 f0       	breq	.+14     	; 0x3ebe <_ZN7RH_RF959availableEv+0x1a>
    3eb0:	ec 01       	movw	r28, r24
    3eb2:	0e 94 32 1f 	call	0x3e64	; 0x3e64 <_ZN7RH_RF959setModeRxEv>
    3eb6:	c2 5e       	subi	r28, 0xE2	; 226
    3eb8:	de 4f       	sbci	r29, 0xFE	; 254
    3eba:	88 81       	ld	r24, Y
    3ebc:	01 c0       	rjmp	.+2      	; 0x3ec0 <_ZN7RH_RF959availableEv+0x1c>
    3ebe:	80 e0       	ldi	r24, 0x00	; 0
    3ec0:	df 91       	pop	r29
    3ec2:	cf 91       	pop	r28
    3ec4:	08 95       	ret

00003ec6 <_ZN7RH_RF959setModeTxEv>:
    3ec6:	cf 93       	push	r28
    3ec8:	df 93       	push	r29
    3eca:	fc 01       	movw	r30, r24
    3ecc:	22 81       	ldd	r18, Z+2	; 0x02
    3ece:	23 30       	cpi	r18, 0x03	; 3
    3ed0:	b9 f0       	breq	.+46     	; 0x3f00 <_ZN7RH_RF959setModeTxEv+0x3a>
    3ed2:	ec 01       	movw	r28, r24
    3ed4:	01 90       	ld	r0, Z+
    3ed6:	f0 81       	ld	r31, Z
    3ed8:	e0 2d       	mov	r30, r0
    3eda:	e0 5c       	subi	r30, 0xC0	; 192
    3edc:	ff 4f       	sbci	r31, 0xFF	; 255
    3ede:	01 90       	ld	r0, Z+
    3ee0:	f0 81       	ld	r31, Z
    3ee2:	e0 2d       	mov	r30, r0
    3ee4:	63 e0       	ldi	r22, 0x03	; 3
    3ee6:	09 95       	icall
    3ee8:	43 e0       	ldi	r20, 0x03	; 3
    3eea:	61 e0       	ldi	r22, 0x01	; 1
    3eec:	ce 01       	movw	r24, r28
    3eee:	0e 94 31 23 	call	0x4662	; 0x4662 <_ZN11RHSPIDriver8spiWriteEhh>
    3ef2:	40 e4       	ldi	r20, 0x40	; 64
    3ef4:	60 e4       	ldi	r22, 0x40	; 64
    3ef6:	ce 01       	movw	r24, r28
    3ef8:	0e 94 31 23 	call	0x4662	; 0x4662 <_ZN11RHSPIDriver8spiWriteEhh>
    3efc:	83 e0       	ldi	r24, 0x03	; 3
    3efe:	8a 83       	std	Y+2, r24	; 0x02
    3f00:	df 91       	pop	r29
    3f02:	cf 91       	pop	r28
    3f04:	08 95       	ret

00003f06 <_ZN7RH_RF954sendEPKhh>:
    3f06:	ef 92       	push	r14
    3f08:	ff 92       	push	r15
    3f0a:	0f 93       	push	r16
    3f0c:	1f 93       	push	r17
    3f0e:	cf 93       	push	r28
    3f10:	df 93       	push	r29
    3f12:	4c 3f       	cpi	r20, 0xFC	; 252
    3f14:	10 f0       	brcs	.+4      	; 0x3f1a <_ZN7RH_RF954sendEPKhh+0x14>
    3f16:	00 e0       	ldi	r16, 0x00	; 0
    3f18:	3e c0       	rjmp	.+124    	; 0x3f96 <_ZN7RH_RF954sendEPKhh+0x90>
    3f1a:	14 2f       	mov	r17, r20
    3f1c:	7b 01       	movw	r14, r22
    3f1e:	ec 01       	movw	r28, r24
    3f20:	e8 81       	ld	r30, Y
    3f22:	f9 81       	ldd	r31, Y+1	; 0x01
    3f24:	00 88       	ldd	r0, Z+16	; 0x10
    3f26:	f1 89       	ldd	r31, Z+17	; 0x11
    3f28:	e0 2d       	mov	r30, r0
    3f2a:	09 95       	icall
    3f2c:	ce 01       	movw	r24, r28
    3f2e:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <_ZN7RH_RF9511setModeIdleEv>
    3f32:	e8 81       	ld	r30, Y
    3f34:	f9 81       	ldd	r31, Y+1	; 0x01
    3f36:	06 88       	ldd	r0, Z+22	; 0x16
    3f38:	f7 89       	ldd	r31, Z+23	; 0x17
    3f3a:	e0 2d       	mov	r30, r0
    3f3c:	ce 01       	movw	r24, r28
    3f3e:	09 95       	icall
    3f40:	08 2f       	mov	r16, r24
    3f42:	88 23       	and	r24, r24
    3f44:	41 f3       	breq	.-48     	; 0x3f16 <_ZN7RH_RF954sendEPKhh+0x10>
    3f46:	40 e0       	ldi	r20, 0x00	; 0
    3f48:	6d e0       	ldi	r22, 0x0D	; 13
    3f4a:	ce 01       	movw	r24, r28
    3f4c:	0e 94 31 23 	call	0x4662	; 0x4662 <_ZN11RHSPIDriver8spiWriteEhh>
    3f50:	49 85       	ldd	r20, Y+9	; 0x09
    3f52:	60 e0       	ldi	r22, 0x00	; 0
    3f54:	ce 01       	movw	r24, r28
    3f56:	0e 94 31 23 	call	0x4662	; 0x4662 <_ZN11RHSPIDriver8spiWriteEhh>
    3f5a:	4a 85       	ldd	r20, Y+10	; 0x0a
    3f5c:	60 e0       	ldi	r22, 0x00	; 0
    3f5e:	ce 01       	movw	r24, r28
    3f60:	0e 94 31 23 	call	0x4662	; 0x4662 <_ZN11RHSPIDriver8spiWriteEhh>
    3f64:	4b 85       	ldd	r20, Y+11	; 0x0b
    3f66:	60 e0       	ldi	r22, 0x00	; 0
    3f68:	ce 01       	movw	r24, r28
    3f6a:	0e 94 31 23 	call	0x4662	; 0x4662 <_ZN11RHSPIDriver8spiWriteEhh>
    3f6e:	4c 85       	ldd	r20, Y+12	; 0x0c
    3f70:	60 e0       	ldi	r22, 0x00	; 0
    3f72:	ce 01       	movw	r24, r28
    3f74:	0e 94 31 23 	call	0x4662	; 0x4662 <_ZN11RHSPIDriver8spiWriteEhh>
    3f78:	21 2f       	mov	r18, r17
    3f7a:	a7 01       	movw	r20, r14
    3f7c:	60 e0       	ldi	r22, 0x00	; 0
    3f7e:	ce 01       	movw	r24, r28
    3f80:	0e 94 d4 23 	call	0x47a8	; 0x47a8 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>
    3f84:	44 e0       	ldi	r20, 0x04	; 4
    3f86:	41 0f       	add	r20, r17
    3f88:	62 e2       	ldi	r22, 0x22	; 34
    3f8a:	ce 01       	movw	r24, r28
    3f8c:	0e 94 31 23 	call	0x4662	; 0x4662 <_ZN11RHSPIDriver8spiWriteEhh>
    3f90:	ce 01       	movw	r24, r28
    3f92:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <_ZN7RH_RF959setModeTxEv>
    3f96:	80 2f       	mov	r24, r16
    3f98:	df 91       	pop	r29
    3f9a:	cf 91       	pop	r28
    3f9c:	1f 91       	pop	r17
    3f9e:	0f 91       	pop	r16
    3fa0:	ff 90       	pop	r15
    3fa2:	ef 90       	pop	r14
    3fa4:	08 95       	ret

00003fa6 <_ZN7RH_RF9510setTxPowerEab>:
    3fa6:	cf 93       	push	r28
    3fa8:	df 93       	push	r29
    3faa:	ec 01       	movw	r28, r24
    3fac:	4b 8f       	std	Y+27, r20	; 0x1b
    3fae:	44 23       	and	r20, r20
    3fb0:	a1 f0       	breq	.+40     	; 0x3fda <_ZN7RH_RF9510setTxPowerEab+0x34>
    3fb2:	60 31       	cpi	r22, 0x10	; 16
    3fb4:	24 f4       	brge	.+8      	; 0x3fbe <_ZN7RH_RF9510setTxPowerEab+0x18>
    3fb6:	67 ff       	sbrs	r22, 7
    3fb8:	03 c0       	rjmp	.+6      	; 0x3fc0 <_ZN7RH_RF9510setTxPowerEab+0x1a>
    3fba:	60 e0       	ldi	r22, 0x00	; 0
    3fbc:	01 c0       	rjmp	.+2      	; 0x3fc0 <_ZN7RH_RF9510setTxPowerEab+0x1a>
    3fbe:	6f e0       	ldi	r22, 0x0F	; 15
    3fc0:	46 2f       	mov	r20, r22
    3fc2:	40 67       	ori	r20, 0x70	; 112
    3fc4:	69 e0       	ldi	r22, 0x09	; 9
    3fc6:	ce 01       	movw	r24, r28
    3fc8:	0e 94 31 23 	call	0x4662	; 0x4662 <_ZN11RHSPIDriver8spiWriteEhh>
    3fcc:	44 e0       	ldi	r20, 0x04	; 4
    3fce:	6d e4       	ldi	r22, 0x4D	; 77
    3fd0:	ce 01       	movw	r24, r28
    3fd2:	df 91       	pop	r29
    3fd4:	cf 91       	pop	r28
    3fd6:	0c 94 31 23 	jmp	0x4662	; 0x4662 <_ZN11RHSPIDriver8spiWriteEhh>
    3fda:	df 91       	pop	r29
    3fdc:	cf 91       	pop	r28
    3fde:	0c 94 36 1d 	jmp	0x3a6c	; 0x3a6c <_ZN7RH_RF9510setTxPowerEab.part.8.constprop.10>

00003fe2 <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>:
    3fe2:	0f 93       	push	r16
    3fe4:	1f 93       	push	r17
    3fe6:	cf 93       	push	r28
    3fe8:	df 93       	push	r29
    3fea:	ec 01       	movw	r28, r24
    3fec:	8b 01       	movw	r16, r22
    3fee:	fb 01       	movw	r30, r22
    3ff0:	40 81       	ld	r20, Z
    3ff2:	6d e1       	ldi	r22, 0x1D	; 29
    3ff4:	0e 94 31 23 	call	0x4662	; 0x4662 <_ZN11RHSPIDriver8spiWriteEhh>
    3ff8:	f8 01       	movw	r30, r16
    3ffa:	41 81       	ldd	r20, Z+1	; 0x01
    3ffc:	6e e1       	ldi	r22, 0x1E	; 30
    3ffe:	ce 01       	movw	r24, r28
    4000:	0e 94 31 23 	call	0x4662	; 0x4662 <_ZN11RHSPIDriver8spiWriteEhh>
    4004:	f8 01       	movw	r30, r16
    4006:	42 81       	ldd	r20, Z+2	; 0x02
    4008:	66 e2       	ldi	r22, 0x26	; 38
    400a:	ce 01       	movw	r24, r28
    400c:	df 91       	pop	r29
    400e:	cf 91       	pop	r28
    4010:	1f 91       	pop	r17
    4012:	0f 91       	pop	r16
    4014:	0c 94 31 23 	jmp	0x4662	; 0x4662 <_ZN11RHSPIDriver8spiWriteEhh>

00004018 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>:
    4018:	0f 93       	push	r16
    401a:	1f 93       	push	r17
    401c:	cf 93       	push	r28
    401e:	df 93       	push	r29
    4020:	00 d0       	rcall	.+0      	; 0x4022 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0xa>
    4022:	1f 92       	push	r1
    4024:	cd b7       	in	r28, 0x3d	; 61
    4026:	de b7       	in	r29, 0x3e	; 62
    4028:	70 e0       	ldi	r23, 0x00	; 0
    402a:	66 30       	cpi	r22, 0x06	; 6
    402c:	71 05       	cpc	r23, r1
    402e:	b4 f4       	brge	.+44     	; 0x405c <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x44>
    4030:	8c 01       	movw	r16, r24
    4032:	cb 01       	movw	r24, r22
    4034:	88 0f       	add	r24, r24
    4036:	99 1f       	adc	r25, r25
    4038:	68 0f       	add	r22, r24
    403a:	79 1f       	adc	r23, r25
    403c:	6d 5e       	subi	r22, 0xED	; 237
    403e:	7b 4f       	sbci	r23, 0xFB	; 251
    4040:	43 e0       	ldi	r20, 0x03	; 3
    4042:	50 e0       	ldi	r21, 0x00	; 0
    4044:	ce 01       	movw	r24, r28
    4046:	01 96       	adiw	r24, 0x01	; 1
    4048:	0e 94 90 26 	call	0x4d20	; 0x4d20 <memcpy_P>
    404c:	be 01       	movw	r22, r28
    404e:	6f 5f       	subi	r22, 0xFF	; 255
    4050:	7f 4f       	sbci	r23, 0xFF	; 255
    4052:	c8 01       	movw	r24, r16
    4054:	0e 94 f1 1f 	call	0x3fe2	; 0x3fe2 <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>
    4058:	81 e0       	ldi	r24, 0x01	; 1
    405a:	01 c0       	rjmp	.+2      	; 0x405e <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x46>
    405c:	80 e0       	ldi	r24, 0x00	; 0
    405e:	0f 90       	pop	r0
    4060:	0f 90       	pop	r0
    4062:	0f 90       	pop	r0
    4064:	df 91       	pop	r29
    4066:	cf 91       	pop	r28
    4068:	1f 91       	pop	r17
    406a:	0f 91       	pop	r16
    406c:	08 95       	ret

0000406e <_ZN7RH_RF9517setPreambleLengthEj>:
    406e:	1f 93       	push	r17
    4070:	cf 93       	push	r28
    4072:	df 93       	push	r29
    4074:	ec 01       	movw	r28, r24
    4076:	16 2f       	mov	r17, r22
    4078:	47 2f       	mov	r20, r23
    407a:	60 e2       	ldi	r22, 0x20	; 32
    407c:	0e 94 31 23 	call	0x4662	; 0x4662 <_ZN11RHSPIDriver8spiWriteEhh>
    4080:	41 2f       	mov	r20, r17
    4082:	61 e2       	ldi	r22, 0x21	; 33
    4084:	ce 01       	movw	r24, r28
    4086:	df 91       	pop	r29
    4088:	cf 91       	pop	r28
    408a:	1f 91       	pop	r17
    408c:	0c 94 31 23 	jmp	0x4662	; 0x4662 <_ZN11RHSPIDriver8spiWriteEhh>

00004090 <_ZN7RH_RF954initEv>:
    4090:	0f 93       	push	r16
    4092:	1f 93       	push	r17
    4094:	cf 93       	push	r28
    4096:	df 93       	push	r29
    4098:	ec 01       	movw	r28, r24
    409a:	0e 94 a8 22 	call	0x4550	; 0x4550 <_ZN11RHSPIDriver4initEv>
    409e:	08 2f       	mov	r16, r24
    40a0:	81 11       	cpse	r24, r1
    40a2:	02 c0       	rjmp	.+4      	; 0x40a8 <_ZN7RH_RF954initEv+0x18>
    40a4:	00 e0       	ldi	r16, 0x00	; 0
    40a6:	78 c0       	rjmp	.+240    	; 0x4198 <_ZN7RH_RF954initEv+0x108>
    40a8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    40aa:	8f 3f       	cpi	r24, 0xFF	; 255
    40ac:	39 f0       	breq	.+14     	; 0x40bc <_ZN7RH_RF954initEv+0x2c>
    40ae:	82 30       	cpi	r24, 0x02	; 2
    40b0:	09 f4       	brne	.+2      	; 0x40b4 <_ZN7RH_RF954initEv+0x24>
    40b2:	6c c0       	rjmp	.+216    	; 0x418c <_ZN7RH_RF954initEv+0xfc>
    40b4:	83 30       	cpi	r24, 0x03	; 3
    40b6:	b1 f7       	brne	.-20     	; 0x40a4 <_ZN7RH_RF954initEv+0x14>
    40b8:	11 e0       	ldi	r17, 0x01	; 1
    40ba:	69 c0       	rjmp	.+210    	; 0x418e <_ZN7RH_RF954initEv+0xfe>
    40bc:	1f ef       	ldi	r17, 0xFF	; 255
    40be:	40 e8       	ldi	r20, 0x80	; 128
    40c0:	61 e0       	ldi	r22, 0x01	; 1
    40c2:	ce 01       	movw	r24, r28
    40c4:	0e 94 31 23 	call	0x4662	; 0x4662 <_ZN11RHSPIDriver8spiWriteEhh>
    40c8:	6a e0       	ldi	r22, 0x0A	; 10
    40ca:	70 e0       	ldi	r23, 0x00	; 0
    40cc:	80 e0       	ldi	r24, 0x00	; 0
    40ce:	90 e0       	ldi	r25, 0x00	; 0
    40d0:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <delay>
    40d4:	61 e0       	ldi	r22, 0x01	; 1
    40d6:	ce 01       	movw	r24, r28
    40d8:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <_ZN11RHSPIDriver7spiReadEh>
    40dc:	80 38       	cpi	r24, 0x80	; 128
    40de:	11 f7       	brne	.-60     	; 0x40a4 <_ZN7RH_RF954initEv+0x14>
    40e0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    40e2:	8f 3f       	cpi	r24, 0xFF	; 255
    40e4:	81 f1       	breq	.+96     	; 0x4146 <_ZN7RH_RF954initEv+0xb6>
    40e6:	60 e0       	ldi	r22, 0x00	; 0
    40e8:	0e 94 91 19 	call	0x3322	; 0x3322 <pinMode>
    40ec:	8d 8d       	ldd	r24, Y+29	; 0x1d
    40ee:	8f 3f       	cpi	r24, 0xFF	; 255
    40f0:	49 f4       	brne	.+18     	; 0x4104 <_ZN7RH_RF954initEv+0x74>
    40f2:	80 91 6e 07 	lds	r24, 0x076E	; 0x80076e <_ZN7RH_RF9515_interruptCountE>
    40f6:	84 30       	cpi	r24, 0x04	; 4
    40f8:	a8 f6       	brcc	.-86     	; 0x40a4 <_ZN7RH_RF954initEv+0x14>
    40fa:	91 e0       	ldi	r25, 0x01	; 1
    40fc:	98 0f       	add	r25, r24
    40fe:	90 93 6e 07 	sts	0x076E, r25	; 0x80076e <_ZN7RH_RF9515_interruptCountE>
    4102:	8d 8f       	std	Y+29, r24	; 0x1d
    4104:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4106:	e8 2f       	mov	r30, r24
    4108:	f0 e0       	ldi	r31, 0x00	; 0
    410a:	ee 0f       	add	r30, r30
    410c:	ff 1f       	adc	r31, r31
    410e:	e1 59       	subi	r30, 0x91	; 145
    4110:	f8 4f       	sbci	r31, 0xF8	; 248
    4112:	d1 83       	std	Z+1, r29	; 0x01
    4114:	c0 83       	st	Z, r28
    4116:	81 11       	cpse	r24, r1
    4118:	05 c0       	rjmp	.+10     	; 0x4124 <_ZN7RH_RF954initEv+0x94>
    411a:	43 e0       	ldi	r20, 0x03	; 3
    411c:	50 e0       	ldi	r21, 0x00	; 0
    411e:	67 e1       	ldi	r22, 0x17	; 23
    4120:	7f e1       	ldi	r23, 0x1F	; 31
    4122:	0e c0       	rjmp	.+28     	; 0x4140 <_ZN7RH_RF954initEv+0xb0>
    4124:	81 30       	cpi	r24, 0x01	; 1
    4126:	29 f4       	brne	.+10     	; 0x4132 <_ZN7RH_RF954initEv+0xa2>
    4128:	43 e0       	ldi	r20, 0x03	; 3
    412a:	50 e0       	ldi	r21, 0x00	; 0
    412c:	60 e2       	ldi	r22, 0x20	; 32
    412e:	7f e1       	ldi	r23, 0x1F	; 31
    4130:	07 c0       	rjmp	.+14     	; 0x4140 <_ZN7RH_RF954initEv+0xb0>
    4132:	82 30       	cpi	r24, 0x02	; 2
    4134:	09 f0       	breq	.+2      	; 0x4138 <_ZN7RH_RF954initEv+0xa8>
    4136:	b6 cf       	rjmp	.-148    	; 0x40a4 <_ZN7RH_RF954initEv+0x14>
    4138:	43 e0       	ldi	r20, 0x03	; 3
    413a:	50 e0       	ldi	r21, 0x00	; 0
    413c:	69 e2       	ldi	r22, 0x29	; 41
    413e:	7f e1       	ldi	r23, 0x1F	; 31
    4140:	81 2f       	mov	r24, r17
    4142:	0e 94 e7 21 	call	0x43ce	; 0x43ce <attachInterrupt>
    4146:	40 e0       	ldi	r20, 0x00	; 0
    4148:	6e e0       	ldi	r22, 0x0E	; 14
    414a:	ce 01       	movw	r24, r28
    414c:	0e 94 31 23 	call	0x4662	; 0x4662 <_ZN11RHSPIDriver8spiWriteEhh>
    4150:	40 e0       	ldi	r20, 0x00	; 0
    4152:	6f e0       	ldi	r22, 0x0F	; 15
    4154:	ce 01       	movw	r24, r28
    4156:	0e 94 31 23 	call	0x4662	; 0x4662 <_ZN11RHSPIDriver8spiWriteEhh>
    415a:	ce 01       	movw	r24, r28
    415c:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <_ZN7RH_RF9511setModeIdleEv>
    4160:	60 e0       	ldi	r22, 0x00	; 0
    4162:	ce 01       	movw	r24, r28
    4164:	0e 94 0c 20 	call	0x4018	; 0x4018 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>
    4168:	68 e0       	ldi	r22, 0x08	; 8
    416a:	70 e0       	ldi	r23, 0x00	; 0
    416c:	ce 01       	movw	r24, r28
    416e:	0e 94 37 20 	call	0x406e	; 0x406e <_ZN7RH_RF9517setPreambleLengthEj>
    4172:	40 e0       	ldi	r20, 0x00	; 0
    4174:	50 e0       	ldi	r21, 0x00	; 0
    4176:	69 ed       	ldi	r22, 0xD9	; 217
    4178:	73 e4       	ldi	r23, 0x43	; 67
    417a:	ce 01       	movw	r24, r28
    417c:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <_ZN7RH_RF9512setFrequencyEf>
    4180:	1b 8e       	std	Y+27, r1	; 0x1b
    4182:	6d e0       	ldi	r22, 0x0D	; 13
    4184:	ce 01       	movw	r24, r28
    4186:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <_ZN7RH_RF9510setTxPowerEab.part.8.constprop.10>
    418a:	06 c0       	rjmp	.+12     	; 0x4198 <_ZN7RH_RF954initEv+0x108>
    418c:	10 e0       	ldi	r17, 0x00	; 0
    418e:	61 2f       	mov	r22, r17
    4190:	ce 01       	movw	r24, r28
    4192:	0e 94 2e 24 	call	0x485c	; 0x485c <_ZN11RHSPIDriver17spiUsingInterruptEh>
    4196:	93 cf       	rjmp	.-218    	; 0x40be <_ZN7RH_RF954initEv+0x2e>
    4198:	80 2f       	mov	r24, r16
    419a:	df 91       	pop	r29
    419c:	cf 91       	pop	r28
    419e:	1f 91       	pop	r17
    41a0:	0f 91       	pop	r16
    41a2:	08 95       	ret

000041a4 <_ZN7RH_RF9514setLowDatarateEv>:
}
 
void RH_RF95::setLowDatarate()
{
    41a4:	8f 92       	push	r8
    41a6:	9f 92       	push	r9
    41a8:	af 92       	push	r10
    41aa:	bf 92       	push	r11
    41ac:	ef 92       	push	r14
    41ae:	ff 92       	push	r15
    41b0:	1f 93       	push	r17
    41b2:	cf 93       	push	r28
    41b4:	df 93       	push	r29
    41b6:	cd b7       	in	r28, 0x3d	; 61
    41b8:	de b7       	in	r29, 0x3e	; 62
    41ba:	a8 97       	sbiw	r28, 0x28	; 40
    41bc:	0f b6       	in	r0, 0x3f	; 63
    41be:	f8 94       	cli
    41c0:	de bf       	out	0x3e, r29	; 62
    41c2:	0f be       	out	0x3f, r0	; 63
    41c4:	cd bf       	out	0x3d, r28	; 61
    41c6:	7c 01       	movw	r14, r24
    // "To avoid issues surrounding  drift  of  the  crystal  reference  oscillator  due  to  either  temperature  change  
    // or  motion,the  low  data  rate optimization  bit  is  used. Specifically for 125  kHz  bandwidth  and  SF  =  11  and  12,  
    // this  adds  a  small  overhead  to increase robustness to reference frequency variations over the timescale of the LoRa packet."
 
    // read current value for BW and SF
    uint8_t BW = spiRead(RH_RF95_REG_1D_MODEM_CONFIG1) >> 4;	// bw is in bits 7..4
    41c8:	6d e1       	ldi	r22, 0x1D	; 29
    41ca:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <_ZN11RHSPIDriver7spiReadEh>
    41ce:	18 2f       	mov	r17, r24
    uint8_t SF = spiRead(RH_RF95_REG_1E_MODEM_CONFIG2) >> 4;	// sf is in bits 7..4
    41d0:	6e e1       	ldi	r22, 0x1E	; 30
    41d2:	c7 01       	movw	r24, r14
    41d4:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <_ZN11RHSPIDriver7spiReadEh>
   
    // calculate symbol time (see Semtech AN1200.22 section 4)
    float bw_tab[] = {7800, 10400, 15600, 20800, 31250, 41700, 62500, 125000, 250000, 500000};
    41d8:	98 e2       	ldi	r25, 0x28	; 40
    41da:	e0 e6       	ldi	r30, 0x60	; 96
    41dc:	f1 e0       	ldi	r31, 0x01	; 1
    41de:	de 01       	movw	r26, r28
    41e0:	11 96       	adiw	r26, 0x01	; 1
    41e2:	01 90       	ld	r0, Z+
    41e4:	0d 92       	st	X+, r0
    41e6:	9a 95       	dec	r25
    41e8:	e1 f7       	brne	.-8      	; 0x41e2 <_ZN7RH_RF9514setLowDatarateEv+0x3e>
   
    float bandwidth = bw_tab[BW];
   
    float symbolTime = 1000.0 * pow(2, SF) / bandwidth;	// ms
    41ea:	68 2f       	mov	r22, r24
    41ec:	70 e0       	ldi	r23, 0x00	; 0
    41ee:	84 e0       	ldi	r24, 0x04	; 4
    41f0:	75 95       	asr	r23
    41f2:	67 95       	ror	r22
    41f4:	8a 95       	dec	r24
    41f6:	e1 f7       	brne	.-8      	; 0x41f0 <_ZN7RH_RF9514setLowDatarateEv+0x4c>
    41f8:	70 e0       	ldi	r23, 0x00	; 0
    41fa:	80 e0       	ldi	r24, 0x00	; 0
    41fc:	90 e0       	ldi	r25, 0x00	; 0
    41fe:	0e 94 1c 11 	call	0x2238	; 0x2238 <__floatunsisf>
    4202:	9b 01       	movw	r18, r22
    4204:	ac 01       	movw	r20, r24
    4206:	60 e0       	ldi	r22, 0x00	; 0
    4208:	70 e0       	ldi	r23, 0x00	; 0
    420a:	80 e0       	ldi	r24, 0x00	; 0
    420c:	90 e4       	ldi	r25, 0x40	; 64
    420e:	0e 94 40 12 	call	0x2480	; 0x2480 <pow>
    4212:	20 e0       	ldi	r18, 0x00	; 0
    4214:	30 e0       	ldi	r19, 0x00	; 0
    4216:	4a e7       	ldi	r20, 0x7A	; 122
    4218:	54 e4       	ldi	r21, 0x44	; 68
    421a:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <__mulsf3>
    uint8_t SF = spiRead(RH_RF95_REG_1E_MODEM_CONFIG2) >> 4;	// sf is in bits 7..4
   
    // calculate symbol time (see Semtech AN1200.22 section 4)
    float bw_tab[] = {7800, 10400, 15600, 20800, 31250, 41700, 62500, 125000, 250000, 500000};
   
    float bandwidth = bw_tab[BW];
    421e:	e1 2f       	mov	r30, r17
    4220:	f0 e0       	ldi	r31, 0x00	; 0
    4222:	24 e0       	ldi	r18, 0x04	; 4
    4224:	f5 95       	asr	r31
    4226:	e7 95       	ror	r30
    4228:	2a 95       	dec	r18
    422a:	e1 f7       	brne	.-8      	; 0x4224 <_ZN7RH_RF9514setLowDatarateEv+0x80>
    422c:	ee 0f       	add	r30, r30
    422e:	ff 1f       	adc	r31, r31
    4230:	ee 0f       	add	r30, r30
    4232:	ff 1f       	adc	r31, r31
    4234:	21 e0       	ldi	r18, 0x01	; 1
    4236:	30 e0       	ldi	r19, 0x00	; 0
    4238:	2c 0f       	add	r18, r28
    423a:	3d 1f       	adc	r19, r29
    423c:	e2 0f       	add	r30, r18
    423e:	f3 1f       	adc	r31, r19
   
    float symbolTime = 1000.0 * pow(2, SF) / bandwidth;	// ms
    4240:	20 81       	ld	r18, Z
    4242:	31 81       	ldd	r19, Z+1	; 0x01
    4244:	42 81       	ldd	r20, Z+2	; 0x02
    4246:	53 81       	ldd	r21, Z+3	; 0x03
    4248:	0e 94 74 10 	call	0x20e8	; 0x20e8 <__divsf3>
    424c:	4b 01       	movw	r8, r22
    424e:	5c 01       	movw	r10, r24
    // https://www.thethingsnetwork.org/forum/t/a-point-to-note-lora-low-data-rate-optimisation-flag/12007
    // the LDR bit should be set if the Symbol Time is > 16ms
    // So the threshold used here is 16.0ms
 
    // the LDR is bit 3 of RH_RF95_REG_26_MODEM_CONFIG3
    uint8_t current = spiRead(RH_RF95_REG_26_MODEM_CONFIG3) & ~RH_RF95_LOW_DATA_RATE_OPTIMIZE; // mask off the LDR bit
    4250:	66 e2       	ldi	r22, 0x26	; 38
    4252:	c7 01       	movw	r24, r14
    4254:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <_ZN11RHSPIDriver7spiReadEh>
    4258:	18 2f       	mov	r17, r24
    425a:	17 7f       	andi	r17, 0xF7	; 247
    if (symbolTime > 16.0)
    425c:	20 e0       	ldi	r18, 0x00	; 0
    425e:	30 e0       	ldi	r19, 0x00	; 0
    4260:	40 e8       	ldi	r20, 0x80	; 128
    4262:	51 e4       	ldi	r21, 0x41	; 65
    4264:	c5 01       	movw	r24, r10
    4266:	b4 01       	movw	r22, r8
    4268:	0e 94 ce 11 	call	0x239c	; 0x239c <__gesf2>
	spiWrite(RH_RF95_REG_26_MODEM_CONFIG3, current | RH_RF95_LOW_DATA_RATE_OPTIMIZE);
    426c:	41 2f       	mov	r20, r17
    // the LDR bit should be set if the Symbol Time is > 16ms
    // So the threshold used here is 16.0ms
 
    // the LDR is bit 3 of RH_RF95_REG_26_MODEM_CONFIG3
    uint8_t current = spiRead(RH_RF95_REG_26_MODEM_CONFIG3) & ~RH_RF95_LOW_DATA_RATE_OPTIMIZE; // mask off the LDR bit
    if (symbolTime > 16.0)
    426e:	18 16       	cp	r1, r24
    4270:	0c f4       	brge	.+2      	; 0x4274 <_ZN7RH_RF9514setLowDatarateEv+0xd0>
	spiWrite(RH_RF95_REG_26_MODEM_CONFIG3, current | RH_RF95_LOW_DATA_RATE_OPTIMIZE);
    4272:	48 60       	ori	r20, 0x08	; 8
    else
	spiWrite(RH_RF95_REG_26_MODEM_CONFIG3, current);
    4274:	66 e2       	ldi	r22, 0x26	; 38
    4276:	c7 01       	movw	r24, r14
   
}
    4278:	a8 96       	adiw	r28, 0x28	; 40
    427a:	0f b6       	in	r0, 0x3f	; 63
    427c:	f8 94       	cli
    427e:	de bf       	out	0x3e, r29	; 62
    4280:	0f be       	out	0x3f, r0	; 63
    4282:	cd bf       	out	0x3d, r28	; 61
    4284:	df 91       	pop	r29
    4286:	cf 91       	pop	r28
    4288:	1f 91       	pop	r17
    428a:	ff 90       	pop	r15
    428c:	ef 90       	pop	r14
    428e:	bf 90       	pop	r11
    4290:	af 90       	pop	r10
    4292:	9f 90       	pop	r9
    4294:	8f 90       	pop	r8
    // the LDR is bit 3 of RH_RF95_REG_26_MODEM_CONFIG3
    uint8_t current = spiRead(RH_RF95_REG_26_MODEM_CONFIG3) & ~RH_RF95_LOW_DATA_RATE_OPTIMIZE; // mask off the LDR bit
    if (symbolTime > 16.0)
	spiWrite(RH_RF95_REG_26_MODEM_CONFIG3, current | RH_RF95_LOW_DATA_RATE_OPTIMIZE);
    else
	spiWrite(RH_RF95_REG_26_MODEM_CONFIG3, current);
    4296:	0c 94 31 23 	jmp	0x4662	; 0x4662 <_ZN11RHSPIDriver8spiWriteEhh>

0000429a <_ZN7RH_RF9518setSpreadingFactorEh>:
 // a bit more intuitive
 //
 ///////////////////////////////////////////////////
 
 void RH_RF95::setSpreadingFactor(uint8_t sf)
 {
    429a:	0f 93       	push	r16
    429c:	1f 93       	push	r17
    429e:	cf 93       	push	r28
    42a0:	8c 01       	movw	r16, r24
   if (sf <= 6) 
    42a2:	67 30       	cpi	r22, 0x07	; 7
    42a4:	60 f0       	brcs	.+24     	; 0x42be <_ZN7RH_RF9518setSpreadingFactorEh+0x24>
     sf = RH_RF95_SPREADING_FACTOR_64CPS;
   else if (sf == 7) 
    42a6:	67 30       	cpi	r22, 0x07	; 7
    42a8:	61 f0       	breq	.+24     	; 0x42c2 <_ZN7RH_RF9518setSpreadingFactorEh+0x28>
     sf = RH_RF95_SPREADING_FACTOR_128CPS;
   else if (sf == 8) 
    42aa:	68 30       	cpi	r22, 0x08	; 8
    42ac:	61 f0       	breq	.+24     	; 0x42c6 <_ZN7RH_RF9518setSpreadingFactorEh+0x2c>
     sf = RH_RF95_SPREADING_FACTOR_256CPS;
   else if (sf == 9)
    42ae:	69 30       	cpi	r22, 0x09	; 9
    42b0:	61 f0       	breq	.+24     	; 0x42ca <_ZN7RH_RF9518setSpreadingFactorEh+0x30>
     sf = RH_RF95_SPREADING_FACTOR_512CPS;
   else if (sf == 10)
    42b2:	6a 30       	cpi	r22, 0x0A	; 10
    42b4:	61 f0       	breq	.+24     	; 0x42ce <_ZN7RH_RF9518setSpreadingFactorEh+0x34>
     sf = RH_RF95_SPREADING_FACTOR_1024CPS;
   else if (sf == 11) 
    42b6:	6b 30       	cpi	r22, 0x0B	; 11
    42b8:	61 f4       	brne	.+24     	; 0x42d2 <_ZN7RH_RF9518setSpreadingFactorEh+0x38>
     sf = RH_RF95_SPREADING_FACTOR_2048CPS;
    42ba:	c0 eb       	ldi	r28, 0xB0	; 176
    42bc:	0b c0       	rjmp	.+22     	; 0x42d4 <_ZN7RH_RF9518setSpreadingFactorEh+0x3a>
 ///////////////////////////////////////////////////
 
 void RH_RF95::setSpreadingFactor(uint8_t sf)
 {
   if (sf <= 6) 
     sf = RH_RF95_SPREADING_FACTOR_64CPS;
    42be:	c0 e6       	ldi	r28, 0x60	; 96
    42c0:	09 c0       	rjmp	.+18     	; 0x42d4 <_ZN7RH_RF9518setSpreadingFactorEh+0x3a>
   else if (sf == 7) 
     sf = RH_RF95_SPREADING_FACTOR_128CPS;
    42c2:	c0 e7       	ldi	r28, 0x70	; 112
    42c4:	07 c0       	rjmp	.+14     	; 0x42d4 <_ZN7RH_RF9518setSpreadingFactorEh+0x3a>
   else if (sf == 8) 
     sf = RH_RF95_SPREADING_FACTOR_256CPS;
    42c6:	c0 e8       	ldi	r28, 0x80	; 128
    42c8:	05 c0       	rjmp	.+10     	; 0x42d4 <_ZN7RH_RF9518setSpreadingFactorEh+0x3a>
   else if (sf == 9)
     sf = RH_RF95_SPREADING_FACTOR_512CPS;
    42ca:	c0 e9       	ldi	r28, 0x90	; 144
    42cc:	03 c0       	rjmp	.+6      	; 0x42d4 <_ZN7RH_RF9518setSpreadingFactorEh+0x3a>
   else if (sf == 10)
     sf = RH_RF95_SPREADING_FACTOR_1024CPS;
    42ce:	c0 ea       	ldi	r28, 0xA0	; 160
    42d0:	01 c0       	rjmp	.+2      	; 0x42d4 <_ZN7RH_RF9518setSpreadingFactorEh+0x3a>
   else if (sf == 11) 
     sf = RH_RF95_SPREADING_FACTOR_2048CPS;
   else if (sf >= 12)
     sf =  RH_RF95_SPREADING_FACTOR_4096CPS;
    42d2:	c0 ec       	ldi	r28, 0xC0	; 192
 
   // set the new spreading factor
   spiWrite(RH_RF95_REG_1E_MODEM_CONFIG2, (spiRead(RH_RF95_REG_1E_MODEM_CONFIG2) & ~RH_RF95_SPREADING_FACTOR) | sf);
    42d4:	6e e1       	ldi	r22, 0x1E	; 30
    42d6:	c8 01       	movw	r24, r16
    42d8:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <_ZN11RHSPIDriver7spiReadEh>
    42dc:	8f 70       	andi	r24, 0x0F	; 15
    42de:	48 2f       	mov	r20, r24
    42e0:	4c 2b       	or	r20, r28
    42e2:	6e e1       	ldi	r22, 0x1E	; 30
    42e4:	c8 01       	movw	r24, r16
    42e6:	0e 94 31 23 	call	0x4662	; 0x4662 <_ZN11RHSPIDriver8spiWriteEhh>
   // check if Low data Rate bit should be set or cleared
   setLowDatarate();
    42ea:	c8 01       	movw	r24, r16
 }
    42ec:	cf 91       	pop	r28
    42ee:	1f 91       	pop	r17
    42f0:	0f 91       	pop	r16
     sf =  RH_RF95_SPREADING_FACTOR_4096CPS;
 
   // set the new spreading factor
   spiWrite(RH_RF95_REG_1E_MODEM_CONFIG2, (spiRead(RH_RF95_REG_1E_MODEM_CONFIG2) & ~RH_RF95_SPREADING_FACTOR) | sf);
   // check if Low data Rate bit should be set or cleared
   setLowDatarate();
    42f2:	0c 94 d2 20 	jmp	0x41a4	; 0x41a4 <_ZN7RH_RF9514setLowDatarateEv>

000042f6 <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    42f6:	cf 93       	push	r28
  uint8_t sreg = SREG;
    42f8:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    42fa:	f8 94       	cli
  if (!initialized) {
    42fc:	80 91 78 07 	lds	r24, 0x0778	; 0x800778 <_ZN8SPIClass11initializedE>
    4300:	81 11       	cpse	r24, r1
    4302:	27 c0       	rjmp	.+78     	; 0x4352 <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    4304:	eb ee       	ldi	r30, 0xEB	; 235
    4306:	f3 e0       	ldi	r31, 0x03	; 3
    4308:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    430a:	e7 ed       	ldi	r30, 0xD7	; 215
    430c:	f3 e0       	ldi	r31, 0x03	; 3
    430e:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    4310:	e8 2f       	mov	r30, r24
    4312:	f0 e0       	ldi	r31, 0x00	; 0
    4314:	ee 0f       	add	r30, r30
    4316:	ff 1f       	adc	r31, r31
    4318:	e7 5f       	subi	r30, 0xF7	; 247
    431a:	fb 4f       	sbci	r31, 0xFB	; 251
    431c:	a5 91       	lpm	r26, Z+
    431e:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    4320:	ec 91       	ld	r30, X
    4322:	e9 23       	and	r30, r25
    4324:	21 f4       	brne	.+8      	; 0x432e <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
    4326:	61 e0       	ldi	r22, 0x01	; 1
    4328:	8a e0       	ldi	r24, 0x0A	; 10
    432a:	0e 94 cd 19 	call	0x339a	; 0x339a <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    432e:	61 e0       	ldi	r22, 0x01	; 1
    4330:	8a e0       	ldi	r24, 0x0A	; 10
    4332:	0e 94 91 19 	call	0x3322	; 0x3322 <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    4336:	8c b5       	in	r24, 0x2c	; 44
    4338:	80 61       	ori	r24, 0x10	; 16
    433a:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    433c:	8c b5       	in	r24, 0x2c	; 44
    433e:	80 64       	ori	r24, 0x40	; 64
    4340:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    4342:	61 e0       	ldi	r22, 0x01	; 1
    4344:	8d e0       	ldi	r24, 0x0D	; 13
    4346:	0e 94 91 19 	call	0x3322	; 0x3322 <pinMode>
    pinMode(MOSI, OUTPUT);
    434a:	61 e0       	ldi	r22, 0x01	; 1
    434c:	8b e0       	ldi	r24, 0x0B	; 11
    434e:	0e 94 91 19 	call	0x3322	; 0x3322 <pinMode>
  }
  initialized++; // reference count
    4352:	80 91 78 07 	lds	r24, 0x0778	; 0x800778 <_ZN8SPIClass11initializedE>
    4356:	8f 5f       	subi	r24, 0xFF	; 255
    4358:	80 93 78 07 	sts	0x0778, r24	; 0x800778 <_ZN8SPIClass11initializedE>
  SREG = sreg;
    435c:	cf bf       	out	0x3f, r28	; 63
}
    435e:	cf 91       	pop	r28
    4360:	08 95       	ret

00004362 <_ZN8SPIClass3endEv>:

void SPIClass::end() {
  uint8_t sreg = SREG;
    4362:	9f b7       	in	r25, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    4364:	f8 94       	cli
  // Decrease the reference counter
  if (initialized)
    4366:	80 91 78 07 	lds	r24, 0x0778	; 0x800778 <_ZN8SPIClass11initializedE>
    436a:	88 23       	and	r24, r24
    436c:	19 f0       	breq	.+6      	; 0x4374 <_ZN8SPIClass3endEv+0x12>
    initialized--;
    436e:	81 50       	subi	r24, 0x01	; 1
    4370:	80 93 78 07 	sts	0x0778, r24	; 0x800778 <_ZN8SPIClass11initializedE>
  // If there are no more references disable SPI
  if (!initialized) {
    4374:	80 91 78 07 	lds	r24, 0x0778	; 0x800778 <_ZN8SPIClass11initializedE>
    4378:	81 11       	cpse	r24, r1
    437a:	05 c0       	rjmp	.+10     	; 0x4386 <_ZN8SPIClass3endEv+0x24>
    SPCR &= ~_BV(SPE);
    437c:	8c b5       	in	r24, 0x2c	; 44
    437e:	8f 7b       	andi	r24, 0xBF	; 191
    4380:	8c bd       	out	0x2c, r24	; 44
    interruptMode = 0;
    4382:	10 92 77 07 	sts	0x0777, r1	; 0x800777 <_ZN8SPIClass13interruptModeE>
    #ifdef SPI_TRANSACTION_MISMATCH_LED
    inTransactionFlag = 0;
    #endif
  }
  SREG = sreg;
    4386:	9f bf       	out	0x3f, r25	; 63
    4388:	08 95       	ret

0000438a <_ZN8SPIClass14usingInterruptEh>:
#endif

void SPIClass::usingInterrupt(uint8_t interruptNumber)
{
  uint8_t mask = 0;
  uint8_t sreg = SREG;
    438a:	9f b7       	in	r25, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    438c:	f8 94       	cli
  switch (interruptNumber) {
    438e:	88 23       	and	r24, r24
    4390:	49 f0       	breq	.+18     	; 0x43a4 <_ZN8SPIClass14usingInterruptEh+0x1a>
    4392:	81 30       	cpi	r24, 0x01	; 1
    4394:	11 f4       	brne	.+4      	; 0x439a <_ZN8SPIClass14usingInterruptEh+0x10>
  #ifdef SPI_INT0_MASK
  case 0: mask = SPI_INT0_MASK; break;
  #endif
  #ifdef SPI_INT1_MASK
  case 1: mask = SPI_INT1_MASK; break;
    4396:	82 e0       	ldi	r24, 0x02	; 2
    4398:	06 c0       	rjmp	.+12     	; 0x43a6 <_ZN8SPIClass14usingInterruptEh+0x1c>
  #endif
  #ifdef SPI_INT7_MASK
  case 7: mask = SPI_INT7_MASK; break;
  #endif
  default:
    interruptMode = 2;
    439a:	82 e0       	ldi	r24, 0x02	; 2
    439c:	80 93 77 07 	sts	0x0777, r24	; 0x800777 <_ZN8SPIClass13interruptModeE>
  #endif
#endif

void SPIClass::usingInterrupt(uint8_t interruptNumber)
{
  uint8_t mask = 0;
    43a0:	80 e0       	ldi	r24, 0x00	; 0
  #ifdef SPI_INT7_MASK
  case 7: mask = SPI_INT7_MASK; break;
  #endif
  default:
    interruptMode = 2;
    break;
    43a2:	01 c0       	rjmp	.+2      	; 0x43a6 <_ZN8SPIClass14usingInterruptEh+0x1c>
  uint8_t mask = 0;
  uint8_t sreg = SREG;
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
  switch (interruptNumber) {
  #ifdef SPI_INT0_MASK
  case 0: mask = SPI_INT0_MASK; break;
    43a4:	81 e0       	ldi	r24, 0x01	; 1
  #endif
  default:
    interruptMode = 2;
    break;
  }
  interruptMask |= mask;
    43a6:	20 91 76 07 	lds	r18, 0x0776	; 0x800776 <_ZN8SPIClass13interruptMaskE>
    43aa:	82 2b       	or	r24, r18
    43ac:	80 93 76 07 	sts	0x0776, r24	; 0x800776 <_ZN8SPIClass13interruptMaskE>
  if (!interruptMode)
    43b0:	80 91 77 07 	lds	r24, 0x0777	; 0x800777 <_ZN8SPIClass13interruptModeE>
    43b4:	81 11       	cpse	r24, r1
    43b6:	03 c0       	rjmp	.+6      	; 0x43be <_ZN8SPIClass14usingInterruptEh+0x34>
    interruptMode = 1;
    43b8:	81 e0       	ldi	r24, 0x01	; 1
    43ba:	80 93 77 07 	sts	0x0777, r24	; 0x800777 <_ZN8SPIClass13interruptModeE>
  SREG = sreg;
    43be:	9f bf       	out	0x3f, r25	; 63
    43c0:	08 95       	ret

000043c2 <__cxa_pure_virtual>:
    43c2:	0e 94 8b 26 	call	0x4d16	; 0x4d16 <abort>

000043c6 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    43c6:	08 95       	ret

000043c8 <_ZdlPv>:
    43c8:	0c 94 60 25 	jmp	0x4ac0	; 0x4ac0 <free>

000043cc <nothing>:
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
    43cc:	08 95       	ret

000043ce <attachInterrupt>:
    43ce:	82 30       	cpi	r24, 0x02	; 2
    43d0:	e8 f4       	brcc	.+58     	; 0x440c <attachInterrupt+0x3e>
    43d2:	e8 2f       	mov	r30, r24
    43d4:	f0 e0       	ldi	r31, 0x00	; 0
    43d6:	ee 0f       	add	r30, r30
    43d8:	ff 1f       	adc	r31, r31
    43da:	e0 5f       	subi	r30, 0xF0	; 240
    43dc:	fe 4f       	sbci	r31, 0xFE	; 254
    43de:	71 83       	std	Z+1, r23	; 0x01
    43e0:	60 83       	st	Z, r22
    43e2:	81 30       	cpi	r24, 0x01	; 1
    43e4:	41 f0       	breq	.+16     	; 0x43f6 <attachInterrupt+0x28>
    43e6:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
    43ea:	8c 7f       	andi	r24, 0xFC	; 252
    43ec:	48 2b       	or	r20, r24
    43ee:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
    43f2:	e8 9a       	sbi	0x1d, 0	; 29
    43f4:	08 95       	ret
    43f6:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
    43fa:	83 7f       	andi	r24, 0xF3	; 243
    43fc:	44 0f       	add	r20, r20
    43fe:	55 1f       	adc	r21, r21
    4400:	44 0f       	add	r20, r20
    4402:	55 1f       	adc	r21, r21
    4404:	48 2b       	or	r20, r24
    4406:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
    440a:	e9 9a       	sbi	0x1d, 1	; 29
    440c:	08 95       	ret

0000440e <__vector_1>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)

#else

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
    440e:	1f 92       	push	r1
    4410:	0f 92       	push	r0
    4412:	0f b6       	in	r0, 0x3f	; 63
    4414:	0f 92       	push	r0
    4416:	11 24       	eor	r1, r1
    4418:	2f 93       	push	r18
    441a:	3f 93       	push	r19
    441c:	4f 93       	push	r20
    441e:	5f 93       	push	r21
    4420:	6f 93       	push	r22
    4422:	7f 93       	push	r23
    4424:	8f 93       	push	r24
    4426:	9f 93       	push	r25
    4428:	af 93       	push	r26
    442a:	bf 93       	push	r27
    442c:	ef 93       	push	r30
    442e:	ff 93       	push	r31
    4430:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <intFunc>
    4434:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <intFunc+0x1>
    4438:	09 95       	icall
    443a:	ff 91       	pop	r31
    443c:	ef 91       	pop	r30
    443e:	bf 91       	pop	r27
    4440:	af 91       	pop	r26
    4442:	9f 91       	pop	r25
    4444:	8f 91       	pop	r24
    4446:	7f 91       	pop	r23
    4448:	6f 91       	pop	r22
    444a:	5f 91       	pop	r21
    444c:	4f 91       	pop	r20
    444e:	3f 91       	pop	r19
    4450:	2f 91       	pop	r18
    4452:	0f 90       	pop	r0
    4454:	0f be       	out	0x3f, r0	; 63
    4456:	0f 90       	pop	r0
    4458:	1f 90       	pop	r1
    445a:	18 95       	reti

0000445c <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
    445c:	1f 92       	push	r1
    445e:	0f 92       	push	r0
    4460:	0f b6       	in	r0, 0x3f	; 63
    4462:	0f 92       	push	r0
    4464:	11 24       	eor	r1, r1
    4466:	2f 93       	push	r18
    4468:	3f 93       	push	r19
    446a:	4f 93       	push	r20
    446c:	5f 93       	push	r21
    446e:	6f 93       	push	r22
    4470:	7f 93       	push	r23
    4472:	8f 93       	push	r24
    4474:	9f 93       	push	r25
    4476:	af 93       	push	r26
    4478:	bf 93       	push	r27
    447a:	ef 93       	push	r30
    447c:	ff 93       	push	r31
    447e:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <intFunc+0x2>
    4482:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <intFunc+0x3>
    4486:	09 95       	icall
    4488:	ff 91       	pop	r31
    448a:	ef 91       	pop	r30
    448c:	bf 91       	pop	r27
    448e:	af 91       	pop	r26
    4490:	9f 91       	pop	r25
    4492:	8f 91       	pop	r24
    4494:	7f 91       	pop	r23
    4496:	6f 91       	pop	r22
    4498:	5f 91       	pop	r21
    449a:	4f 91       	pop	r20
    449c:	3f 91       	pop	r19
    449e:	2f 91       	pop	r18
    44a0:	0f 90       	pop	r0
    44a2:	0f be       	out	0x3f, r0	; 63
    44a4:	0f 90       	pop	r0
    44a6:	1f 90       	pop	r1
    44a8:	18 95       	reti

000044aa <_Z6randoml>:
    srandom(seed);
  }
}

long random(long howbig)
{
    44aa:	cf 92       	push	r12
    44ac:	df 92       	push	r13
    44ae:	ef 92       	push	r14
    44b0:	ff 92       	push	r15
  if (howbig == 0) {
    44b2:	61 15       	cp	r22, r1
    44b4:	71 05       	cpc	r23, r1
    44b6:	81 05       	cpc	r24, r1
    44b8:	91 05       	cpc	r25, r1
    44ba:	49 f0       	breq	.+18     	; 0x44ce <_Z6randoml+0x24>
    44bc:	6b 01       	movw	r12, r22
    44be:	7c 01       	movw	r14, r24
    return 0;
  }
  return random() % howbig;
    44c0:	0e 94 34 26 	call	0x4c68	; 0x4c68 <random>
    44c4:	a7 01       	movw	r20, r14
    44c6:	96 01       	movw	r18, r12
    44c8:	0e 94 89 24 	call	0x4912	; 0x4912 <__divmodsi4>
    44cc:	03 c0       	rjmp	.+6      	; 0x44d4 <_Z6randoml+0x2a>
}

long random(long howbig)
{
  if (howbig == 0) {
    return 0;
    44ce:	60 e0       	ldi	r22, 0x00	; 0
    44d0:	70 e0       	ldi	r23, 0x00	; 0
    44d2:	cb 01       	movw	r24, r22
  }
  return random() % howbig;
}
    44d4:	ff 90       	pop	r15
    44d6:	ef 90       	pop	r14
    44d8:	df 90       	pop	r13
    44da:	cf 90       	pop	r12
    44dc:	08 95       	ret

000044de <_Z6randomll>:

long random(long howsmall, long howbig)
{
    44de:	cf 92       	push	r12
    44e0:	df 92       	push	r13
    44e2:	ef 92       	push	r14
    44e4:	ff 92       	push	r15
    44e6:	0f 93       	push	r16
    44e8:	1f 93       	push	r17
  if (howsmall >= howbig) {
    44ea:	62 17       	cp	r22, r18
    44ec:	73 07       	cpc	r23, r19
    44ee:	84 07       	cpc	r24, r20
    44f0:	95 07       	cpc	r25, r21
    44f2:	84 f4       	brge	.+32     	; 0x4514 <_Z6randomll+0x36>
    44f4:	89 01       	movw	r16, r18
    44f6:	9a 01       	movw	r18, r20
    44f8:	6b 01       	movw	r12, r22
    44fa:	7c 01       	movw	r14, r24
    return howsmall;
  }
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
    44fc:	c9 01       	movw	r24, r18
    44fe:	b8 01       	movw	r22, r16
    4500:	6c 19       	sub	r22, r12
    4502:	7d 09       	sbc	r23, r13
    4504:	8e 09       	sbc	r24, r14
    4506:	9f 09       	sbc	r25, r15
    4508:	0e 94 55 22 	call	0x44aa	; 0x44aa <_Z6randoml>
    450c:	6c 0d       	add	r22, r12
    450e:	7d 1d       	adc	r23, r13
    4510:	8e 1d       	adc	r24, r14
    4512:	9f 1d       	adc	r25, r15
}
    4514:	1f 91       	pop	r17
    4516:	0f 91       	pop	r16
    4518:	ff 90       	pop	r15
    451a:	ef 90       	pop	r14
    451c:	df 90       	pop	r13
    451e:	cf 90       	pop	r12
    4520:	08 95       	ret

00004522 <_ZN12RHGenericSPI15attachInterruptEv>:
#endif

    /// SPI Configuration methods
    /// Enable SPI interrupts (if supported)
    /// This can be used in an SPI slave to indicate when an SPI message has been received
    virtual void attachInterrupt() {};
    4522:	08 95       	ret

00004524 <_ZN12RHGenericSPI15detachInterruptEv>:

    /// Disable SPI interrupts (if supported)
    /// This can be used to diable the SPI interrupt in slaves where that is supported.
    virtual void detachInterrupt() {};
    4524:	08 95       	ret

00004526 <_ZN12RHGenericSPI16beginTransactionEv>:
    /// Signal the start of an SPI transaction that must not be interrupted by other SPI actions
    /// In subclasses that support transactions this will ensure that other SPI transactions
    /// are blocked until this one is completed by endTransaction().
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void beginTransaction(){}
    4526:	08 95       	ret

00004528 <_ZN12RHGenericSPI14endTransactionEv>:

    /// Signal the end of an SPI transaction
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void endTransaction(){}
    4528:	08 95       	ret

0000452a <_ZN12RHGenericSPI14usingInterruptEh>:
    /// Tells the SPI support software that SPI transactions will occur with the interrupt
    /// handler assocated with interruptNumber
    /// Base does nothing
    /// Might be overridden in subclass
    /// \param[in] interruptNumber The number of the interrupt
    virtual void usingInterrupt(uint8_t interruptNumber){
    452a:	08 95       	ret

0000452c <_ZN12RHGenericSPI11setBitOrderENS_8BitOrderE>:
{
}

void RHGenericSPI::setBitOrder(BitOrder bitOrder)
{
    _bitOrder = bitOrder;
    452c:	fc 01       	movw	r30, r24
    452e:	63 83       	std	Z+3, r22	; 0x03
    4530:	08 95       	ret

00004532 <_ZN12RHGenericSPI11setDataModeENS_8DataModeE>:
}

void RHGenericSPI::setDataMode(DataMode dataMode)
{
    _dataMode = dataMode; 
    4532:	fc 01       	movw	r30, r24
    4534:	64 83       	std	Z+4, r22	; 0x04
    4536:	08 95       	ret

00004538 <_ZN12RHGenericSPI12setFrequencyENS_9FrequencyE>:
}

void RHGenericSPI::setFrequency(Frequency frequency)
{
    _frequency = frequency;
    4538:	fc 01       	movw	r30, r24
    453a:	62 83       	std	Z+2, r22	; 0x02
    453c:	08 95       	ret

0000453e <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>:
// Contributed by Joanna Rutkowska
// $Id: RHGenericSPI.cpp,v 1.2 2014/04/12 05:26:05 mikem Exp $

#include <RHGenericSPI.h>

RHGenericSPI::RHGenericSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
    453e:	fc 01       	movw	r30, r24
    :
    _frequency(frequency),
    _bitOrder(bitOrder),
    _dataMode(dataMode)
    4540:	8c ea       	ldi	r24, 0xAC	; 172
    4542:	92 e0       	ldi	r25, 0x02	; 2
    4544:	91 83       	std	Z+1, r25	; 0x01
    4546:	80 83       	st	Z, r24
    4548:	62 83       	std	Z+2, r22	; 0x02
    454a:	43 83       	std	Z+3, r20	; 0x03
    454c:	24 83       	std	Z+4, r18	; 0x04
    454e:	08 95       	ret

00004550 <_ZN11RHSPIDriver4initEv>:
    return status;
}

void RHSPIDriver::setSlaveSelectPin(uint8_t slaveSelectPin)
{
    _slaveSelectPin = slaveSelectPin;
    4550:	cf 93       	push	r28
    4552:	df 93       	push	r29
    4554:	ec 01       	movw	r28, r24
    4556:	88 8d       	ldd	r24, Y+24	; 0x18
    4558:	99 8d       	ldd	r25, Y+25	; 0x19
    455a:	dc 01       	movw	r26, r24
    455c:	ed 91       	ld	r30, X+
    455e:	fc 91       	ld	r31, X
    4560:	06 80       	ldd	r0, Z+6	; 0x06
    4562:	f7 81       	ldd	r31, Z+7	; 0x07
    4564:	e0 2d       	mov	r30, r0
    4566:	09 95       	icall
    4568:	8a 8d       	ldd	r24, Y+26	; 0x1a
    456a:	8f 3f       	cpi	r24, 0xFF	; 255
    456c:	19 f0       	breq	.+6      	; 0x4574 <_ZN11RHSPIDriver4initEv+0x24>
    456e:	61 e0       	ldi	r22, 0x01	; 1
    4570:	0e 94 91 19 	call	0x3322	; 0x3322 <pinMode>
    4574:	e8 81       	ld	r30, Y
    4576:	f9 81       	ldd	r31, Y+1	; 0x01
    4578:	06 ac       	ldd	r0, Z+62	; 0x3e
    457a:	f7 ad       	ldd	r31, Z+63	; 0x3f
    457c:	e0 2d       	mov	r30, r0
    457e:	ce 01       	movw	r24, r28
    4580:	09 95       	icall
    4582:	64 e6       	ldi	r22, 0x64	; 100
    4584:	70 e0       	ldi	r23, 0x00	; 0
    4586:	80 e0       	ldi	r24, 0x00	; 0
    4588:	90 e0       	ldi	r25, 0x00	; 0
    458a:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <delay>
    458e:	81 e0       	ldi	r24, 0x01	; 1
    4590:	df 91       	pop	r29
    4592:	cf 91       	pop	r28
    4594:	08 95       	ret

00004596 <_ZN11RHSPIDriver11selectSlaveEv>:
    4596:	60 e0       	ldi	r22, 0x00	; 0
    4598:	fc 01       	movw	r30, r24
    459a:	82 8d       	ldd	r24, Z+26	; 0x1a
    459c:	0c 94 cd 19 	jmp	0x339a	; 0x339a <digitalWrite>

000045a0 <_ZN11RHSPIDriver13deselectSlaveEv>:
    45a0:	61 e0       	ldi	r22, 0x01	; 1
    45a2:	fc 01       	movw	r30, r24
    45a4:	82 8d       	ldd	r24, Z+26	; 0x1a
    45a6:	0c 94 cd 19 	jmp	0x339a	; 0x339a <digitalWrite>

000045aa <_ZN11RHSPIDriverC1EhR12RHGenericSPI>:
    45aa:	ef 92       	push	r14
    45ac:	ff 92       	push	r15
    45ae:	1f 93       	push	r17
    45b0:	cf 93       	push	r28
    45b2:	df 93       	push	r29
    45b4:	ec 01       	movw	r28, r24
    45b6:	16 2f       	mov	r17, r22
    45b8:	7a 01       	movw	r14, r20
    45ba:	0e 94 42 1c 	call	0x3884	; 0x3884 <_ZN15RHGenericDriverC1Ev>
    45be:	86 ec       	ldi	r24, 0xC6	; 198
    45c0:	92 e0       	ldi	r25, 0x02	; 2
    45c2:	99 83       	std	Y+1, r25	; 0x01
    45c4:	88 83       	st	Y, r24
    45c6:	f9 8e       	std	Y+25, r15	; 0x19
    45c8:	e8 8e       	std	Y+24, r14	; 0x18
    45ca:	1a 8f       	std	Y+26, r17	; 0x1a
    45cc:	df 91       	pop	r29
    45ce:	cf 91       	pop	r28
    45d0:	1f 91       	pop	r17
    45d2:	ff 90       	pop	r15
    45d4:	ef 90       	pop	r14
    45d6:	08 95       	ret

000045d8 <_ZN11RHSPIDriver7spiReadEh>:
    45d8:	0f 93       	push	r16
    45da:	1f 93       	push	r17
    45dc:	cf 93       	push	r28
    45de:	df 93       	push	r29
    45e0:	ec 01       	movw	r28, r24
    45e2:	16 2f       	mov	r17, r22
    45e4:	0f b7       	in	r16, 0x3f	; 63
    45e6:	f8 94       	cli
    45e8:	88 8d       	ldd	r24, Y+24	; 0x18
    45ea:	99 8d       	ldd	r25, Y+25	; 0x19
    45ec:	dc 01       	movw	r26, r24
    45ee:	ed 91       	ld	r30, X+
    45f0:	fc 91       	ld	r31, X
    45f2:	00 88       	ldd	r0, Z+16	; 0x10
    45f4:	f1 89       	ldd	r31, Z+17	; 0x11
    45f6:	e0 2d       	mov	r30, r0
    45f8:	09 95       	icall
    45fa:	e8 81       	ld	r30, Y
    45fc:	f9 81       	ldd	r31, Y+1	; 0x01
    45fe:	04 ac       	ldd	r0, Z+60	; 0x3c
    4600:	f5 ad       	ldd	r31, Z+61	; 0x3d
    4602:	e0 2d       	mov	r30, r0
    4604:	ce 01       	movw	r24, r28
    4606:	09 95       	icall
    4608:	88 8d       	ldd	r24, Y+24	; 0x18
    460a:	99 8d       	ldd	r25, Y+25	; 0x19
    460c:	61 2f       	mov	r22, r17
    460e:	6f 77       	andi	r22, 0x7F	; 127
    4610:	dc 01       	movw	r26, r24
    4612:	ed 91       	ld	r30, X+
    4614:	fc 91       	ld	r31, X
    4616:	01 90       	ld	r0, Z+
    4618:	f0 81       	ld	r31, Z
    461a:	e0 2d       	mov	r30, r0
    461c:	09 95       	icall
    461e:	88 8d       	ldd	r24, Y+24	; 0x18
    4620:	99 8d       	ldd	r25, Y+25	; 0x19
    4622:	dc 01       	movw	r26, r24
    4624:	ed 91       	ld	r30, X+
    4626:	fc 91       	ld	r31, X
    4628:	01 90       	ld	r0, Z+
    462a:	f0 81       	ld	r31, Z
    462c:	e0 2d       	mov	r30, r0
    462e:	60 e0       	ldi	r22, 0x00	; 0
    4630:	09 95       	icall
    4632:	18 2f       	mov	r17, r24
    4634:	e8 81       	ld	r30, Y
    4636:	f9 81       	ldd	r31, Y+1	; 0x01
    4638:	06 ac       	ldd	r0, Z+62	; 0x3e
    463a:	f7 ad       	ldd	r31, Z+63	; 0x3f
    463c:	e0 2d       	mov	r30, r0
    463e:	ce 01       	movw	r24, r28
    4640:	09 95       	icall
    4642:	88 8d       	ldd	r24, Y+24	; 0x18
    4644:	99 8d       	ldd	r25, Y+25	; 0x19
    4646:	dc 01       	movw	r26, r24
    4648:	ed 91       	ld	r30, X+
    464a:	fc 91       	ld	r31, X
    464c:	02 88       	ldd	r0, Z+18	; 0x12
    464e:	f3 89       	ldd	r31, Z+19	; 0x13
    4650:	e0 2d       	mov	r30, r0
    4652:	09 95       	icall
    4654:	0f bf       	out	0x3f, r16	; 63
    4656:	81 2f       	mov	r24, r17
    4658:	df 91       	pop	r29
    465a:	cf 91       	pop	r28
    465c:	1f 91       	pop	r17
    465e:	0f 91       	pop	r16
    4660:	08 95       	ret

00004662 <_ZN11RHSPIDriver8spiWriteEhh>:
    4662:	ff 92       	push	r15
    4664:	0f 93       	push	r16
    4666:	1f 93       	push	r17
    4668:	cf 93       	push	r28
    466a:	df 93       	push	r29
    466c:	ec 01       	movw	r28, r24
    466e:	16 2f       	mov	r17, r22
    4670:	f4 2e       	mov	r15, r20
    4672:	0f b7       	in	r16, 0x3f	; 63
    4674:	f8 94       	cli
    4676:	88 8d       	ldd	r24, Y+24	; 0x18
    4678:	99 8d       	ldd	r25, Y+25	; 0x19
    467a:	dc 01       	movw	r26, r24
    467c:	ed 91       	ld	r30, X+
    467e:	fc 91       	ld	r31, X
    4680:	00 88       	ldd	r0, Z+16	; 0x10
    4682:	f1 89       	ldd	r31, Z+17	; 0x11
    4684:	e0 2d       	mov	r30, r0
    4686:	09 95       	icall
    4688:	e8 81       	ld	r30, Y
    468a:	f9 81       	ldd	r31, Y+1	; 0x01
    468c:	04 ac       	ldd	r0, Z+60	; 0x3c
    468e:	f5 ad       	ldd	r31, Z+61	; 0x3d
    4690:	e0 2d       	mov	r30, r0
    4692:	ce 01       	movw	r24, r28
    4694:	09 95       	icall
    4696:	88 8d       	ldd	r24, Y+24	; 0x18
    4698:	99 8d       	ldd	r25, Y+25	; 0x19
    469a:	61 2f       	mov	r22, r17
    469c:	60 68       	ori	r22, 0x80	; 128
    469e:	dc 01       	movw	r26, r24
    46a0:	ed 91       	ld	r30, X+
    46a2:	fc 91       	ld	r31, X
    46a4:	01 90       	ld	r0, Z+
    46a6:	f0 81       	ld	r31, Z
    46a8:	e0 2d       	mov	r30, r0
    46aa:	09 95       	icall
    46ac:	18 2f       	mov	r17, r24
    46ae:	88 8d       	ldd	r24, Y+24	; 0x18
    46b0:	99 8d       	ldd	r25, Y+25	; 0x19
    46b2:	dc 01       	movw	r26, r24
    46b4:	ed 91       	ld	r30, X+
    46b6:	fc 91       	ld	r31, X
    46b8:	01 90       	ld	r0, Z+
    46ba:	f0 81       	ld	r31, Z
    46bc:	e0 2d       	mov	r30, r0
    46be:	6f 2d       	mov	r22, r15
    46c0:	09 95       	icall
    46c2:	e8 81       	ld	r30, Y
    46c4:	f9 81       	ldd	r31, Y+1	; 0x01
    46c6:	06 ac       	ldd	r0, Z+62	; 0x3e
    46c8:	f7 ad       	ldd	r31, Z+63	; 0x3f
    46ca:	e0 2d       	mov	r30, r0
    46cc:	ce 01       	movw	r24, r28
    46ce:	09 95       	icall
    46d0:	88 8d       	ldd	r24, Y+24	; 0x18
    46d2:	99 8d       	ldd	r25, Y+25	; 0x19
    46d4:	dc 01       	movw	r26, r24
    46d6:	ed 91       	ld	r30, X+
    46d8:	fc 91       	ld	r31, X
    46da:	02 88       	ldd	r0, Z+18	; 0x12
    46dc:	f3 89       	ldd	r31, Z+19	; 0x13
    46de:	e0 2d       	mov	r30, r0
    46e0:	09 95       	icall
    46e2:	0f bf       	out	0x3f, r16	; 63
    46e4:	81 2f       	mov	r24, r17
    46e6:	df 91       	pop	r29
    46e8:	cf 91       	pop	r28
    46ea:	1f 91       	pop	r17
    46ec:	0f 91       	pop	r16
    46ee:	ff 90       	pop	r15
    46f0:	08 95       	ret

000046f2 <_ZN11RHSPIDriver12spiBurstReadEhPhh>:
    46f2:	bf 92       	push	r11
    46f4:	cf 92       	push	r12
    46f6:	df 92       	push	r13
    46f8:	ef 92       	push	r14
    46fa:	ff 92       	push	r15
    46fc:	0f 93       	push	r16
    46fe:	1f 93       	push	r17
    4700:	cf 93       	push	r28
    4702:	df 93       	push	r29
    4704:	ec 01       	movw	r28, r24
    4706:	06 2f       	mov	r16, r22
    4708:	b4 2e       	mov	r11, r20
    470a:	c5 2e       	mov	r12, r21
    470c:	12 2f       	mov	r17, r18
    470e:	df b6       	in	r13, 0x3f	; 63
    4710:	f8 94       	cli
    4712:	88 8d       	ldd	r24, Y+24	; 0x18
    4714:	99 8d       	ldd	r25, Y+25	; 0x19
    4716:	dc 01       	movw	r26, r24
    4718:	ed 91       	ld	r30, X+
    471a:	fc 91       	ld	r31, X
    471c:	00 88       	ldd	r0, Z+16	; 0x10
    471e:	f1 89       	ldd	r31, Z+17	; 0x11
    4720:	e0 2d       	mov	r30, r0
    4722:	09 95       	icall
    4724:	e8 81       	ld	r30, Y
    4726:	f9 81       	ldd	r31, Y+1	; 0x01
    4728:	04 ac       	ldd	r0, Z+60	; 0x3c
    472a:	f5 ad       	ldd	r31, Z+61	; 0x3d
    472c:	e0 2d       	mov	r30, r0
    472e:	ce 01       	movw	r24, r28
    4730:	09 95       	icall
    4732:	88 8d       	ldd	r24, Y+24	; 0x18
    4734:	99 8d       	ldd	r25, Y+25	; 0x19
    4736:	60 2f       	mov	r22, r16
    4738:	6f 77       	andi	r22, 0x7F	; 127
    473a:	dc 01       	movw	r26, r24
    473c:	ed 91       	ld	r30, X+
    473e:	fc 91       	ld	r31, X
    4740:	01 90       	ld	r0, Z+
    4742:	f0 81       	ld	r31, Z
    4744:	e0 2d       	mov	r30, r0
    4746:	09 95       	icall
    4748:	08 2f       	mov	r16, r24
    474a:	eb 2c       	mov	r14, r11
    474c:	fc 2c       	mov	r15, r12
    474e:	11 23       	and	r17, r17
    4750:	79 f0       	breq	.+30     	; 0x4770 <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x7e>
    4752:	88 8d       	ldd	r24, Y+24	; 0x18
    4754:	99 8d       	ldd	r25, Y+25	; 0x19
    4756:	dc 01       	movw	r26, r24
    4758:	ed 91       	ld	r30, X+
    475a:	fc 91       	ld	r31, X
    475c:	01 90       	ld	r0, Z+
    475e:	f0 81       	ld	r31, Z
    4760:	e0 2d       	mov	r30, r0
    4762:	60 e0       	ldi	r22, 0x00	; 0
    4764:	09 95       	icall
    4766:	f7 01       	movw	r30, r14
    4768:	81 93       	st	Z+, r24
    476a:	7f 01       	movw	r14, r30
    476c:	11 50       	subi	r17, 0x01	; 1
    476e:	ef cf       	rjmp	.-34     	; 0x474e <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x5c>
    4770:	e8 81       	ld	r30, Y
    4772:	f9 81       	ldd	r31, Y+1	; 0x01
    4774:	06 ac       	ldd	r0, Z+62	; 0x3e
    4776:	f7 ad       	ldd	r31, Z+63	; 0x3f
    4778:	e0 2d       	mov	r30, r0
    477a:	ce 01       	movw	r24, r28
    477c:	09 95       	icall
    477e:	88 8d       	ldd	r24, Y+24	; 0x18
    4780:	99 8d       	ldd	r25, Y+25	; 0x19
    4782:	dc 01       	movw	r26, r24
    4784:	ed 91       	ld	r30, X+
    4786:	fc 91       	ld	r31, X
    4788:	02 88       	ldd	r0, Z+18	; 0x12
    478a:	f3 89       	ldd	r31, Z+19	; 0x13
    478c:	e0 2d       	mov	r30, r0
    478e:	09 95       	icall
    4790:	df be       	out	0x3f, r13	; 63
    4792:	80 2f       	mov	r24, r16
    4794:	df 91       	pop	r29
    4796:	cf 91       	pop	r28
    4798:	1f 91       	pop	r17
    479a:	0f 91       	pop	r16
    479c:	ff 90       	pop	r15
    479e:	ef 90       	pop	r14
    47a0:	df 90       	pop	r13
    47a2:	cf 90       	pop	r12
    47a4:	bf 90       	pop	r11
    47a6:	08 95       	ret

000047a8 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>:
    47a8:	bf 92       	push	r11
    47aa:	cf 92       	push	r12
    47ac:	df 92       	push	r13
    47ae:	ef 92       	push	r14
    47b0:	ff 92       	push	r15
    47b2:	0f 93       	push	r16
    47b4:	1f 93       	push	r17
    47b6:	cf 93       	push	r28
    47b8:	df 93       	push	r29
    47ba:	ec 01       	movw	r28, r24
    47bc:	06 2f       	mov	r16, r22
    47be:	b4 2e       	mov	r11, r20
    47c0:	c5 2e       	mov	r12, r21
    47c2:	12 2f       	mov	r17, r18
    47c4:	df b6       	in	r13, 0x3f	; 63
    47c6:	f8 94       	cli
    47c8:	88 8d       	ldd	r24, Y+24	; 0x18
    47ca:	99 8d       	ldd	r25, Y+25	; 0x19
    47cc:	dc 01       	movw	r26, r24
    47ce:	ed 91       	ld	r30, X+
    47d0:	fc 91       	ld	r31, X
    47d2:	00 88       	ldd	r0, Z+16	; 0x10
    47d4:	f1 89       	ldd	r31, Z+17	; 0x11
    47d6:	e0 2d       	mov	r30, r0
    47d8:	09 95       	icall
    47da:	e8 81       	ld	r30, Y
    47dc:	f9 81       	ldd	r31, Y+1	; 0x01
    47de:	04 ac       	ldd	r0, Z+60	; 0x3c
    47e0:	f5 ad       	ldd	r31, Z+61	; 0x3d
    47e2:	e0 2d       	mov	r30, r0
    47e4:	ce 01       	movw	r24, r28
    47e6:	09 95       	icall
    47e8:	88 8d       	ldd	r24, Y+24	; 0x18
    47ea:	99 8d       	ldd	r25, Y+25	; 0x19
    47ec:	60 2f       	mov	r22, r16
    47ee:	60 68       	ori	r22, 0x80	; 128
    47f0:	dc 01       	movw	r26, r24
    47f2:	ed 91       	ld	r30, X+
    47f4:	fc 91       	ld	r31, X
    47f6:	01 90       	ld	r0, Z+
    47f8:	f0 81       	ld	r31, Z
    47fa:	e0 2d       	mov	r30, r0
    47fc:	09 95       	icall
    47fe:	08 2f       	mov	r16, r24
    4800:	eb 2c       	mov	r14, r11
    4802:	fc 2c       	mov	r15, r12
    4804:	11 23       	and	r17, r17
    4806:	71 f0       	breq	.+28     	; 0x4824 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x7c>
    4808:	88 8d       	ldd	r24, Y+24	; 0x18
    480a:	99 8d       	ldd	r25, Y+25	; 0x19
    480c:	f7 01       	movw	r30, r14
    480e:	61 91       	ld	r22, Z+
    4810:	7f 01       	movw	r14, r30
    4812:	dc 01       	movw	r26, r24
    4814:	ed 91       	ld	r30, X+
    4816:	fc 91       	ld	r31, X
    4818:	01 90       	ld	r0, Z+
    481a:	f0 81       	ld	r31, Z
    481c:	e0 2d       	mov	r30, r0
    481e:	09 95       	icall
    4820:	11 50       	subi	r17, 0x01	; 1
    4822:	f0 cf       	rjmp	.-32     	; 0x4804 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x5c>
    4824:	e8 81       	ld	r30, Y
    4826:	f9 81       	ldd	r31, Y+1	; 0x01
    4828:	06 ac       	ldd	r0, Z+62	; 0x3e
    482a:	f7 ad       	ldd	r31, Z+63	; 0x3f
    482c:	e0 2d       	mov	r30, r0
    482e:	ce 01       	movw	r24, r28
    4830:	09 95       	icall
    4832:	88 8d       	ldd	r24, Y+24	; 0x18
    4834:	99 8d       	ldd	r25, Y+25	; 0x19
    4836:	dc 01       	movw	r26, r24
    4838:	ed 91       	ld	r30, X+
    483a:	fc 91       	ld	r31, X
    483c:	02 88       	ldd	r0, Z+18	; 0x12
    483e:	f3 89       	ldd	r31, Z+19	; 0x13
    4840:	e0 2d       	mov	r30, r0
    4842:	09 95       	icall
    4844:	df be       	out	0x3f, r13	; 63
    4846:	80 2f       	mov	r24, r16
    4848:	df 91       	pop	r29
    484a:	cf 91       	pop	r28
    484c:	1f 91       	pop	r17
    484e:	0f 91       	pop	r16
    4850:	ff 90       	pop	r15
    4852:	ef 90       	pop	r14
    4854:	df 90       	pop	r13
    4856:	cf 90       	pop	r12
    4858:	bf 90       	pop	r11
    485a:	08 95       	ret

0000485c <_ZN11RHSPIDriver17spiUsingInterruptEh>:
}

void RHSPIDriver::spiUsingInterrupt(uint8_t interruptNumber)
{
    _spi.usingInterrupt(interruptNumber);
    485c:	dc 01       	movw	r26, r24
    485e:	58 96       	adiw	r26, 0x18	; 24
    4860:	8d 91       	ld	r24, X+
    4862:	9c 91       	ld	r25, X
    4864:	59 97       	sbiw	r26, 0x19	; 25
    4866:	dc 01       	movw	r26, r24
    4868:	ed 91       	ld	r30, X+
    486a:	fc 91       	ld	r31, X
    486c:	04 88       	ldd	r0, Z+20	; 0x14
    486e:	f5 89       	ldd	r31, Z+21	; 0x15
    4870:	e0 2d       	mov	r30, r0
    4872:	09 94       	ijmp

00004874 <__unordsf2>:
    4874:	0e 94 59 11 	call	0x22b2	; 0x22b2 <__fp_cmp>
    4878:	88 0b       	sbc	r24, r24
    487a:	99 0b       	sbc	r25, r25
    487c:	08 95       	ret

0000487e <__udivmodhi4>:
    487e:	aa 1b       	sub	r26, r26
    4880:	bb 1b       	sub	r27, r27
    4882:	51 e1       	ldi	r21, 0x11	; 17
    4884:	07 c0       	rjmp	.+14     	; 0x4894 <__udivmodhi4_ep>

00004886 <__udivmodhi4_loop>:
    4886:	aa 1f       	adc	r26, r26
    4888:	bb 1f       	adc	r27, r27
    488a:	a6 17       	cp	r26, r22
    488c:	b7 07       	cpc	r27, r23
    488e:	10 f0       	brcs	.+4      	; 0x4894 <__udivmodhi4_ep>
    4890:	a6 1b       	sub	r26, r22
    4892:	b7 0b       	sbc	r27, r23

00004894 <__udivmodhi4_ep>:
    4894:	88 1f       	adc	r24, r24
    4896:	99 1f       	adc	r25, r25
    4898:	5a 95       	dec	r21
    489a:	a9 f7       	brne	.-22     	; 0x4886 <__udivmodhi4_loop>
    489c:	80 95       	com	r24
    489e:	90 95       	com	r25
    48a0:	bc 01       	movw	r22, r24
    48a2:	cd 01       	movw	r24, r26
    48a4:	08 95       	ret

000048a6 <__divmodhi4>:
    48a6:	97 fb       	bst	r25, 7
    48a8:	07 2e       	mov	r0, r23
    48aa:	16 f4       	brtc	.+4      	; 0x48b0 <__divmodhi4+0xa>
    48ac:	00 94       	com	r0
    48ae:	07 d0       	rcall	.+14     	; 0x48be <__divmodhi4_neg1>
    48b0:	77 fd       	sbrc	r23, 7
    48b2:	09 d0       	rcall	.+18     	; 0x48c6 <__divmodhi4_neg2>
    48b4:	0e 94 3f 24 	call	0x487e	; 0x487e <__udivmodhi4>
    48b8:	07 fc       	sbrc	r0, 7
    48ba:	05 d0       	rcall	.+10     	; 0x48c6 <__divmodhi4_neg2>
    48bc:	3e f4       	brtc	.+14     	; 0x48cc <__divmodhi4_exit>

000048be <__divmodhi4_neg1>:
    48be:	90 95       	com	r25
    48c0:	81 95       	neg	r24
    48c2:	9f 4f       	sbci	r25, 0xFF	; 255
    48c4:	08 95       	ret

000048c6 <__divmodhi4_neg2>:
    48c6:	70 95       	com	r23
    48c8:	61 95       	neg	r22
    48ca:	7f 4f       	sbci	r23, 0xFF	; 255

000048cc <__divmodhi4_exit>:
    48cc:	08 95       	ret

000048ce <__udivmodsi4>:
    48ce:	a1 e2       	ldi	r26, 0x21	; 33
    48d0:	1a 2e       	mov	r1, r26
    48d2:	aa 1b       	sub	r26, r26
    48d4:	bb 1b       	sub	r27, r27
    48d6:	fd 01       	movw	r30, r26
    48d8:	0d c0       	rjmp	.+26     	; 0x48f4 <__udivmodsi4_ep>

000048da <__udivmodsi4_loop>:
    48da:	aa 1f       	adc	r26, r26
    48dc:	bb 1f       	adc	r27, r27
    48de:	ee 1f       	adc	r30, r30
    48e0:	ff 1f       	adc	r31, r31
    48e2:	a2 17       	cp	r26, r18
    48e4:	b3 07       	cpc	r27, r19
    48e6:	e4 07       	cpc	r30, r20
    48e8:	f5 07       	cpc	r31, r21
    48ea:	20 f0       	brcs	.+8      	; 0x48f4 <__udivmodsi4_ep>
    48ec:	a2 1b       	sub	r26, r18
    48ee:	b3 0b       	sbc	r27, r19
    48f0:	e4 0b       	sbc	r30, r20
    48f2:	f5 0b       	sbc	r31, r21

000048f4 <__udivmodsi4_ep>:
    48f4:	66 1f       	adc	r22, r22
    48f6:	77 1f       	adc	r23, r23
    48f8:	88 1f       	adc	r24, r24
    48fa:	99 1f       	adc	r25, r25
    48fc:	1a 94       	dec	r1
    48fe:	69 f7       	brne	.-38     	; 0x48da <__udivmodsi4_loop>
    4900:	60 95       	com	r22
    4902:	70 95       	com	r23
    4904:	80 95       	com	r24
    4906:	90 95       	com	r25
    4908:	9b 01       	movw	r18, r22
    490a:	ac 01       	movw	r20, r24
    490c:	bd 01       	movw	r22, r26
    490e:	cf 01       	movw	r24, r30
    4910:	08 95       	ret

00004912 <__divmodsi4>:
    4912:	05 2e       	mov	r0, r21
    4914:	97 fb       	bst	r25, 7
    4916:	1e f4       	brtc	.+6      	; 0x491e <__divmodsi4+0xc>
    4918:	00 94       	com	r0
    491a:	0e 94 a0 24 	call	0x4940	; 0x4940 <__negsi2>
    491e:	57 fd       	sbrc	r21, 7
    4920:	07 d0       	rcall	.+14     	; 0x4930 <__divmodsi4_neg2>
    4922:	0e 94 67 24 	call	0x48ce	; 0x48ce <__udivmodsi4>
    4926:	07 fc       	sbrc	r0, 7
    4928:	03 d0       	rcall	.+6      	; 0x4930 <__divmodsi4_neg2>
    492a:	4e f4       	brtc	.+18     	; 0x493e <__divmodsi4_exit>
    492c:	0c 94 a0 24 	jmp	0x4940	; 0x4940 <__negsi2>

00004930 <__divmodsi4_neg2>:
    4930:	50 95       	com	r21
    4932:	40 95       	com	r20
    4934:	30 95       	com	r19
    4936:	21 95       	neg	r18
    4938:	3f 4f       	sbci	r19, 0xFF	; 255
    493a:	4f 4f       	sbci	r20, 0xFF	; 255
    493c:	5f 4f       	sbci	r21, 0xFF	; 255

0000493e <__divmodsi4_exit>:
    493e:	08 95       	ret

00004940 <__negsi2>:
    4940:	90 95       	com	r25
    4942:	80 95       	com	r24
    4944:	70 95       	com	r23
    4946:	61 95       	neg	r22
    4948:	7f 4f       	sbci	r23, 0xFF	; 255
    494a:	8f 4f       	sbci	r24, 0xFF	; 255
    494c:	9f 4f       	sbci	r25, 0xFF	; 255
    494e:	08 95       	ret

00004950 <__muluhisi3>:
    4950:	0e 94 b9 24 	call	0x4972	; 0x4972 <__umulhisi3>
    4954:	a5 9f       	mul	r26, r21
    4956:	90 0d       	add	r25, r0
    4958:	b4 9f       	mul	r27, r20
    495a:	90 0d       	add	r25, r0
    495c:	a4 9f       	mul	r26, r20
    495e:	80 0d       	add	r24, r0
    4960:	91 1d       	adc	r25, r1
    4962:	11 24       	eor	r1, r1
    4964:	08 95       	ret

00004966 <__tablejump2__>:
    4966:	ee 0f       	add	r30, r30
    4968:	ff 1f       	adc	r31, r31
    496a:	05 90       	lpm	r0, Z+
    496c:	f4 91       	lpm	r31, Z
    496e:	e0 2d       	mov	r30, r0
    4970:	09 94       	ijmp

00004972 <__umulhisi3>:
    4972:	a2 9f       	mul	r26, r18
    4974:	b0 01       	movw	r22, r0
    4976:	b3 9f       	mul	r27, r19
    4978:	c0 01       	movw	r24, r0
    497a:	a3 9f       	mul	r26, r19
    497c:	70 0d       	add	r23, r0
    497e:	81 1d       	adc	r24, r1
    4980:	11 24       	eor	r1, r1
    4982:	91 1d       	adc	r25, r1
    4984:	b2 9f       	mul	r27, r18
    4986:	70 0d       	add	r23, r0
    4988:	81 1d       	adc	r24, r1
    498a:	11 24       	eor	r1, r1
    498c:	91 1d       	adc	r25, r1
    498e:	08 95       	ret

00004990 <malloc>:
    4990:	0f 93       	push	r16
    4992:	1f 93       	push	r17
    4994:	cf 93       	push	r28
    4996:	df 93       	push	r29
    4998:	82 30       	cpi	r24, 0x02	; 2
    499a:	91 05       	cpc	r25, r1
    499c:	10 f4       	brcc	.+4      	; 0x49a2 <malloc+0x12>
    499e:	82 e0       	ldi	r24, 0x02	; 2
    49a0:	90 e0       	ldi	r25, 0x00	; 0
    49a2:	e0 91 7b 07 	lds	r30, 0x077B	; 0x80077b <__flp>
    49a6:	f0 91 7c 07 	lds	r31, 0x077C	; 0x80077c <__flp+0x1>
    49aa:	20 e0       	ldi	r18, 0x00	; 0
    49ac:	30 e0       	ldi	r19, 0x00	; 0
    49ae:	a0 e0       	ldi	r26, 0x00	; 0
    49b0:	b0 e0       	ldi	r27, 0x00	; 0
    49b2:	30 97       	sbiw	r30, 0x00	; 0
    49b4:	19 f1       	breq	.+70     	; 0x49fc <malloc+0x6c>
    49b6:	40 81       	ld	r20, Z
    49b8:	51 81       	ldd	r21, Z+1	; 0x01
    49ba:	02 81       	ldd	r16, Z+2	; 0x02
    49bc:	13 81       	ldd	r17, Z+3	; 0x03
    49be:	48 17       	cp	r20, r24
    49c0:	59 07       	cpc	r21, r25
    49c2:	c8 f0       	brcs	.+50     	; 0x49f6 <malloc+0x66>
    49c4:	84 17       	cp	r24, r20
    49c6:	95 07       	cpc	r25, r21
    49c8:	69 f4       	brne	.+26     	; 0x49e4 <malloc+0x54>
    49ca:	10 97       	sbiw	r26, 0x00	; 0
    49cc:	31 f0       	breq	.+12     	; 0x49da <malloc+0x4a>
    49ce:	12 96       	adiw	r26, 0x02	; 2
    49d0:	0c 93       	st	X, r16
    49d2:	12 97       	sbiw	r26, 0x02	; 2
    49d4:	13 96       	adiw	r26, 0x03	; 3
    49d6:	1c 93       	st	X, r17
    49d8:	27 c0       	rjmp	.+78     	; 0x4a28 <malloc+0x98>
    49da:	00 93 7b 07 	sts	0x077B, r16	; 0x80077b <__flp>
    49de:	10 93 7c 07 	sts	0x077C, r17	; 0x80077c <__flp+0x1>
    49e2:	22 c0       	rjmp	.+68     	; 0x4a28 <malloc+0x98>
    49e4:	21 15       	cp	r18, r1
    49e6:	31 05       	cpc	r19, r1
    49e8:	19 f0       	breq	.+6      	; 0x49f0 <malloc+0x60>
    49ea:	42 17       	cp	r20, r18
    49ec:	53 07       	cpc	r21, r19
    49ee:	18 f4       	brcc	.+6      	; 0x49f6 <malloc+0x66>
    49f0:	9a 01       	movw	r18, r20
    49f2:	bd 01       	movw	r22, r26
    49f4:	ef 01       	movw	r28, r30
    49f6:	df 01       	movw	r26, r30
    49f8:	f8 01       	movw	r30, r16
    49fa:	db cf       	rjmp	.-74     	; 0x49b2 <malloc+0x22>
    49fc:	21 15       	cp	r18, r1
    49fe:	31 05       	cpc	r19, r1
    4a00:	f9 f0       	breq	.+62     	; 0x4a40 <malloc+0xb0>
    4a02:	28 1b       	sub	r18, r24
    4a04:	39 0b       	sbc	r19, r25
    4a06:	24 30       	cpi	r18, 0x04	; 4
    4a08:	31 05       	cpc	r19, r1
    4a0a:	80 f4       	brcc	.+32     	; 0x4a2c <malloc+0x9c>
    4a0c:	8a 81       	ldd	r24, Y+2	; 0x02
    4a0e:	9b 81       	ldd	r25, Y+3	; 0x03
    4a10:	61 15       	cp	r22, r1
    4a12:	71 05       	cpc	r23, r1
    4a14:	21 f0       	breq	.+8      	; 0x4a1e <malloc+0x8e>
    4a16:	fb 01       	movw	r30, r22
    4a18:	93 83       	std	Z+3, r25	; 0x03
    4a1a:	82 83       	std	Z+2, r24	; 0x02
    4a1c:	04 c0       	rjmp	.+8      	; 0x4a26 <malloc+0x96>
    4a1e:	90 93 7c 07 	sts	0x077C, r25	; 0x80077c <__flp+0x1>
    4a22:	80 93 7b 07 	sts	0x077B, r24	; 0x80077b <__flp>
    4a26:	fe 01       	movw	r30, r28
    4a28:	32 96       	adiw	r30, 0x02	; 2
    4a2a:	44 c0       	rjmp	.+136    	; 0x4ab4 <malloc+0x124>
    4a2c:	fe 01       	movw	r30, r28
    4a2e:	e2 0f       	add	r30, r18
    4a30:	f3 1f       	adc	r31, r19
    4a32:	81 93       	st	Z+, r24
    4a34:	91 93       	st	Z+, r25
    4a36:	22 50       	subi	r18, 0x02	; 2
    4a38:	31 09       	sbc	r19, r1
    4a3a:	39 83       	std	Y+1, r19	; 0x01
    4a3c:	28 83       	st	Y, r18
    4a3e:	3a c0       	rjmp	.+116    	; 0x4ab4 <malloc+0x124>
    4a40:	20 91 79 07 	lds	r18, 0x0779	; 0x800779 <__brkval>
    4a44:	30 91 7a 07 	lds	r19, 0x077A	; 0x80077a <__brkval+0x1>
    4a48:	23 2b       	or	r18, r19
    4a4a:	41 f4       	brne	.+16     	; 0x4a5c <malloc+0xcc>
    4a4c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    4a50:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    4a54:	30 93 7a 07 	sts	0x077A, r19	; 0x80077a <__brkval+0x1>
    4a58:	20 93 79 07 	sts	0x0779, r18	; 0x800779 <__brkval>
    4a5c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    4a60:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    4a64:	21 15       	cp	r18, r1
    4a66:	31 05       	cpc	r19, r1
    4a68:	41 f4       	brne	.+16     	; 0x4a7a <malloc+0xea>
    4a6a:	2d b7       	in	r18, 0x3d	; 61
    4a6c:	3e b7       	in	r19, 0x3e	; 62
    4a6e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    4a72:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    4a76:	24 1b       	sub	r18, r20
    4a78:	35 0b       	sbc	r19, r21
    4a7a:	e0 91 79 07 	lds	r30, 0x0779	; 0x800779 <__brkval>
    4a7e:	f0 91 7a 07 	lds	r31, 0x077A	; 0x80077a <__brkval+0x1>
    4a82:	e2 17       	cp	r30, r18
    4a84:	f3 07       	cpc	r31, r19
    4a86:	a0 f4       	brcc	.+40     	; 0x4ab0 <malloc+0x120>
    4a88:	2e 1b       	sub	r18, r30
    4a8a:	3f 0b       	sbc	r19, r31
    4a8c:	28 17       	cp	r18, r24
    4a8e:	39 07       	cpc	r19, r25
    4a90:	78 f0       	brcs	.+30     	; 0x4ab0 <malloc+0x120>
    4a92:	ac 01       	movw	r20, r24
    4a94:	4e 5f       	subi	r20, 0xFE	; 254
    4a96:	5f 4f       	sbci	r21, 0xFF	; 255
    4a98:	24 17       	cp	r18, r20
    4a9a:	35 07       	cpc	r19, r21
    4a9c:	48 f0       	brcs	.+18     	; 0x4ab0 <malloc+0x120>
    4a9e:	4e 0f       	add	r20, r30
    4aa0:	5f 1f       	adc	r21, r31
    4aa2:	50 93 7a 07 	sts	0x077A, r21	; 0x80077a <__brkval+0x1>
    4aa6:	40 93 79 07 	sts	0x0779, r20	; 0x800779 <__brkval>
    4aaa:	81 93       	st	Z+, r24
    4aac:	91 93       	st	Z+, r25
    4aae:	02 c0       	rjmp	.+4      	; 0x4ab4 <malloc+0x124>
    4ab0:	e0 e0       	ldi	r30, 0x00	; 0
    4ab2:	f0 e0       	ldi	r31, 0x00	; 0
    4ab4:	cf 01       	movw	r24, r30
    4ab6:	df 91       	pop	r29
    4ab8:	cf 91       	pop	r28
    4aba:	1f 91       	pop	r17
    4abc:	0f 91       	pop	r16
    4abe:	08 95       	ret

00004ac0 <free>:
    4ac0:	cf 93       	push	r28
    4ac2:	df 93       	push	r29
    4ac4:	00 97       	sbiw	r24, 0x00	; 0
    4ac6:	09 f4       	brne	.+2      	; 0x4aca <free+0xa>
    4ac8:	81 c0       	rjmp	.+258    	; 0x4bcc <free+0x10c>
    4aca:	fc 01       	movw	r30, r24
    4acc:	32 97       	sbiw	r30, 0x02	; 2
    4ace:	13 82       	std	Z+3, r1	; 0x03
    4ad0:	12 82       	std	Z+2, r1	; 0x02
    4ad2:	a0 91 7b 07 	lds	r26, 0x077B	; 0x80077b <__flp>
    4ad6:	b0 91 7c 07 	lds	r27, 0x077C	; 0x80077c <__flp+0x1>
    4ada:	10 97       	sbiw	r26, 0x00	; 0
    4adc:	81 f4       	brne	.+32     	; 0x4afe <free+0x3e>
    4ade:	20 81       	ld	r18, Z
    4ae0:	31 81       	ldd	r19, Z+1	; 0x01
    4ae2:	82 0f       	add	r24, r18
    4ae4:	93 1f       	adc	r25, r19
    4ae6:	20 91 79 07 	lds	r18, 0x0779	; 0x800779 <__brkval>
    4aea:	30 91 7a 07 	lds	r19, 0x077A	; 0x80077a <__brkval+0x1>
    4aee:	28 17       	cp	r18, r24
    4af0:	39 07       	cpc	r19, r25
    4af2:	51 f5       	brne	.+84     	; 0x4b48 <free+0x88>
    4af4:	f0 93 7a 07 	sts	0x077A, r31	; 0x80077a <__brkval+0x1>
    4af8:	e0 93 79 07 	sts	0x0779, r30	; 0x800779 <__brkval>
    4afc:	67 c0       	rjmp	.+206    	; 0x4bcc <free+0x10c>
    4afe:	ed 01       	movw	r28, r26
    4b00:	20 e0       	ldi	r18, 0x00	; 0
    4b02:	30 e0       	ldi	r19, 0x00	; 0
    4b04:	ce 17       	cp	r28, r30
    4b06:	df 07       	cpc	r29, r31
    4b08:	40 f4       	brcc	.+16     	; 0x4b1a <free+0x5a>
    4b0a:	4a 81       	ldd	r20, Y+2	; 0x02
    4b0c:	5b 81       	ldd	r21, Y+3	; 0x03
    4b0e:	9e 01       	movw	r18, r28
    4b10:	41 15       	cp	r20, r1
    4b12:	51 05       	cpc	r21, r1
    4b14:	f1 f0       	breq	.+60     	; 0x4b52 <free+0x92>
    4b16:	ea 01       	movw	r28, r20
    4b18:	f5 cf       	rjmp	.-22     	; 0x4b04 <free+0x44>
    4b1a:	d3 83       	std	Z+3, r29	; 0x03
    4b1c:	c2 83       	std	Z+2, r28	; 0x02
    4b1e:	40 81       	ld	r20, Z
    4b20:	51 81       	ldd	r21, Z+1	; 0x01
    4b22:	84 0f       	add	r24, r20
    4b24:	95 1f       	adc	r25, r21
    4b26:	c8 17       	cp	r28, r24
    4b28:	d9 07       	cpc	r29, r25
    4b2a:	59 f4       	brne	.+22     	; 0x4b42 <free+0x82>
    4b2c:	88 81       	ld	r24, Y
    4b2e:	99 81       	ldd	r25, Y+1	; 0x01
    4b30:	84 0f       	add	r24, r20
    4b32:	95 1f       	adc	r25, r21
    4b34:	02 96       	adiw	r24, 0x02	; 2
    4b36:	91 83       	std	Z+1, r25	; 0x01
    4b38:	80 83       	st	Z, r24
    4b3a:	8a 81       	ldd	r24, Y+2	; 0x02
    4b3c:	9b 81       	ldd	r25, Y+3	; 0x03
    4b3e:	93 83       	std	Z+3, r25	; 0x03
    4b40:	82 83       	std	Z+2, r24	; 0x02
    4b42:	21 15       	cp	r18, r1
    4b44:	31 05       	cpc	r19, r1
    4b46:	29 f4       	brne	.+10     	; 0x4b52 <free+0x92>
    4b48:	f0 93 7c 07 	sts	0x077C, r31	; 0x80077c <__flp+0x1>
    4b4c:	e0 93 7b 07 	sts	0x077B, r30	; 0x80077b <__flp>
    4b50:	3d c0       	rjmp	.+122    	; 0x4bcc <free+0x10c>
    4b52:	e9 01       	movw	r28, r18
    4b54:	fb 83       	std	Y+3, r31	; 0x03
    4b56:	ea 83       	std	Y+2, r30	; 0x02
    4b58:	49 91       	ld	r20, Y+
    4b5a:	59 91       	ld	r21, Y+
    4b5c:	c4 0f       	add	r28, r20
    4b5e:	d5 1f       	adc	r29, r21
    4b60:	ec 17       	cp	r30, r28
    4b62:	fd 07       	cpc	r31, r29
    4b64:	61 f4       	brne	.+24     	; 0x4b7e <free+0xbe>
    4b66:	80 81       	ld	r24, Z
    4b68:	91 81       	ldd	r25, Z+1	; 0x01
    4b6a:	84 0f       	add	r24, r20
    4b6c:	95 1f       	adc	r25, r21
    4b6e:	02 96       	adiw	r24, 0x02	; 2
    4b70:	e9 01       	movw	r28, r18
    4b72:	99 83       	std	Y+1, r25	; 0x01
    4b74:	88 83       	st	Y, r24
    4b76:	82 81       	ldd	r24, Z+2	; 0x02
    4b78:	93 81       	ldd	r25, Z+3	; 0x03
    4b7a:	9b 83       	std	Y+3, r25	; 0x03
    4b7c:	8a 83       	std	Y+2, r24	; 0x02
    4b7e:	e0 e0       	ldi	r30, 0x00	; 0
    4b80:	f0 e0       	ldi	r31, 0x00	; 0
    4b82:	12 96       	adiw	r26, 0x02	; 2
    4b84:	8d 91       	ld	r24, X+
    4b86:	9c 91       	ld	r25, X
    4b88:	13 97       	sbiw	r26, 0x03	; 3
    4b8a:	00 97       	sbiw	r24, 0x00	; 0
    4b8c:	19 f0       	breq	.+6      	; 0x4b94 <free+0xd4>
    4b8e:	fd 01       	movw	r30, r26
    4b90:	dc 01       	movw	r26, r24
    4b92:	f7 cf       	rjmp	.-18     	; 0x4b82 <free+0xc2>
    4b94:	8d 91       	ld	r24, X+
    4b96:	9c 91       	ld	r25, X
    4b98:	11 97       	sbiw	r26, 0x01	; 1
    4b9a:	9d 01       	movw	r18, r26
    4b9c:	2e 5f       	subi	r18, 0xFE	; 254
    4b9e:	3f 4f       	sbci	r19, 0xFF	; 255
    4ba0:	82 0f       	add	r24, r18
    4ba2:	93 1f       	adc	r25, r19
    4ba4:	20 91 79 07 	lds	r18, 0x0779	; 0x800779 <__brkval>
    4ba8:	30 91 7a 07 	lds	r19, 0x077A	; 0x80077a <__brkval+0x1>
    4bac:	28 17       	cp	r18, r24
    4bae:	39 07       	cpc	r19, r25
    4bb0:	69 f4       	brne	.+26     	; 0x4bcc <free+0x10c>
    4bb2:	30 97       	sbiw	r30, 0x00	; 0
    4bb4:	29 f4       	brne	.+10     	; 0x4bc0 <free+0x100>
    4bb6:	10 92 7c 07 	sts	0x077C, r1	; 0x80077c <__flp+0x1>
    4bba:	10 92 7b 07 	sts	0x077B, r1	; 0x80077b <__flp>
    4bbe:	02 c0       	rjmp	.+4      	; 0x4bc4 <free+0x104>
    4bc0:	13 82       	std	Z+3, r1	; 0x03
    4bc2:	12 82       	std	Z+2, r1	; 0x02
    4bc4:	b0 93 7a 07 	sts	0x077A, r27	; 0x80077a <__brkval+0x1>
    4bc8:	a0 93 79 07 	sts	0x0779, r26	; 0x800779 <__brkval>
    4bcc:	df 91       	pop	r29
    4bce:	cf 91       	pop	r28
    4bd0:	08 95       	ret

00004bd2 <random_r>:
    4bd2:	8f 92       	push	r8
    4bd4:	9f 92       	push	r9
    4bd6:	af 92       	push	r10
    4bd8:	bf 92       	push	r11
    4bda:	cf 92       	push	r12
    4bdc:	df 92       	push	r13
    4bde:	ef 92       	push	r14
    4be0:	ff 92       	push	r15
    4be2:	cf 93       	push	r28
    4be4:	df 93       	push	r29
    4be6:	ec 01       	movw	r28, r24
    4be8:	68 81       	ld	r22, Y
    4bea:	79 81       	ldd	r23, Y+1	; 0x01
    4bec:	8a 81       	ldd	r24, Y+2	; 0x02
    4bee:	9b 81       	ldd	r25, Y+3	; 0x03
    4bf0:	61 15       	cp	r22, r1
    4bf2:	71 05       	cpc	r23, r1
    4bf4:	81 05       	cpc	r24, r1
    4bf6:	91 05       	cpc	r25, r1
    4bf8:	21 f4       	brne	.+8      	; 0x4c02 <random_r+0x30>
    4bfa:	64 e2       	ldi	r22, 0x24	; 36
    4bfc:	79 ed       	ldi	r23, 0xD9	; 217
    4bfe:	8b e5       	ldi	r24, 0x5B	; 91
    4c00:	97 e0       	ldi	r25, 0x07	; 7
    4c02:	2d e1       	ldi	r18, 0x1D	; 29
    4c04:	33 ef       	ldi	r19, 0xF3	; 243
    4c06:	41 e0       	ldi	r20, 0x01	; 1
    4c08:	50 e0       	ldi	r21, 0x00	; 0
    4c0a:	0e 94 89 24 	call	0x4912	; 0x4912 <__divmodsi4>
    4c0e:	49 01       	movw	r8, r18
    4c10:	5a 01       	movw	r10, r20
    4c12:	9b 01       	movw	r18, r22
    4c14:	ac 01       	movw	r20, r24
    4c16:	a7 ea       	ldi	r26, 0xA7	; 167
    4c18:	b1 e4       	ldi	r27, 0x41	; 65
    4c1a:	0e 94 a8 24 	call	0x4950	; 0x4950 <__muluhisi3>
    4c1e:	6b 01       	movw	r12, r22
    4c20:	7c 01       	movw	r14, r24
    4c22:	ac ee       	ldi	r26, 0xEC	; 236
    4c24:	b4 ef       	ldi	r27, 0xF4	; 244
    4c26:	a5 01       	movw	r20, r10
    4c28:	94 01       	movw	r18, r8
    4c2a:	0e 94 c2 26 	call	0x4d84	; 0x4d84 <__mulohisi3>
    4c2e:	dc 01       	movw	r26, r24
    4c30:	cb 01       	movw	r24, r22
    4c32:	8c 0d       	add	r24, r12
    4c34:	9d 1d       	adc	r25, r13
    4c36:	ae 1d       	adc	r26, r14
    4c38:	bf 1d       	adc	r27, r15
    4c3a:	b7 ff       	sbrs	r27, 7
    4c3c:	03 c0       	rjmp	.+6      	; 0x4c44 <random_r+0x72>
    4c3e:	01 97       	sbiw	r24, 0x01	; 1
    4c40:	a1 09       	sbc	r26, r1
    4c42:	b0 48       	sbci	r27, 0x80	; 128
    4c44:	88 83       	st	Y, r24
    4c46:	99 83       	std	Y+1, r25	; 0x01
    4c48:	aa 83       	std	Y+2, r26	; 0x02
    4c4a:	bb 83       	std	Y+3, r27	; 0x03
    4c4c:	bc 01       	movw	r22, r24
    4c4e:	cd 01       	movw	r24, r26
    4c50:	9f 77       	andi	r25, 0x7F	; 127
    4c52:	df 91       	pop	r29
    4c54:	cf 91       	pop	r28
    4c56:	ff 90       	pop	r15
    4c58:	ef 90       	pop	r14
    4c5a:	df 90       	pop	r13
    4c5c:	cf 90       	pop	r12
    4c5e:	bf 90       	pop	r11
    4c60:	af 90       	pop	r10
    4c62:	9f 90       	pop	r9
    4c64:	8f 90       	pop	r8
    4c66:	08 95       	ret

00004c68 <random>:
    4c68:	8f 92       	push	r8
    4c6a:	9f 92       	push	r9
    4c6c:	af 92       	push	r10
    4c6e:	bf 92       	push	r11
    4c70:	cf 92       	push	r12
    4c72:	df 92       	push	r13
    4c74:	ef 92       	push	r14
    4c76:	ff 92       	push	r15
    4c78:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <next>
    4c7c:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <next+0x1>
    4c80:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <next+0x2>
    4c84:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <next+0x3>
    4c88:	61 15       	cp	r22, r1
    4c8a:	71 05       	cpc	r23, r1
    4c8c:	81 05       	cpc	r24, r1
    4c8e:	91 05       	cpc	r25, r1
    4c90:	21 f4       	brne	.+8      	; 0x4c9a <random+0x32>
    4c92:	64 e2       	ldi	r22, 0x24	; 36
    4c94:	79 ed       	ldi	r23, 0xD9	; 217
    4c96:	8b e5       	ldi	r24, 0x5B	; 91
    4c98:	97 e0       	ldi	r25, 0x07	; 7
    4c9a:	2d e1       	ldi	r18, 0x1D	; 29
    4c9c:	33 ef       	ldi	r19, 0xF3	; 243
    4c9e:	41 e0       	ldi	r20, 0x01	; 1
    4ca0:	50 e0       	ldi	r21, 0x00	; 0
    4ca2:	0e 94 89 24 	call	0x4912	; 0x4912 <__divmodsi4>
    4ca6:	49 01       	movw	r8, r18
    4ca8:	5a 01       	movw	r10, r20
    4caa:	9b 01       	movw	r18, r22
    4cac:	ac 01       	movw	r20, r24
    4cae:	a7 ea       	ldi	r26, 0xA7	; 167
    4cb0:	b1 e4       	ldi	r27, 0x41	; 65
    4cb2:	0e 94 a8 24 	call	0x4950	; 0x4950 <__muluhisi3>
    4cb6:	6b 01       	movw	r12, r22
    4cb8:	7c 01       	movw	r14, r24
    4cba:	ac ee       	ldi	r26, 0xEC	; 236
    4cbc:	b4 ef       	ldi	r27, 0xF4	; 244
    4cbe:	a5 01       	movw	r20, r10
    4cc0:	94 01       	movw	r18, r8
    4cc2:	0e 94 c2 26 	call	0x4d84	; 0x4d84 <__mulohisi3>
    4cc6:	dc 01       	movw	r26, r24
    4cc8:	cb 01       	movw	r24, r22
    4cca:	8c 0d       	add	r24, r12
    4ccc:	9d 1d       	adc	r25, r13
    4cce:	ae 1d       	adc	r26, r14
    4cd0:	bf 1d       	adc	r27, r15
    4cd2:	b7 ff       	sbrs	r27, 7
    4cd4:	03 c0       	rjmp	.+6      	; 0x4cdc <random+0x74>
    4cd6:	01 97       	sbiw	r24, 0x01	; 1
    4cd8:	a1 09       	sbc	r26, r1
    4cda:	b0 48       	sbci	r27, 0x80	; 128
    4cdc:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <next>
    4ce0:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <next+0x1>
    4ce4:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <next+0x2>
    4ce8:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <next+0x3>
    4cec:	bc 01       	movw	r22, r24
    4cee:	cd 01       	movw	r24, r26
    4cf0:	9f 77       	andi	r25, 0x7F	; 127
    4cf2:	ff 90       	pop	r15
    4cf4:	ef 90       	pop	r14
    4cf6:	df 90       	pop	r13
    4cf8:	cf 90       	pop	r12
    4cfa:	bf 90       	pop	r11
    4cfc:	af 90       	pop	r10
    4cfe:	9f 90       	pop	r9
    4d00:	8f 90       	pop	r8
    4d02:	08 95       	ret

00004d04 <srandom>:
    4d04:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <next>
    4d08:	70 93 07 01 	sts	0x0107, r23	; 0x800107 <next+0x1>
    4d0c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <next+0x2>
    4d10:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <next+0x3>
    4d14:	08 95       	ret

00004d16 <abort>:
    4d16:	81 e0       	ldi	r24, 0x01	; 1
    4d18:	90 e0       	ldi	r25, 0x00	; 0
    4d1a:	f8 94       	cli
    4d1c:	0c 94 c7 26 	jmp	0x4d8e	; 0x4d8e <_exit>

00004d20 <memcpy_P>:
    4d20:	fb 01       	movw	r30, r22
    4d22:	dc 01       	movw	r26, r24
    4d24:	02 c0       	rjmp	.+4      	; 0x4d2a <memcpy_P+0xa>
    4d26:	05 90       	lpm	r0, Z+
    4d28:	0d 92       	st	X+, r0
    4d2a:	41 50       	subi	r20, 0x01	; 1
    4d2c:	50 40       	sbci	r21, 0x00	; 0
    4d2e:	d8 f7       	brcc	.-10     	; 0x4d26 <memcpy_P+0x6>
    4d30:	08 95       	ret

00004d32 <memcpy>:
    4d32:	fb 01       	movw	r30, r22
    4d34:	dc 01       	movw	r26, r24
    4d36:	02 c0       	rjmp	.+4      	; 0x4d3c <memcpy+0xa>
    4d38:	01 90       	ld	r0, Z+
    4d3a:	0d 92       	st	X+, r0
    4d3c:	41 50       	subi	r20, 0x01	; 1
    4d3e:	50 40       	sbci	r21, 0x00	; 0
    4d40:	d8 f7       	brcc	.-10     	; 0x4d38 <memcpy+0x6>
    4d42:	08 95       	ret

00004d44 <strcpy>:
    4d44:	fb 01       	movw	r30, r22
    4d46:	dc 01       	movw	r26, r24
    4d48:	01 90       	ld	r0, Z+
    4d4a:	0d 92       	st	X+, r0
    4d4c:	00 20       	and	r0, r0
    4d4e:	e1 f7       	brne	.-8      	; 0x4d48 <strcpy+0x4>
    4d50:	08 95       	ret

00004d52 <eeprom_read_byte>:
    4d52:	f9 99       	sbic	0x1f, 1	; 31
    4d54:	fe cf       	rjmp	.-4      	; 0x4d52 <eeprom_read_byte>
    4d56:	92 bd       	out	0x22, r25	; 34
    4d58:	81 bd       	out	0x21, r24	; 33
    4d5a:	f8 9a       	sbi	0x1f, 0	; 31
    4d5c:	99 27       	eor	r25, r25
    4d5e:	80 b5       	in	r24, 0x20	; 32
    4d60:	08 95       	ret

00004d62 <eeprom_write_byte>:
    4d62:	26 2f       	mov	r18, r22

00004d64 <eeprom_write_r18>:
    4d64:	f9 99       	sbic	0x1f, 1	; 31
    4d66:	fe cf       	rjmp	.-4      	; 0x4d64 <eeprom_write_r18>
    4d68:	1f ba       	out	0x1f, r1	; 31
    4d6a:	92 bd       	out	0x22, r25	; 34
    4d6c:	81 bd       	out	0x21, r24	; 33
    4d6e:	20 bd       	out	0x20, r18	; 32
    4d70:	0f b6       	in	r0, 0x3f	; 63
    4d72:	f8 94       	cli
    4d74:	fa 9a       	sbi	0x1f, 2	; 31
    4d76:	f9 9a       	sbi	0x1f, 1	; 31
    4d78:	0f be       	out	0x3f, r0	; 63
    4d7a:	01 96       	adiw	r24, 0x01	; 1
    4d7c:	08 95       	ret

00004d7e <__mulshisi3>:
    4d7e:	b7 ff       	sbrs	r27, 7
    4d80:	0c 94 a8 24 	jmp	0x4950	; 0x4950 <__muluhisi3>

00004d84 <__mulohisi3>:
    4d84:	0e 94 a8 24 	call	0x4950	; 0x4950 <__muluhisi3>
    4d88:	82 1b       	sub	r24, r18
    4d8a:	93 0b       	sbc	r25, r19
    4d8c:	08 95       	ret

00004d8e <_exit>:
    4d8e:	f8 94       	cli

00004d90 <__stop_program>:
    4d90:	ff cf       	rjmp	.-2      	; 0x4d90 <__stop_program>
